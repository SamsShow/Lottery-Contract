{"id":"a36c4ae1d4975ad976abaf927d6e48c3","_format":"hh-sol-build-info-1","solcVersion":"0.8.24","solcLongVersion":"0.8.24+commit.e11b9ed9","input":{"language":"Solidity","sources":{"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AutomationCompatibleInterface {\n  /**\n   * @notice method that is simulated by the keepers to see if any work actually\n   * needs to be performed. This method does does not actually need to be\n   * executable, and since it is only ever simulated it can consume lots of gas.\n   * @dev To ensure that it is never called, you may want to add the\n   * cannotExecute modifier from KeeperBase to your implementation of this\n   * method.\n   * @param checkData specified in the upkeep registration so it is always the\n   * same for a registered upkeep. This can easily be broken down into specific\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\n   * same contract and easily differentiated by the contract.\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\n   * performUpkeep or not.\n   * @return performData bytes that the keeper should call performUpkeep with, if\n   * upkeep is needed. If you would like to encode data to decode later, try\n   * `abi.encode`.\n   */\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\n\n  /**\n   * @notice method that is actually executed by the keepers, via the registry.\n   * The data returned by the checkUpkeep simulation will be passed into\n   * this method to actually be executed.\n   * @dev The input to this method should not be trusted, and the caller of the\n   * method should not even be restricted to any single registry. Anyone should\n   * be able call it, and the input should be validated, there is no guarantee\n   * that the data passed in is the performData returned from checkUpkeep. This\n   * could happen due to malicious keepers, racing keepers, or simply a state\n   * change while the performUpkeep transaction is waiting for confirmation.\n   * Always validate the data passed in.\n   * @param performData is the data which was passed back from the checkData\n   * simulation. If it is encoded, it can easily be decoded into other types by\n   * calling `abi.decode`. This data should not be trusted, and should be\n   * validated against the contract's current state.\n   */\n  function performUpkeep(bytes calldata performData) external;\n}\n"},"@chainlink/contracts/src/v0.8/interfaces/TypeAndVersionInterface.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nabstract contract TypeAndVersionInterface {\n  function typeAndVersion() external pure virtual returns (string memory);\n}\n"},"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {ConfirmedOwnerWithProposal} from \"./ConfirmedOwnerWithProposal.sol\";\n\n/// @title The ConfirmedOwner contract\n/// @notice A contract with helpers for basic contract ownership.\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\n}\n"},"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IOwnable} from \"../interfaces/IOwnable.sol\";\n\n/// @title The ConfirmedOwner contract\n/// @notice A contract with helpers for basic contract ownership.\ncontract ConfirmedOwnerWithProposal is IOwnable {\n  address private s_owner;\n  address private s_pendingOwner;\n\n  event OwnershipTransferRequested(address indexed from, address indexed to);\n  event OwnershipTransferred(address indexed from, address indexed to);\n\n  constructor(address newOwner, address pendingOwner) {\n    // solhint-disable-next-line gas-custom-errors\n    require(newOwner != address(0), \"Cannot set owner to zero\");\n\n    s_owner = newOwner;\n    if (pendingOwner != address(0)) {\n      _transferOwnership(pendingOwner);\n    }\n  }\n\n  /// @notice Allows an owner to begin transferring ownership to a new address.\n  function transferOwnership(address to) public override onlyOwner {\n    _transferOwnership(to);\n  }\n\n  /// @notice Allows an ownership transfer to be completed by the recipient.\n  function acceptOwnership() external override {\n    // solhint-disable-next-line gas-custom-errors\n    require(msg.sender == s_pendingOwner, \"Must be proposed owner\");\n\n    address oldOwner = s_owner;\n    s_owner = msg.sender;\n    s_pendingOwner = address(0);\n\n    emit OwnershipTransferred(oldOwner, msg.sender);\n  }\n\n  /// @notice Get the current owner\n  function owner() public view override returns (address) {\n    return s_owner;\n  }\n\n  /// @notice validate, transfer ownership, and emit relevant events\n  function _transferOwnership(address to) private {\n    // solhint-disable-next-line gas-custom-errors\n    require(to != msg.sender, \"Cannot transfer to self\");\n\n    s_pendingOwner = to;\n\n    emit OwnershipTransferRequested(s_owner, to);\n  }\n\n  /// @notice validate access\n  function _validateOwnership() internal view {\n    // solhint-disable-next-line gas-custom-errors\n    require(msg.sender == s_owner, \"Only callable by owner\");\n  }\n\n  /// @notice Reverts if called by anyone other than the contract owner.\n  modifier onlyOwner() {\n    _validateOwnership();\n    _;\n  }\n}\n"},"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"},"@chainlink/contracts/src/v0.8/shared/interfaces/IERC677Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.6;\n\ninterface IERC677Receiver {\n  function onTokenTransfer(address sender, uint256 amount, bytes calldata data) external;\n}\n"},"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IOwnable {\n  function owner() external returns (address);\n\n  function transferOwnership(address recipient) external;\n\n  function acceptOwnership() external;\n}\n"},"@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface LinkTokenInterface {\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\n\n  function approve(address spender, uint256 value) external returns (bool success);\n\n  function balanceOf(address owner) external view returns (uint256 balance);\n\n  function decimals() external view returns (uint8 decimalPlaces);\n\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\n\n  function increaseApproval(address spender, uint256 subtractedValue) external;\n\n  function name() external view returns (string memory tokenName);\n\n  function symbol() external view returns (string memory tokenSymbol);\n\n  function totalSupply() external view returns (uint256 totalTokensIssued);\n\n  function transfer(address to, uint256 value) external returns (bool success);\n\n  function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\n\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\n}\n"},"@chainlink/contracts/src/v0.8/vendor/@arbitrum/nitro-contracts/src/precompiles/ArbGasInfo.sol":{"content":"// Copyright 2021-2022, Offchain Labs, Inc.\n// For license information, see https://github.com/OffchainLabs/nitro-contracts/blob/main/LICENSE\n// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity >=0.4.21 <0.9.0;\n\n/// @title Provides insight into the cost of using the chain.\n/// @notice These methods have been adjusted to account for Nitro's heavy use of calldata compression.\n/// Of note to end-users, we no longer make a distinction between non-zero and zero-valued calldata bytes.\n/// Precompiled contract that exists in every Arbitrum chain at 0x000000000000000000000000000000000000006c.\ninterface ArbGasInfo {\n    /// @notice Get gas prices for a provided aggregator\n    /// @return return gas prices in wei\n    ///        (\n    ///            per L2 tx,\n    ///            per L1 calldata byte\n    ///            per storage allocation,\n    ///            per ArbGas base,\n    ///            per ArbGas congestion,\n    ///            per ArbGas total\n    ///        )\n    function getPricesInWeiWithAggregator(address aggregator)\n    external\n    view\n    returns (\n        uint256,\n        uint256,\n        uint256,\n        uint256,\n        uint256,\n        uint256\n    );\n\n    /// @notice Get gas prices. Uses the caller's preferred aggregator, or the default if the caller doesn't have a preferred one.\n    /// @return return gas prices in wei\n    ///        (\n    ///            per L2 tx,\n    ///            per L1 calldata byte\n    ///            per storage allocation,\n    ///            per ArbGas base,\n    ///            per ArbGas congestion,\n    ///            per ArbGas total\n    ///        )\n    function getPricesInWei()\n    external\n    view\n    returns (\n        uint256,\n        uint256,\n        uint256,\n        uint256,\n        uint256,\n        uint256\n    );\n\n    /// @notice Get prices in ArbGas for the supplied aggregator\n    /// @return (per L2 tx, per L1 calldata byte, per storage allocation)\n    function getPricesInArbGasWithAggregator(address aggregator)\n    external\n    view\n    returns (\n        uint256,\n        uint256,\n        uint256\n    );\n\n    /// @notice Get prices in ArbGas. Assumes the callers preferred validator, or the default if caller doesn't have a preferred one.\n    /// @return (per L2 tx, per L1 calldata byte, per storage allocation)\n    function getPricesInArbGas()\n    external\n    view\n    returns (\n        uint256,\n        uint256,\n        uint256\n    );\n\n    /// @notice Get the gas accounting parameters. `gasPoolMax` is always zero, as the exponential pricing model has no such notion.\n    /// @return (speedLimitPerSecond, gasPoolMax, maxTxGasLimit)\n    function getGasAccountingParams()\n    external\n    view\n    returns (\n        uint256,\n        uint256,\n        uint256\n    );\n\n    /// @notice Get the minimum gas price needed for a tx to succeed\n    function getMinimumGasPrice() external view returns (uint256);\n\n    /// @notice Get ArbOS's estimate of the L1 basefee in wei\n    function getL1BaseFeeEstimate() external view returns (uint256);\n\n    /// @notice Get how slowly ArbOS updates its estimate of the L1 basefee\n    function getL1BaseFeeEstimateInertia() external view returns (uint64);\n\n    /// @notice Get the L1 pricer reward rate, in wei per unit\n    /// Available in ArbOS version 11\n    function getL1RewardRate() external view returns (uint64);\n\n    /// @notice Get the L1 pricer reward recipient\n    /// Available in ArbOS version 11\n    function getL1RewardRecipient() external view returns (address);\n\n    /// @notice Deprecated -- Same as getL1BaseFeeEstimate()\n    function getL1GasPriceEstimate() external view returns (uint256);\n\n    /// @notice Get L1 gas fees paid by the current transaction\n    function getCurrentTxL1GasFees() external view returns (uint256);\n\n    /// @notice Get the backlogged amount of gas burnt in excess of the speed limit\n    function getGasBacklog() external view returns (uint64);\n\n    /// @notice Get how slowly ArbOS updates the L2 basefee in response to backlogged gas\n    function getPricingInertia() external view returns (uint64);\n\n    /// @notice Get the forgivable amount of backlogged gas ArbOS will ignore when raising the basefee\n    function getGasBacklogTolerance() external view returns (uint64);\n\n    /// @notice Returns the surplus of funds for L1 batch posting payments (may be negative).\n    function getL1PricingSurplus() external view returns (int256);\n\n    /// @notice Returns the base charge (in L1 gas) attributed to each data batch in the calldata pricer\n    function getPerBatchGasCharge() external view returns (int64);\n\n    /// @notice Returns the cost amortization cap in basis points\n    function getAmortizedCostCapBips() external view returns (uint64);\n\n    /// @notice Returns the available funds from L1 fees\n    function getL1FeesAvailable() external view returns (uint256);\n\n    /// @notice Returns the equilibration units parameter for L1 price adjustment algorithm\n    /// Available in ArbOS version 20\n    function getL1PricingEquilibrationUnits() external view returns (uint256);\n\n    /// @notice Returns the last time the L1 calldata pricer was updated.\n    /// Available in ArbOS version 20\n    function getLastL1PricingUpdateTime() external view returns (uint64);\n\n    /// @notice Returns the amount of L1 calldata payments due for rewards (per the L1 reward rate)\n    /// Available in ArbOS version 20\n    function getL1PricingFundsDueForRewards() external view returns (uint256);\n\n    /// @notice Returns the amount of L1 calldata posted since the last update.\n    /// Available in ArbOS version 20\n    function getL1PricingUnitsSinceUpdate() external view returns (uint64);\n\n    /// @notice Returns the L1 pricing surplus as of the last update (may be negative).\n    /// Available in ArbOS version 20\n    function getLastL1PricingSurplus() external view returns (int256);\n}"},"@chainlink/contracts/src/v0.8/vendor/@arbitrum/nitro-contracts/src/precompiles/ArbSys.sol":{"content":"// Copyright 2021-2022, Offchain Labs, Inc.\n// For license information, see https://github.com/nitro/blob/master/LICENSE\n// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity >=0.4.21 <0.9.0;\n\n/**\n * @title System level functionality\n * @notice For use by contracts to interact with core L2-specific functionality.\n * Precompiled contract that exists in every Arbitrum chain at address(100), 0x0000000000000000000000000000000000000064.\n */\ninterface ArbSys {\n    /**\n     * @notice Get Arbitrum block number (distinct from L1 block number; Arbitrum genesis block has block number 0)\n     * @return block number as int\n     */\n    function arbBlockNumber() external view returns (uint256);\n\n    /**\n     * @notice Get Arbitrum block hash (reverts unless currentBlockNum-256 <= arbBlockNum < currentBlockNum)\n     * @return block hash\n     */\n    function arbBlockHash(uint256 arbBlockNum) external view returns (bytes32);\n\n    /**\n     * @notice Gets the rollup's unique chain identifier\n     * @return Chain identifier as int\n     */\n    function arbChainID() external view returns (uint256);\n\n    /**\n     * @notice Get internal version number identifying an ArbOS build\n     * @return version number as int\n     */\n    function arbOSVersion() external view returns (uint256);\n\n    /**\n     * @notice Returns 0 since Nitro has no concept of storage gas\n     * @return uint 0\n     */\n    function getStorageGasAvailable() external view returns (uint256);\n\n    /**\n     * @notice (deprecated) check if current call is top level (meaning it was triggered by an EoA or a L1 contract)\n     * @dev this call has been deprecated and may be removed in a future release\n     * @return true if current execution frame is not a call by another L2 contract\n     */\n    function isTopLevelCall() external view returns (bool);\n\n    /**\n     * @notice map L1 sender contract address to its L2 alias\n     * @param sender sender address\n     * @param unused argument no longer used\n     * @return aliased sender address\n     */\n    function mapL1SenderContractAddressToL2Alias(address sender, address unused)\n        external\n        pure\n        returns (address);\n\n    /**\n     * @notice check if the caller (of this caller of this) is an aliased L1 contract address\n     * @return true iff the caller's address is an alias for an L1 contract address\n     */\n    function wasMyCallersAddressAliased() external view returns (bool);\n\n    /**\n     * @notice return the address of the caller (of this caller of this), without applying L1 contract address aliasing\n     * @return address of the caller's caller, without applying L1 contract address aliasing\n     */\n    function myCallersAddressWithoutAliasing() external view returns (address);\n\n    /**\n     * @notice Send given amount of Eth to dest from sender.\n     * This is a convenience function, which is equivalent to calling sendTxToL1 with empty data.\n     * @param destination recipient address on L1\n     * @return unique identifier for this L2-to-L1 transaction.\n     */\n    function withdrawEth(address destination)\n        external\n        payable\n        returns (uint256);\n\n    /**\n     * @notice Send a transaction to L1\n     * @dev it is not possible to execute on the L1 any L2-to-L1 transaction which contains data\n     * to a contract address without any code (as enforced by the Bridge contract).\n     * @param destination recipient address on L1\n     * @param data (optional) calldata for L1 contract call\n     * @return a unique identifier for this L2-to-L1 transaction.\n     */\n    function sendTxToL1(address destination, bytes calldata data)\n        external\n        payable\n        returns (uint256);\n\n    /**\n     * @notice Get send Merkle tree state\n     * @return size number of sends in the history\n     * @return root root hash of the send history\n     * @return partials hashes of partial subtrees in the send history tree\n     */\n    function sendMerkleTreeState()\n        external\n        view\n        returns (\n            uint256 size,\n            bytes32 root,\n            bytes32[] memory partials\n        );\n\n    /**\n     * @notice creates a send txn from L2 to L1\n     * @param position = (level << 192) + leaf = (0 << 192) + leaf = leaf\n     */\n    event L2ToL1Tx(\n        address caller,\n        address indexed destination,\n        uint256 indexed hash,\n        uint256 indexed position,\n        uint256 arbBlockNum,\n        uint256 ethBlockNum,\n        uint256 timestamp,\n        uint256 callvalue,\n        bytes data\n    );\n\n    /// @dev DEPRECATED in favour of the new L2ToL1Tx event above after the nitro upgrade\n    event L2ToL1Transaction(\n        address caller,\n        address indexed destination,\n        uint256 indexed uniqueId,\n        uint256 indexed batchNumber,\n        uint256 indexInBatch,\n        uint256 arbBlockNum,\n        uint256 ethBlockNum,\n        uint256 timestamp,\n        uint256 callvalue,\n        bytes data\n    );\n\n    /**\n     * @notice logs a merkle branch for proof synthesis\n     * @param reserved an index meant only to align the 4th index with L2ToL1Transaction's 4th event\n     * @param hash the merkle hash\n     * @param position = (level << 192) + leaf\n     */\n    event SendMerkleUpdate(\n        uint256 indexed reserved,\n        bytes32 indexed hash,\n        uint256 indexed position\n    );\n}\n"},"@chainlink/contracts/src/v0.8/vrf/interfaces/BlockhashStoreInterface.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface BlockhashStoreInterface {\n  function getBlockhash(uint256 number) external view returns (bytes32);\n}\n"},"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface VRFCoordinatorV2Interface {\n  /**\n   * @notice Get configuration relevant for making requests\n   * @return minimumRequestConfirmations global min for request confirmations\n   * @return maxGasLimit global max for request gas limit\n   * @return s_provingKeyHashes list of registered key hashes\n   */\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\n\n  /**\n   * @notice Request a set of random words.\n   * @param keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash's have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * @param subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * @param minimumRequestConfirmations - How many blocks you'd like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * @param callbackGasLimit - How much gas you'd like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * @param numWords - The number of uint256 random values you'd like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(\n    bytes32 keyHash,\n    uint64 subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords\n  ) external returns (uint256 requestId);\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   */\n  function createSubscription() external returns (uint64 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return reqCount - number of requests for this subscription, determines fee tier.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(\n    uint64 subId\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\n\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint64 subId, address to) external;\n\n  /*\n   * @notice Check to see if there exists a request commitment consumers\n   * for all consumers and keyhashes for a given sub.\n   * @param subId - ID of the subscription\n   * @return true if there exists at least one unfulfilled request for the subscription, false\n   * otherwise.\n   */\n  function pendingRequestExists(uint64 subId) external view returns (bool);\n}\n"},"@chainlink/contracts/src/v0.8/vrf/VRF.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/** ****************************************************************************\n  * @notice Verification of verifiable-random-function (VRF) proofs, following\n  * @notice https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.3\n  * @notice See https://eprint.iacr.org/2017/099.pdf for security proofs.\n\n  * @dev Bibliographic references:\n\n  * @dev Goldberg, et al., \"Verifiable Random Functions (VRFs)\", Internet Draft\n  * @dev draft-irtf-cfrg-vrf-05, IETF, Aug 11 2019,\n  * @dev https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05\n\n  * @dev Papadopoulos, et al., \"Making NSEC5 Practical for DNSSEC\", Cryptology\n  * @dev ePrint Archive, Report 2017/099, https://eprint.iacr.org/2017/099.pdf\n  * ****************************************************************************\n  * @dev USAGE\n\n  * @dev The main entry point is _randomValueFromVRFProof. See its docstring.\n  * ****************************************************************************\n  * @dev PURPOSE\n\n  * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n  * @dev to Vera the verifier in such a way that Vera can be sure he's not\n  * @dev making his output up to suit himself. Reggie provides Vera a public key\n  * @dev to which he knows the secret key. Each time Vera provides a seed to\n  * @dev Reggie, he gives back a value which is computed completely\n  * @dev deterministically from the seed and the secret key.\n\n  * @dev Reggie provides a proof by which Vera can verify that the output was\n  * @dev correctly computed once Reggie tells it to her, but without that proof,\n  * @dev the output is computationally indistinguishable to her from a uniform\n  * @dev random sample from the output space.\n\n  * @dev The purpose of this contract is to perform that verification.\n  * ****************************************************************************\n  * @dev DESIGN NOTES\n\n  * @dev The VRF algorithm verified here satisfies the full uniqueness, full\n  * @dev collision resistance, and full pseudo-randomness security properties.\n  * @dev See \"SECURITY PROPERTIES\" below, and\n  * @dev https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-3\n\n  * @dev An elliptic curve point is generally represented in the solidity code\n  * @dev as a uint256[2], corresponding to its affine coordinates in\n  * @dev GF(FIELD_SIZE).\n\n  * @dev For the sake of efficiency, this implementation deviates from the spec\n  * @dev in some minor ways:\n\n  * @dev - Keccak hash rather than the SHA256 hash recommended in\n  * @dev   https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.5\n  * @dev   Keccak costs much less gas on the EVM, and provides similar security.\n\n  * @dev - Secp256k1 curve instead of the P-256 or ED25519 curves recommended in\n  * @dev   https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.5\n  * @dev   For curve-point multiplication, it's much cheaper to abuse ECRECOVER\n\n  * @dev - _hashToCurve recursively hashes until it finds a curve x-ordinate. On\n  * @dev   the EVM, this is slightly more efficient than the recommendation in\n  * @dev   https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.4.1.1\n  * @dev   step 5, to concatenate with a nonce then hash, and rehash with the\n  * @dev   nonce updated until a valid x-ordinate is found.\n\n  * @dev - _hashToCurve does not include a cipher version string or the byte 0x1\n  * @dev   in the hash message, as recommended in step 5.B of the draft\n  * @dev   standard. They are unnecessary here because no variation in the\n  * @dev   cipher suite is allowed.\n\n  * @dev - Similarly, the hash input in _scalarFromCurvePoints does not include a\n  * @dev   commitment to the cipher suite, either, which differs from step 2 of\n  * @dev   https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.4.3\n  * @dev   . Also, the hash input is the concatenation of the uncompressed\n  * @dev   points, not the compressed points as recommended in step 3.\n\n  * @dev - In the calculation of the challenge value \"c\", the \"u\" value (i.e.\n  * @dev   the value computed by Reggie as the nonce times the secp256k1\n  * @dev   generator point, see steps 5 and 7 of\n  * @dev   https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.3\n  * @dev   ) is replaced by its ethereum address, i.e. the lower 160 bits of the\n  * @dev   keccak hash of the original u. This is because we only verify the\n  * @dev   calculation of u up to its address, by abusing ECRECOVER.\n  * ****************************************************************************\n  * @dev   SECURITY PROPERTIES\n\n  * @dev Here are the security properties for this VRF:\n\n  * @dev Full uniqueness: For any seed and valid VRF public key, there is\n  * @dev   exactly one VRF output which can be proved to come from that seed, in\n  * @dev   the sense that the proof will pass _verifyVRFProof.\n\n  * @dev Full collision resistance: It's cryptographically infeasible to find\n  * @dev   two seeds with same VRF output from a fixed, valid VRF key\n\n  * @dev Full pseudorandomness: Absent the proofs that the VRF outputs are\n  * @dev   derived from a given seed, the outputs are computationally\n  * @dev   indistinguishable from randomness.\n\n  * @dev https://eprint.iacr.org/2017/099.pdf, Appendix B contains the proofs\n  * @dev for these properties.\n\n  * @dev For secp256k1, the key validation described in section\n  * @dev https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.6\n  * @dev is unnecessary, because secp256k1 has cofactor 1, and the\n  * @dev representation of the public key used here (affine x- and y-ordinates\n  * @dev of the secp256k1 point on the standard y^2=x^3+7 curve) cannot refer to\n  * @dev the point at infinity.\n  * ****************************************************************************\n  * @dev OTHER SECURITY CONSIDERATIONS\n  *\n  * @dev The seed input to the VRF could in principle force an arbitrary amount\n  * @dev of work in _hashToCurve, by requiring extra rounds of hashing and\n  * @dev checking whether that's yielded the x ordinate of a secp256k1 point.\n  * @dev However, under the Random Oracle Model the probability of choosing a\n  * @dev point which forces n extra rounds in _hashToCurve is 2⁻ⁿ. The base cost\n  * @dev for calling _hashToCurve is about 25,000 gas, and each round of checking\n  * @dev for a valid x ordinate costs about 15,555 gas, so to find a seed for\n  * @dev which _hashToCurve would cost more than 2,017,000 gas, one would have to\n  * @dev try, in expectation, about 2¹²⁸ seeds, which is infeasible for any\n  * @dev foreseeable computational resources. (25,000 + 128 * 15,555 < 2,017,000.)\n\n  * @dev Since the gas block limit for the Ethereum main net is 10,000,000 gas,\n  * @dev this means it is infeasible for an adversary to prevent correct\n  * @dev operation of this contract by choosing an adverse seed.\n\n  * @dev (See TestMeasureHashToCurveGasCost for verification of the gas cost for\n  * @dev _hashToCurve.)\n\n  * @dev It may be possible to make a secure constant-time _hashToCurve function.\n  * @dev See notes in _hashToCurve docstring.\n*/\ncontract VRF {\n  // See https://www.secg.org/sec2-v2.pdf, section 2.4.1, for these constants.\n  // Number of points in Secp256k1\n  uint256 private constant GROUP_ORDER = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141;\n  // Prime characteristic of the galois field over which Secp256k1 is defined\n  uint256 private constant FIELD_SIZE =\n    // solium-disable-next-line indentation\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F;\n  uint256 private constant WORD_LENGTH_BYTES = 0x20;\n\n  // (base^exponent) % FIELD_SIZE\n  // Cribbed from https://medium.com/@rbkhmrcr/precompiles-solidity-e5d29bd428c4\n  function _bigModExp(uint256 base, uint256 exponent) internal view returns (uint256 exponentiation) {\n    uint256 callResult;\n    uint256[6] memory bigModExpContractInputs;\n    bigModExpContractInputs[0] = WORD_LENGTH_BYTES; // Length of base\n    bigModExpContractInputs[1] = WORD_LENGTH_BYTES; // Length of exponent\n    bigModExpContractInputs[2] = WORD_LENGTH_BYTES; // Length of modulus\n    bigModExpContractInputs[3] = base;\n    bigModExpContractInputs[4] = exponent;\n    bigModExpContractInputs[5] = FIELD_SIZE;\n    uint256[1] memory output;\n    assembly {\n      callResult := staticcall(\n        not(0), // Gas cost: no limit\n        0x05, // Bigmodexp contract address\n        bigModExpContractInputs,\n        0xc0, // Length of input segment: 6*0x20-bytes\n        output,\n        0x20 // Length of output segment\n      )\n    }\n    if (callResult == 0) {\n      // solhint-disable-next-line gas-custom-errors\n      revert(\"bigModExp failure!\");\n    }\n    return output[0];\n  }\n\n  // Let q=FIELD_SIZE. q % 4 = 3, ∴ x≡r^2 mod q ⇒ x^SQRT_POWER≡±r mod q.  See\n  // https://en.wikipedia.org/wiki/Modular_square_root#Prime_or_prime_power_modulus\n  uint256 private constant SQRT_POWER = (FIELD_SIZE + 1) >> 2;\n\n  // Computes a s.t. a^2 = x in the field. Assumes a exists\n  function _squareRoot(uint256 x) internal view returns (uint256) {\n    return _bigModExp(x, SQRT_POWER);\n  }\n\n  // The value of y^2 given that (x,y) is on secp256k1.\n  function _ySquared(uint256 x) internal pure returns (uint256) {\n    // Curve is y^2=x^3+7. See section 2.4.1 of https://www.secg.org/sec2-v2.pdf\n    uint256 xCubed = mulmod(x, mulmod(x, x, FIELD_SIZE), FIELD_SIZE);\n    return addmod(xCubed, 7, FIELD_SIZE);\n  }\n\n  // True iff p is on secp256k1\n  function _isOnCurve(uint256[2] memory p) internal pure returns (bool) {\n    // Section 2.3.6. in https://www.secg.org/sec1-v2.pdf\n    // requires each ordinate to be in [0, ..., FIELD_SIZE-1]\n    // solhint-disable-next-line gas-custom-errors\n    require(p[0] < FIELD_SIZE, \"invalid x-ordinate\");\n    // solhint-disable-next-line gas-custom-errors\n    require(p[1] < FIELD_SIZE, \"invalid y-ordinate\");\n    return _ySquared(p[0]) == mulmod(p[1], p[1], FIELD_SIZE);\n  }\n\n  // Hash x uniformly into {0, ..., FIELD_SIZE-1}.\n  function _fieldHash(bytes memory b) internal pure returns (uint256 x_) {\n    x_ = uint256(keccak256(b));\n    // Rejecting if x >= FIELD_SIZE corresponds to step 2.1 in section 2.3.4 of\n    // http://www.secg.org/sec1-v2.pdf , which is part of the definition of\n    // string_to_point in the IETF draft\n    while (x_ >= FIELD_SIZE) {\n      x_ = uint256(keccak256(abi.encodePacked(x_)));\n    }\n    return x_;\n  }\n\n  // Hash b to a random point which hopefully lies on secp256k1. The y ordinate\n  // is always even, due to\n  // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.4.1.1\n  // step 5.C, which references arbitrary_string_to_point, defined in\n  // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.5 as\n  // returning the point with given x ordinate, and even y ordinate.\n  function _newCandidateSecp256k1Point(bytes memory b) internal view returns (uint256[2] memory p) {\n    unchecked {\n      p[0] = _fieldHash(b);\n      p[1] = _squareRoot(_ySquared(p[0]));\n      if (p[1] % 2 == 1) {\n        // Note that 0 <= p[1] < FIELD_SIZE\n        // so this cannot wrap, we use unchecked to save gas.\n        p[1] = FIELD_SIZE - p[1];\n      }\n    }\n    return p;\n  }\n\n  // Domain-separation tag for initial hash in _hashToCurve. Corresponds to\n  // vrf.go/hashToCurveHashPrefix\n  uint256 internal constant HASH_TO_CURVE_HASH_PREFIX = 1;\n\n  // Cryptographic hash function onto the curve.\n  //\n  // Corresponds to algorithm in section 5.4.1.1 of the draft standard. (But see\n  // DESIGN NOTES above for slight differences.)\n  //\n  // TODO(alx): Implement a bounded-computation hash-to-curve, as described in\n  // \"Construction of Rational Points on Elliptic Curves over Finite Fields\"\n  // http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.831.5299&rep=rep1&type=pdf\n  // and suggested by\n  // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-01#section-5.2.2\n  // (Though we can't used exactly that because secp256k1's j-invariant is 0.)\n  //\n  // This would greatly simplify the analysis in \"OTHER SECURITY CONSIDERATIONS\"\n  // https://www.pivotaltracker.com/story/show/171120900\n  function _hashToCurve(uint256[2] memory pk, uint256 input) internal view returns (uint256[2] memory rv) {\n    rv = _newCandidateSecp256k1Point(abi.encodePacked(HASH_TO_CURVE_HASH_PREFIX, pk, input));\n    while (!_isOnCurve(rv)) {\n      rv = _newCandidateSecp256k1Point(abi.encodePacked(rv[0]));\n    }\n    return rv;\n  }\n\n  /** *********************************************************************\n   * @notice Check that product==scalar*multiplicand\n   *\n   * @dev Based on Vitalik Buterin's idea in ethresear.ch post cited below.\n   *\n   * @param multiplicand: secp256k1 point\n   * @param scalar: non-zero GF(GROUP_ORDER) scalar\n   * @param product: secp256k1 expected to be multiplier * multiplicand\n   * @return verifies true iff product==scalar*multiplicand, with cryptographically high probability\n   */\n  function _ecmulVerify(\n    uint256[2] memory multiplicand,\n    uint256 scalar,\n    uint256[2] memory product\n  ) internal pure returns (bool verifies) {\n    // solhint-disable-next-line gas-custom-errors\n    require(scalar != 0, \"zero scalar\"); // Rules out an ecrecover failure case\n    uint256 x = multiplicand[0]; // x ordinate of multiplicand\n    uint8 v = multiplicand[1] % 2 == 0 ? 27 : 28; // parity of y ordinate\n    // https://ethresear.ch/t/you-can-kinda-abuse-ecrecover-to-do-ecmul-in-secp256k1-today/2384/9\n    // Point corresponding to address ecrecover(0, v, x, s=scalar*x) is\n    // (x⁻¹ mod GROUP_ORDER) * (scalar * x * multiplicand - 0 * g), i.e.\n    // scalar*multiplicand. See https://crypto.stackexchange.com/a/18106\n    bytes32 scalarTimesX = bytes32(mulmod(scalar, x, GROUP_ORDER));\n    address actual = ecrecover(bytes32(0), v, bytes32(x), scalarTimesX);\n    // Explicit conversion to address takes bottom 160 bits\n    address expected = address(uint160(uint256(keccak256(abi.encodePacked(product)))));\n    return (actual == expected);\n  }\n\n  // Returns x1/z1-x2/z2=(x1z2-x2z1)/(z1z2) in projective coordinates on P¹(𝔽ₙ)\n  function _projectiveSub(\n    uint256 x1,\n    uint256 z1,\n    uint256 x2,\n    uint256 z2\n  ) internal pure returns (uint256 x3, uint256 z3) {\n    unchecked {\n      uint256 num1 = mulmod(z2, x1, FIELD_SIZE);\n      // Note this cannot wrap since x2 is a point in [0, FIELD_SIZE-1]\n      // we use unchecked to save gas.\n      uint256 num2 = mulmod(FIELD_SIZE - x2, z1, FIELD_SIZE);\n      (x3, z3) = (addmod(num1, num2, FIELD_SIZE), mulmod(z1, z2, FIELD_SIZE));\n    }\n    return (x3, z3);\n  }\n\n  // Returns x1/z1*x2/z2=(x1x2)/(z1z2), in projective coordinates on P¹(𝔽ₙ)\n  function _projectiveMul(\n    uint256 x1,\n    uint256 z1,\n    uint256 x2,\n    uint256 z2\n  ) internal pure returns (uint256 x3, uint256 z3) {\n    (x3, z3) = (mulmod(x1, x2, FIELD_SIZE), mulmod(z1, z2, FIELD_SIZE));\n    return (x3, z3);\n  }\n\n  /** **************************************************************************\n        @notice Computes elliptic-curve sum, in projective co-ordinates\n\n        @dev Using projective coordinates avoids costly divisions\n\n        @dev To use this with p and q in affine coordinates, call\n        @dev _projectiveECAdd(px, py, qx, qy). This will return\n        @dev the addition of (px, py, 1) and (qx, qy, 1), in the\n        @dev secp256k1 group.\n\n        @dev This can be used to calculate the z which is the inverse to zInv\n        @dev in isValidVRFOutput. But consider using a faster\n        @dev re-implementation such as ProjectiveECAdd in the golang vrf package.\n\n        @dev This function assumes [px,py,1],[qx,qy,1] are valid projective\n             coordinates of secp256k1 points. That is safe in this contract,\n             because this method is only used by _linearCombination, which checks\n             points are on the curve via ecrecover.\n        **************************************************************************\n        @param px The first affine coordinate of the first summand\n        @param py The second affine coordinate of the first summand\n        @param qx The first affine coordinate of the second summand\n        @param qy The second affine coordinate of the second summand\n\n        (px,py) and (qx,qy) must be distinct, valid secp256k1 points.\n        **************************************************************************\n        Return values are projective coordinates of [px,py,1]+[qx,qy,1] as points\n        on secp256k1, in P²(𝔽ₙ)\n        @return sx\n        @return sy\n        @return sz\n    */\n  function _projectiveECAdd(\n    uint256 px,\n    uint256 py,\n    uint256 qx,\n    uint256 qy\n  ) internal pure returns (uint256 sx, uint256 sy, uint256 sz) {\n    unchecked {\n      // See \"Group law for E/K : y^2 = x^3 + ax + b\", in section 3.1.2, p. 80,\n      // \"Guide to Elliptic Curve Cryptography\" by Hankerson, Menezes and Vanstone\n      // We take the equations there for (sx,sy), and homogenize them to\n      // projective coordinates. That way, no inverses are required, here, and we\n      // only need the one inverse in _affineECAdd.\n\n      // We only need the \"point addition\" equations from Hankerson et al. Can\n      // skip the \"point doubling\" equations because p1 == p2 is cryptographically\n      // impossible, and required not to be the case in _linearCombination.\n\n      // Add extra \"projective coordinate\" to the two points\n      (uint256 z1, uint256 z2) = (1, 1);\n\n      // (lx, lz) = (qy-py)/(qx-px), i.e., gradient of secant line.\n      // Cannot wrap since px and py are in [0, FIELD_SIZE-1]\n      uint256 lx = addmod(qy, FIELD_SIZE - py, FIELD_SIZE);\n      uint256 lz = addmod(qx, FIELD_SIZE - px, FIELD_SIZE);\n\n      uint256 dx; // Accumulates denominator from sx calculation\n      // sx=((qy-py)/(qx-px))^2-px-qx\n      (sx, dx) = _projectiveMul(lx, lz, lx, lz); // ((qy-py)/(qx-px))^2\n      (sx, dx) = _projectiveSub(sx, dx, px, z1); // ((qy-py)/(qx-px))^2-px\n      (sx, dx) = _projectiveSub(sx, dx, qx, z2); // ((qy-py)/(qx-px))^2-px-qx\n\n      uint256 dy; // Accumulates denominator from sy calculation\n      // sy=((qy-py)/(qx-px))(px-sx)-py\n      (sy, dy) = _projectiveSub(px, z1, sx, dx); // px-sx\n      (sy, dy) = _projectiveMul(sy, dy, lx, lz); // ((qy-py)/(qx-px))(px-sx)\n      (sy, dy) = _projectiveSub(sy, dy, py, z1); // ((qy-py)/(qx-px))(px-sx)-py\n\n      if (dx != dy) {\n        // Cross-multiply to put everything over a common denominator\n        sx = mulmod(sx, dy, FIELD_SIZE);\n        sy = mulmod(sy, dx, FIELD_SIZE);\n        sz = mulmod(dx, dy, FIELD_SIZE);\n      } else {\n        // Already over a common denominator, use that for z ordinate\n        sz = dx;\n      }\n    }\n    return (sx, sy, sz);\n  }\n\n  // p1+p2, as affine points on secp256k1.\n  //\n  // invZ must be the inverse of the z returned by _projectiveECAdd(p1, p2).\n  // It is computed off-chain to save gas.\n  //\n  // p1 and p2 must be distinct, because _projectiveECAdd doesn't handle\n  // point doubling.\n  function _affineECAdd(\n    uint256[2] memory p1,\n    uint256[2] memory p2,\n    uint256 invZ\n  ) internal pure returns (uint256[2] memory) {\n    uint256 x;\n    uint256 y;\n    uint256 z;\n    (x, y, z) = _projectiveECAdd(p1[0], p1[1], p2[0], p2[1]);\n    // solhint-disable-next-line gas-custom-errors\n    require(mulmod(z, invZ, FIELD_SIZE) == 1, \"invZ must be inverse of z\");\n    // Clear the z ordinate of the projective representation by dividing through\n    // by it, to obtain the affine representation\n    return [mulmod(x, invZ, FIELD_SIZE), mulmod(y, invZ, FIELD_SIZE)];\n  }\n\n  // True iff address(c*p+s*g) == lcWitness, where g is generator. (With\n  // cryptographically high probability.)\n  function _verifyLinearCombinationWithGenerator(\n    uint256 c,\n    uint256[2] memory p,\n    uint256 s,\n    address lcWitness\n  ) internal pure returns (bool) {\n    // Rule out ecrecover failure modes which return address 0.\n    unchecked {\n      // solhint-disable-next-line gas-custom-errors\n      require(lcWitness != address(0), \"bad witness\");\n      uint8 v = (p[1] % 2 == 0) ? 27 : 28; // parity of y-ordinate of p\n      // Note this cannot wrap (X - Y % X), but we use unchecked to save\n      // gas.\n      bytes32 pseudoHash = bytes32(GROUP_ORDER - mulmod(p[0], s, GROUP_ORDER)); // -s*p[0]\n      bytes32 pseudoSignature = bytes32(mulmod(c, p[0], GROUP_ORDER)); // c*p[0]\n      // https://ethresear.ch/t/you-can-kinda-abuse-ecrecover-to-do-ecmul-in-secp256k1-today/2384/9\n      // The point corresponding to the address returned by\n      // ecrecover(-s*p[0],v,p[0],c*p[0]) is\n      // (p[0]⁻¹ mod GROUP_ORDER)*(c*p[0]-(-s)*p[0]*g)=c*p+s*g.\n      // See https://crypto.stackexchange.com/a/18106\n      // https://bitcoin.stackexchange.com/questions/38351/ecdsa-v-r-s-what-is-v\n      address computed = ecrecover(pseudoHash, v, bytes32(p[0]), pseudoSignature);\n      return computed == lcWitness;\n    }\n  }\n\n  // c*p1 + s*p2. Requires cp1Witness=c*p1 and sp2Witness=s*p2. Also\n  // requires cp1Witness != sp2Witness (which is fine for this application,\n  // since it is cryptographically impossible for them to be equal. In the\n  // (cryptographically impossible) case that a prover accidentally derives\n  // a proof with equal c*p1 and s*p2, they should retry with a different\n  // proof nonce.) Assumes that all points are on secp256k1\n  // (which is checked in _verifyVRFProof below.)\n  function _linearCombination(\n    uint256 c,\n    uint256[2] memory p1,\n    uint256[2] memory cp1Witness,\n    uint256 s,\n    uint256[2] memory p2,\n    uint256[2] memory sp2Witness,\n    uint256 zInv\n  ) internal pure returns (uint256[2] memory) {\n    unchecked {\n      // Note we are relying on the wrap around here\n      // solhint-disable-next-line gas-custom-errors\n      require((cp1Witness[0] % FIELD_SIZE) != (sp2Witness[0] % FIELD_SIZE), \"points in sum must be distinct\");\n      // solhint-disable-next-line gas-custom-errors\n      require(_ecmulVerify(p1, c, cp1Witness), \"First mul check failed\");\n      // solhint-disable-next-line gas-custom-errors\n      require(_ecmulVerify(p2, s, sp2Witness), \"Second mul check failed\");\n      return _affineECAdd(cp1Witness, sp2Witness, zInv);\n    }\n  }\n\n  // Domain-separation tag for the hash taken in _scalarFromCurvePoints.\n  // Corresponds to scalarFromCurveHashPrefix in vrf.go\n  uint256 internal constant SCALAR_FROM_CURVE_POINTS_HASH_PREFIX = 2;\n\n  // Pseudo-random number from inputs. Matches vrf.go/_scalarFromCurvePoints, and\n  // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.4.3\n  // The draft calls (in step 7, via the definition of string_to_int, in\n  // https://datatracker.ietf.org/doc/html/rfc8017#section-4.2 ) for taking the\n  // first hash without checking that it corresponds to a number less than the\n  // group order, which will lead to a slight bias in the sample.\n  //\n  // TODO(alx): We could save a bit of gas by following the standard here and\n  // using the compressed representation of the points, if we collated the y\n  // parities into a single bytes32.\n  // https://www.pivotaltracker.com/story/show/171120588\n  function _scalarFromCurvePoints(\n    uint256[2] memory hash,\n    uint256[2] memory pk,\n    uint256[2] memory gamma,\n    address uWitness,\n    uint256[2] memory v\n  ) internal pure returns (uint256 s) {\n    return uint256(keccak256(abi.encodePacked(SCALAR_FROM_CURVE_POINTS_HASH_PREFIX, hash, pk, gamma, v, uWitness)));\n  }\n\n  // True if (gamma, c, s) is a correctly constructed randomness proof from pk\n  // and seed. zInv must be the inverse of the third ordinate from\n  // _projectiveECAdd applied to cGammaWitness and sHashWitness. Corresponds to\n  // section 5.3 of the IETF draft.\n  //\n  // TODO(alx): Since I'm only using pk in the ecrecover call, I could only pass\n  // the x ordinate, and the parity of the y ordinate in the top bit of uWitness\n  // (which I could make a uint256 without using any extra space.) Would save\n  // about 2000 gas. https://www.pivotaltracker.com/story/show/170828567\n  function _verifyVRFProof(\n    uint256[2] memory pk,\n    uint256[2] memory gamma,\n    uint256 c,\n    uint256 s,\n    uint256 seed,\n    address uWitness,\n    uint256[2] memory cGammaWitness,\n    uint256[2] memory sHashWitness,\n    uint256 zInv\n  ) internal view {\n    unchecked {\n      // solhint-disable-next-line gas-custom-errors\n      require(_isOnCurve(pk), \"public key is not on curve\");\n      // solhint-disable-next-line gas-custom-errors\n      require(_isOnCurve(gamma), \"gamma is not on curve\");\n      // solhint-disable-next-line gas-custom-errors\n      require(_isOnCurve(cGammaWitness), \"cGammaWitness is not on curve\");\n      // solhint-disable-next-line gas-custom-errors\n      require(_isOnCurve(sHashWitness), \"sHashWitness is not on curve\");\n      // Step 5. of IETF draft section 5.3 (pk corresponds to 5.3's Y, and here\n      // we use the address of u instead of u itself. Also, here we add the\n      // terms instead of taking the difference, and in the proof construction in\n      // vrf.GenerateProof, we correspondingly take the difference instead of\n      // taking the sum as they do in step 7 of section 5.1.)\n      // solhint-disable-next-line gas-custom-errors\n      require(_verifyLinearCombinationWithGenerator(c, pk, s, uWitness), \"addr(c*pk+s*g)!=_uWitness\");\n      // Step 4. of IETF draft section 5.3 (pk corresponds to Y, seed to alpha_string)\n      uint256[2] memory hash = _hashToCurve(pk, seed);\n      // Step 6. of IETF draft section 5.3, but see note for step 5 about +/- terms\n      uint256[2] memory v = _linearCombination(c, gamma, cGammaWitness, s, hash, sHashWitness, zInv);\n      // Steps 7. and 8. of IETF draft section 5.3\n      uint256 derivedC = _scalarFromCurvePoints(hash, pk, gamma, uWitness, v);\n      // solhint-disable-next-line gas-custom-errors\n      require(c == derivedC, \"invalid proof\");\n    }\n  }\n\n  // Domain-separation tag for the hash used as the final VRF output.\n  // Corresponds to vrfRandomOutputHashPrefix in vrf.go\n  uint256 internal constant VRF_RANDOM_OUTPUT_HASH_PREFIX = 3;\n\n  struct Proof {\n    uint256[2] pk;\n    uint256[2] gamma;\n    uint256 c;\n    uint256 s;\n    uint256 seed;\n    address uWitness;\n    uint256[2] cGammaWitness;\n    uint256[2] sHashWitness;\n    uint256 zInv;\n  }\n\n  /* ***************************************************************************\n     * @notice Returns proof's output, if proof is valid. Otherwise reverts\n\n     * @param proof vrf proof components\n     * @param seed  seed used to generate the vrf output\n     *\n     * Throws if proof is invalid, otherwise:\n     * @return output i.e., the random output implied by the proof\n     * ***************************************************************************\n     */\n  function _randomValueFromVRFProof(Proof memory proof, uint256 seed) internal view returns (uint256 output) {\n    _verifyVRFProof(\n      proof.pk,\n      proof.gamma,\n      proof.c,\n      proof.s,\n      seed,\n      proof.uWitness,\n      proof.cGammaWitness,\n      proof.sHashWitness,\n      proof.zInv\n    );\n    output = uint256(keccak256(abi.encode(VRF_RANDOM_OUTPUT_HASH_PREFIX, proof.gamma)));\n    return output;\n  }\n}\n"},"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"}},"settings":{"evmVersion":"paris","optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol","exportedSymbols":{"AutomationCompatibleInterface":[18]},"id":19,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:0"},{"abstract":false,"baseContracts":[],"canonicalName":"AutomationCompatibleInterface","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":18,"linearizedBaseContracts":[18],"name":"AutomationCompatibleInterface","nameLocation":"67:29:0","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2,"nodeType":"StructuredDocumentation","src":"101:985:0","text":" @notice method that is simulated by the keepers to see if any work actually\n needs to be performed. This method does does not actually need to be\n executable, and since it is only ever simulated it can consume lots of gas.\n @dev To ensure that it is never called, you may want to add the\n cannotExecute modifier from KeeperBase to your implementation of this\n method.\n @param checkData specified in the upkeep registration so it is always the\n same for a registered upkeep. This can easily be broken down into specific\n arguments using `abi.decode`, so multiple upkeeps can be registered on the\n same contract and easily differentiated by the contract.\n @return upkeepNeeded boolean to indicate whether the keeper should call\n performUpkeep or not.\n @return performData bytes that the keeper should call performUpkeep with, if\n upkeep is needed. If you would like to encode data to decode later, try\n `abi.encode`."},"functionSelector":"6e04ff0d","id":11,"implemented":false,"kind":"function","modifiers":[],"name":"checkUpkeep","nameLocation":"1098:11:0","nodeType":"FunctionDefinition","parameters":{"id":5,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4,"mutability":"mutable","name":"checkData","nameLocation":"1125:9:0","nodeType":"VariableDeclaration","scope":11,"src":"1110:24:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3,"name":"bytes","nodeType":"ElementaryTypeName","src":"1110:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1109:26:0"},"returnParameters":{"id":10,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7,"mutability":"mutable","name":"upkeepNeeded","nameLocation":"1159:12:0","nodeType":"VariableDeclaration","scope":11,"src":"1154:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6,"name":"bool","nodeType":"ElementaryTypeName","src":"1154:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":9,"mutability":"mutable","name":"performData","nameLocation":"1186:11:0","nodeType":"VariableDeclaration","scope":11,"src":"1173:24:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":8,"name":"bytes","nodeType":"ElementaryTypeName","src":"1173:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1153:45:0"},"scope":18,"src":"1089:110:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":12,"nodeType":"StructuredDocumentation","src":"1203:1003:0","text":" @notice method that is actually executed by the keepers, via the registry.\n The data returned by the checkUpkeep simulation will be passed into\n this method to actually be executed.\n @dev The input to this method should not be trusted, and the caller of the\n method should not even be restricted to any single registry. Anyone should\n be able call it, and the input should be validated, there is no guarantee\n that the data passed in is the performData returned from checkUpkeep. This\n could happen due to malicious keepers, racing keepers, or simply a state\n change while the performUpkeep transaction is waiting for confirmation.\n Always validate the data passed in.\n @param performData is the data which was passed back from the checkData\n simulation. If it is encoded, it can easily be decoded into other types by\n calling `abi.decode`. This data should not be trusted, and should be\n validated against the contract's current state."},"functionSelector":"4585e33b","id":17,"implemented":false,"kind":"function","modifiers":[],"name":"performUpkeep","nameLocation":"2218:13:0","nodeType":"FunctionDefinition","parameters":{"id":15,"nodeType":"ParameterList","parameters":[{"constant":false,"id":14,"mutability":"mutable","name":"performData","nameLocation":"2247:11:0","nodeType":"VariableDeclaration","scope":17,"src":"2232:26:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":13,"name":"bytes","nodeType":"ElementaryTypeName","src":"2232:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2231:28:0"},"returnParameters":{"id":16,"nodeType":"ParameterList","parameters":[],"src":"2268:0:0"},"scope":18,"src":"2209:60:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":19,"src":"57:2214:0","usedErrors":[],"usedEvents":[]}],"src":"32:2240:0"},"id":0},"@chainlink/contracts/src/v0.8/interfaces/TypeAndVersionInterface.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/TypeAndVersionInterface.sol","exportedSymbols":{"TypeAndVersionInterface":[26]},"id":27,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":20,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:1"},{"abstract":true,"baseContracts":[],"canonicalName":"TypeAndVersionInterface","contractDependencies":[],"contractKind":"contract","fullyImplemented":false,"id":26,"linearizedBaseContracts":[26],"name":"TypeAndVersionInterface","nameLocation":"75:23:1","nodeType":"ContractDefinition","nodes":[{"functionSelector":"181f5a77","id":25,"implemented":false,"kind":"function","modifiers":[],"name":"typeAndVersion","nameLocation":"112:14:1","nodeType":"FunctionDefinition","parameters":{"id":21,"nodeType":"ParameterList","parameters":[],"src":"126:2:1"},"returnParameters":{"id":24,"nodeType":"ParameterList","parameters":[{"constant":false,"id":23,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":25,"src":"160:13:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":22,"name":"string","nodeType":"ElementaryTypeName","src":"160:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"159:15:1"},"scope":26,"src":"103:72:1","stateMutability":"pure","virtual":true,"visibility":"external"}],"scope":27,"src":"57:120:1","usedErrors":[],"usedEvents":[]}],"src":"32:146:1"},"id":1},"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol","exportedSymbols":{"ConfirmedOwner":[47],"ConfirmedOwnerWithProposal":[210]},"id":48,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":28,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:2"},{"absolutePath":"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol","file":"./ConfirmedOwnerWithProposal.sol","id":30,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":48,"sourceUnit":211,"src":"57:76:2","symbolAliases":[{"foreign":{"id":29,"name":"ConfirmedOwnerWithProposal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":210,"src":"65:26:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":32,"name":"ConfirmedOwnerWithProposal","nameLocations":["267:26:2"],"nodeType":"IdentifierPath","referencedDeclaration":210,"src":"267:26:2"},"id":33,"nodeType":"InheritanceSpecifier","src":"267:26:2"}],"canonicalName":"ConfirmedOwner","contractDependencies":[],"contractKind":"contract","documentation":{"id":31,"nodeType":"StructuredDocumentation","src":"135:105:2","text":"@title The ConfirmedOwner contract\n @notice A contract with helpers for basic contract ownership."},"fullyImplemented":true,"id":47,"linearizedBaseContracts":[47,210,284],"name":"ConfirmedOwner","nameLocation":"249:14:2","nodeType":"ContractDefinition","nodes":[{"body":{"id":45,"nodeType":"Block","src":"377:2:2","statements":[]},"id":46,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":38,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":35,"src":"355:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":41,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"373:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":40,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"365:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":39,"name":"address","nodeType":"ElementaryTypeName","src":"365:7:2","typeDescriptions":{}}},"id":42,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"365:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":43,"kind":"baseConstructorSpecifier","modifierName":{"id":37,"name":"ConfirmedOwnerWithProposal","nameLocations":["328:26:2"],"nodeType":"IdentifierPath","referencedDeclaration":210,"src":"328:26:2"},"nodeType":"ModifierInvocation","src":"328:48:2"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":36,"nodeType":"ParameterList","parameters":[{"constant":false,"id":35,"mutability":"mutable","name":"newOwner","nameLocation":"318:8:2","nodeType":"VariableDeclaration","scope":46,"src":"310:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":34,"name":"address","nodeType":"ElementaryTypeName","src":"310:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"309:18:2"},"returnParameters":{"id":44,"nodeType":"ParameterList","parameters":[],"src":"377:0:2"},"scope":47,"src":"298:81:2","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":48,"src":"240:141:2","usedErrors":[],"usedEvents":[64,70]}],"src":"32:350:2"},"id":2},"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol","exportedSymbols":{"ConfirmedOwnerWithProposal":[210],"IOwnable":[284]},"id":211,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":49,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:3"},{"absolutePath":"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol","file":"../interfaces/IOwnable.sol","id":51,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":211,"sourceUnit":285,"src":"57:52:3","symbolAliases":[{"foreign":{"id":50,"name":"IOwnable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":284,"src":"65:8:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":53,"name":"IOwnable","nameLocations":["255:8:3"],"nodeType":"IdentifierPath","referencedDeclaration":284,"src":"255:8:3"},"id":54,"nodeType":"InheritanceSpecifier","src":"255:8:3"}],"canonicalName":"ConfirmedOwnerWithProposal","contractDependencies":[],"contractKind":"contract","documentation":{"id":52,"nodeType":"StructuredDocumentation","src":"111:105:3","text":"@title The ConfirmedOwner contract\n @notice A contract with helpers for basic contract ownership."},"fullyImplemented":true,"id":210,"linearizedBaseContracts":[210,284],"name":"ConfirmedOwnerWithProposal","nameLocation":"225:26:3","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":56,"mutability":"mutable","name":"s_owner","nameLocation":"284:7:3","nodeType":"VariableDeclaration","scope":210,"src":"268:23:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":55,"name":"address","nodeType":"ElementaryTypeName","src":"268:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"constant":false,"id":58,"mutability":"mutable","name":"s_pendingOwner","nameLocation":"311:14:3","nodeType":"VariableDeclaration","scope":210,"src":"295:30:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":57,"name":"address","nodeType":"ElementaryTypeName","src":"295:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"eventSelector":"ed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278","id":64,"name":"OwnershipTransferRequested","nameLocation":"336:26:3","nodeType":"EventDefinition","parameters":{"id":63,"nodeType":"ParameterList","parameters":[{"constant":false,"id":60,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"379:4:3","nodeType":"VariableDeclaration","scope":64,"src":"363:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":59,"name":"address","nodeType":"ElementaryTypeName","src":"363:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":62,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"401:2:3","nodeType":"VariableDeclaration","scope":64,"src":"385:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":61,"name":"address","nodeType":"ElementaryTypeName","src":"385:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"362:42:3"},"src":"330:75:3"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":70,"name":"OwnershipTransferred","nameLocation":"414:20:3","nodeType":"EventDefinition","parameters":{"id":69,"nodeType":"ParameterList","parameters":[{"constant":false,"id":66,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"451:4:3","nodeType":"VariableDeclaration","scope":70,"src":"435:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":65,"name":"address","nodeType":"ElementaryTypeName","src":"435:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":68,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"473:2:3","nodeType":"VariableDeclaration","scope":70,"src":"457:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":67,"name":"address","nodeType":"ElementaryTypeName","src":"457:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"434:42:3"},"src":"408:69:3"},{"body":{"id":103,"nodeType":"Block","src":"533:230:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":83,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":78,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":72,"src":"598:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":81,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"618:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":80,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"610:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":79,"name":"address","nodeType":"ElementaryTypeName","src":"610:7:3","typeDescriptions":{}}},"id":82,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"610:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"598:22:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"43616e6e6f7420736574206f776e657220746f207a65726f","id":84,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"622:26:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2","typeString":"literal_string \"Cannot set owner to zero\""},"value":"Cannot set owner to zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2","typeString":"literal_string \"Cannot set owner to zero\""}],"id":77,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"590:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":85,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"590:59:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":86,"nodeType":"ExpressionStatement","src":"590:59:3"},{"expression":{"id":89,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":87,"name":"s_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":56,"src":"656:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":88,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":72,"src":"666:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"656:18:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":90,"nodeType":"ExpressionStatement","src":"656:18:3"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":96,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":91,"name":"pendingOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":74,"src":"684:12:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":94,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"708:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":93,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"700:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":92,"name":"address","nodeType":"ElementaryTypeName","src":"700:7:3","typeDescriptions":{}}},"id":95,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"700:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"684:26:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":102,"nodeType":"IfStatement","src":"680:79:3","trueBody":{"id":101,"nodeType":"Block","src":"712:47:3","statements":[{"expression":{"arguments":[{"id":98,"name":"pendingOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":74,"src":"739:12:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":97,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":188,"src":"720:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":99,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"720:32:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":100,"nodeType":"ExpressionStatement","src":"720:32:3"}]}}]},"id":104,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":75,"nodeType":"ParameterList","parameters":[{"constant":false,"id":72,"mutability":"mutable","name":"newOwner","nameLocation":"501:8:3","nodeType":"VariableDeclaration","scope":104,"src":"493:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":71,"name":"address","nodeType":"ElementaryTypeName","src":"493:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":74,"mutability":"mutable","name":"pendingOwner","nameLocation":"519:12:3","nodeType":"VariableDeclaration","scope":104,"src":"511:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":73,"name":"address","nodeType":"ElementaryTypeName","src":"511:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"492:40:3"},"returnParameters":{"id":76,"nodeType":"ParameterList","parameters":[],"src":"533:0:3"},"scope":210,"src":"481:282:3","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[280],"body":{"id":117,"nodeType":"Block","src":"912:33:3","statements":[{"expression":{"arguments":[{"id":114,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":107,"src":"937:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":113,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":188,"src":"918:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":115,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"918:22:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":116,"nodeType":"ExpressionStatement","src":"918:22:3"}]},"documentation":{"id":105,"nodeType":"StructuredDocumentation","src":"767:77:3","text":"@notice Allows an owner to begin transferring ownership to a new address."},"functionSelector":"f2fde38b","id":118,"implemented":true,"kind":"function","modifiers":[{"id":111,"kind":"modifierInvocation","modifierName":{"id":110,"name":"onlyOwner","nameLocations":["902:9:3"],"nodeType":"IdentifierPath","referencedDeclaration":209,"src":"902:9:3"},"nodeType":"ModifierInvocation","src":"902:9:3"}],"name":"transferOwnership","nameLocation":"856:17:3","nodeType":"FunctionDefinition","overrides":{"id":109,"nodeType":"OverrideSpecifier","overrides":[],"src":"893:8:3"},"parameters":{"id":108,"nodeType":"ParameterList","parameters":[{"constant":false,"id":107,"mutability":"mutable","name":"to","nameLocation":"882:2:3","nodeType":"VariableDeclaration","scope":118,"src":"874:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":106,"name":"address","nodeType":"ElementaryTypeName","src":"874:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"873:12:3"},"returnParameters":{"id":112,"nodeType":"ParameterList","parameters":[],"src":"912:0:3"},"scope":210,"src":"847:98:3","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[283],"body":{"id":153,"nodeType":"Block","src":"1071:271:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":124,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1136:3:3","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":125,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1140:6:3","memberName":"sender","nodeType":"MemberAccess","src":"1136:10:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":126,"name":"s_pendingOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":58,"src":"1150:14:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1136:28:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d7573742062652070726f706f736564206f776e6572","id":128,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1166:24:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c","typeString":"literal_string \"Must be proposed owner\""},"value":"Must be proposed owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c","typeString":"literal_string \"Must be proposed owner\""}],"id":123,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1128:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":129,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1128:63:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":130,"nodeType":"ExpressionStatement","src":"1128:63:3"},{"assignments":[132],"declarations":[{"constant":false,"id":132,"mutability":"mutable","name":"oldOwner","nameLocation":"1206:8:3","nodeType":"VariableDeclaration","scope":153,"src":"1198:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":131,"name":"address","nodeType":"ElementaryTypeName","src":"1198:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":134,"initialValue":{"id":133,"name":"s_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":56,"src":"1217:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1198:26:3"},{"expression":{"id":138,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":135,"name":"s_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":56,"src":"1230:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":136,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1240:3:3","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":137,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1244:6:3","memberName":"sender","nodeType":"MemberAccess","src":"1240:10:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1230:20:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":139,"nodeType":"ExpressionStatement","src":"1230:20:3"},{"expression":{"id":145,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":140,"name":"s_pendingOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":58,"src":"1256:14:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"30","id":143,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1281:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":142,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1273:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":141,"name":"address","nodeType":"ElementaryTypeName","src":"1273:7:3","typeDescriptions":{}}},"id":144,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1273:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1256:27:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":146,"nodeType":"ExpressionStatement","src":"1256:27:3"},{"eventCall":{"arguments":[{"id":148,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":132,"src":"1316:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":149,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1326:3:3","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":150,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1330:6:3","memberName":"sender","nodeType":"MemberAccess","src":"1326:10:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":147,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":70,"src":"1295:20:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":151,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1295:42:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":152,"nodeType":"EmitStatement","src":"1290:47:3"}]},"documentation":{"id":119,"nodeType":"StructuredDocumentation","src":"949:74:3","text":"@notice Allows an ownership transfer to be completed by the recipient."},"functionSelector":"79ba5097","id":154,"implemented":true,"kind":"function","modifiers":[],"name":"acceptOwnership","nameLocation":"1035:15:3","nodeType":"FunctionDefinition","overrides":{"id":121,"nodeType":"OverrideSpecifier","overrides":[],"src":"1062:8:3"},"parameters":{"id":120,"nodeType":"ParameterList","parameters":[],"src":"1050:2:3"},"returnParameters":{"id":122,"nodeType":"ParameterList","parameters":[],"src":"1071:0:3"},"scope":210,"src":"1026:316:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[275],"body":{"id":163,"nodeType":"Block","src":"1438:25:3","statements":[{"expression":{"id":161,"name":"s_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":56,"src":"1451:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":160,"id":162,"nodeType":"Return","src":"1444:14:3"}]},"documentation":{"id":155,"nodeType":"StructuredDocumentation","src":"1346:33:3","text":"@notice Get the current owner"},"functionSelector":"8da5cb5b","id":164,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1391:5:3","nodeType":"FunctionDefinition","overrides":{"id":157,"nodeType":"OverrideSpecifier","overrides":[],"src":"1411:8:3"},"parameters":{"id":156,"nodeType":"ParameterList","parameters":[],"src":"1396:2:3"},"returnParameters":{"id":160,"nodeType":"ParameterList","parameters":[{"constant":false,"id":159,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":164,"src":"1429:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":158,"name":"address","nodeType":"ElementaryTypeName","src":"1429:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1428:9:3"},"scope":210,"src":"1382:81:3","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":187,"nodeType":"Block","src":"1584:191:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":174,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":171,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":167,"src":"1649:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":172,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1655:3:3","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":173,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1659:6:3","memberName":"sender","nodeType":"MemberAccess","src":"1655:10:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1649:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"43616e6e6f74207472616e7366657220746f2073656c66","id":175,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1667:25:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2","typeString":"literal_string \"Cannot transfer to self\""},"value":"Cannot transfer to self"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2","typeString":"literal_string \"Cannot transfer to self\""}],"id":170,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1641:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":176,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1641:52:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":177,"nodeType":"ExpressionStatement","src":"1641:52:3"},{"expression":{"id":180,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":178,"name":"s_pendingOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":58,"src":"1700:14:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":179,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":167,"src":"1717:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1700:19:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":181,"nodeType":"ExpressionStatement","src":"1700:19:3"},{"eventCall":{"arguments":[{"id":183,"name":"s_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":56,"src":"1758:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":184,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":167,"src":"1767:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":182,"name":"OwnershipTransferRequested","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":64,"src":"1731:26:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":185,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1731:39:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":186,"nodeType":"EmitStatement","src":"1726:44:3"}]},"documentation":{"id":165,"nodeType":"StructuredDocumentation","src":"1467:66:3","text":"@notice validate, transfer ownership, and emit relevant events"},"id":188,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"1545:18:3","nodeType":"FunctionDefinition","parameters":{"id":168,"nodeType":"ParameterList","parameters":[{"constant":false,"id":167,"mutability":"mutable","name":"to","nameLocation":"1572:2:3","nodeType":"VariableDeclaration","scope":188,"src":"1564:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":166,"name":"address","nodeType":"ElementaryTypeName","src":"1564:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1563:12:3"},"returnParameters":{"id":169,"nodeType":"ParameterList","parameters":[],"src":"1584:0:3"},"scope":210,"src":"1536:239:3","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":200,"nodeType":"Block","src":"1853:118:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":196,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":193,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1918:3:3","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":194,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1922:6:3","memberName":"sender","nodeType":"MemberAccess","src":"1918:10:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":195,"name":"s_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":56,"src":"1932:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1918:21:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f6e6c792063616c6c61626c65206279206f776e6572","id":197,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1941:24:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3","typeString":"literal_string \"Only callable by owner\""},"value":"Only callable by owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3","typeString":"literal_string \"Only callable by owner\""}],"id":192,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1910:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":198,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1910:56:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":199,"nodeType":"ExpressionStatement","src":"1910:56:3"}]},"documentation":{"id":189,"nodeType":"StructuredDocumentation","src":"1779:27:3","text":"@notice validate access"},"id":201,"implemented":true,"kind":"function","modifiers":[],"name":"_validateOwnership","nameLocation":"1818:18:3","nodeType":"FunctionDefinition","parameters":{"id":190,"nodeType":"ParameterList","parameters":[],"src":"1836:2:3"},"returnParameters":{"id":191,"nodeType":"ParameterList","parameters":[],"src":"1853:0:3"},"scope":210,"src":"1809:162:3","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":208,"nodeType":"Block","src":"2069:38:3","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":204,"name":"_validateOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":201,"src":"2075:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":205,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2075:20:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":206,"nodeType":"ExpressionStatement","src":"2075:20:3"},{"id":207,"nodeType":"PlaceholderStatement","src":"2101:1:3"}]},"documentation":{"id":202,"nodeType":"StructuredDocumentation","src":"1975:70:3","text":"@notice Reverts if called by anyone other than the contract owner."},"id":209,"name":"onlyOwner","nameLocation":"2057:9:3","nodeType":"ModifierDefinition","parameters":{"id":203,"nodeType":"ParameterList","parameters":[],"src":"2066:2:3"},"src":"2048:59:3","virtual":false,"visibility":"internal"}],"scope":211,"src":"216:1893:3","usedErrors":[],"usedEvents":[64,70]}],"src":"32:2078:3"},"id":3},"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol","exportedSymbols":{"AggregatorV3Interface":[256]},"id":257,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":212,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:4"},{"abstract":false,"baseContracts":[],"canonicalName":"AggregatorV3Interface","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":256,"linearizedBaseContracts":[256],"name":"AggregatorV3Interface","nameLocation":"67:21:4","nodeType":"ContractDefinition","nodes":[{"functionSelector":"313ce567","id":217,"implemented":false,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"102:8:4","nodeType":"FunctionDefinition","parameters":{"id":213,"nodeType":"ParameterList","parameters":[],"src":"110:2:4"},"returnParameters":{"id":216,"nodeType":"ParameterList","parameters":[{"constant":false,"id":215,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":217,"src":"136:5:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":214,"name":"uint8","nodeType":"ElementaryTypeName","src":"136:5:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"135:7:4"},"scope":256,"src":"93:50:4","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"7284e416","id":222,"implemented":false,"kind":"function","modifiers":[],"name":"description","nameLocation":"156:11:4","nodeType":"FunctionDefinition","parameters":{"id":218,"nodeType":"ParameterList","parameters":[],"src":"167:2:4"},"returnParameters":{"id":221,"nodeType":"ParameterList","parameters":[{"constant":false,"id":220,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":222,"src":"193:13:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":219,"name":"string","nodeType":"ElementaryTypeName","src":"193:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"192:15:4"},"scope":256,"src":"147:61:4","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"54fd4d50","id":227,"implemented":false,"kind":"function","modifiers":[],"name":"version","nameLocation":"221:7:4","nodeType":"FunctionDefinition","parameters":{"id":223,"nodeType":"ParameterList","parameters":[],"src":"228:2:4"},"returnParameters":{"id":226,"nodeType":"ParameterList","parameters":[{"constant":false,"id":225,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":227,"src":"254:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":224,"name":"uint256","nodeType":"ElementaryTypeName","src":"254:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"253:9:4"},"scope":256,"src":"212:51:4","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"9a6fc8f5","id":242,"implemented":false,"kind":"function","modifiers":[],"name":"getRoundData","nameLocation":"276:12:4","nodeType":"FunctionDefinition","parameters":{"id":230,"nodeType":"ParameterList","parameters":[{"constant":false,"id":229,"mutability":"mutable","name":"_roundId","nameLocation":"301:8:4","nodeType":"VariableDeclaration","scope":242,"src":"294:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"},"typeName":{"id":228,"name":"uint80","nodeType":"ElementaryTypeName","src":"294:6:4","typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"}},"visibility":"internal"}],"src":"288:25:4"},"returnParameters":{"id":241,"nodeType":"ParameterList","parameters":[{"constant":false,"id":232,"mutability":"mutable","name":"roundId","nameLocation":"344:7:4","nodeType":"VariableDeclaration","scope":242,"src":"337:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"},"typeName":{"id":231,"name":"uint80","nodeType":"ElementaryTypeName","src":"337:6:4","typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"}},"visibility":"internal"},{"constant":false,"id":234,"mutability":"mutable","name":"answer","nameLocation":"360:6:4","nodeType":"VariableDeclaration","scope":242,"src":"353:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":233,"name":"int256","nodeType":"ElementaryTypeName","src":"353:6:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":236,"mutability":"mutable","name":"startedAt","nameLocation":"376:9:4","nodeType":"VariableDeclaration","scope":242,"src":"368:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":235,"name":"uint256","nodeType":"ElementaryTypeName","src":"368:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":238,"mutability":"mutable","name":"updatedAt","nameLocation":"395:9:4","nodeType":"VariableDeclaration","scope":242,"src":"387:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":237,"name":"uint256","nodeType":"ElementaryTypeName","src":"387:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":240,"mutability":"mutable","name":"answeredInRound","nameLocation":"413:15:4","nodeType":"VariableDeclaration","scope":242,"src":"406:22:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"},"typeName":{"id":239,"name":"uint80","nodeType":"ElementaryTypeName","src":"406:6:4","typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"}},"visibility":"internal"}],"src":"336:93:4"},"scope":256,"src":"267:163:4","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"feaf968c","id":255,"implemented":false,"kind":"function","modifiers":[],"name":"latestRoundData","nameLocation":"443:15:4","nodeType":"FunctionDefinition","parameters":{"id":243,"nodeType":"ParameterList","parameters":[],"src":"458:2:4"},"returnParameters":{"id":254,"nodeType":"ParameterList","parameters":[{"constant":false,"id":245,"mutability":"mutable","name":"roundId","nameLocation":"503:7:4","nodeType":"VariableDeclaration","scope":255,"src":"496:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"},"typeName":{"id":244,"name":"uint80","nodeType":"ElementaryTypeName","src":"496:6:4","typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"}},"visibility":"internal"},{"constant":false,"id":247,"mutability":"mutable","name":"answer","nameLocation":"519:6:4","nodeType":"VariableDeclaration","scope":255,"src":"512:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":246,"name":"int256","nodeType":"ElementaryTypeName","src":"512:6:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":249,"mutability":"mutable","name":"startedAt","nameLocation":"535:9:4","nodeType":"VariableDeclaration","scope":255,"src":"527:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":248,"name":"uint256","nodeType":"ElementaryTypeName","src":"527:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":251,"mutability":"mutable","name":"updatedAt","nameLocation":"554:9:4","nodeType":"VariableDeclaration","scope":255,"src":"546:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":250,"name":"uint256","nodeType":"ElementaryTypeName","src":"546:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":253,"mutability":"mutable","name":"answeredInRound","nameLocation":"572:15:4","nodeType":"VariableDeclaration","scope":255,"src":"565:22:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"},"typeName":{"id":252,"name":"uint80","nodeType":"ElementaryTypeName","src":"565:6:4","typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"}},"visibility":"internal"}],"src":"495:93:4"},"scope":256,"src":"434:155:4","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":257,"src":"57:534:4","usedErrors":[],"usedEvents":[]}],"src":"32:560:4"},"id":4},"@chainlink/contracts/src/v0.8/shared/interfaces/IERC677Receiver.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/shared/interfaces/IERC677Receiver.sol","exportedSymbols":{"IERC677Receiver":[268]},"id":269,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":258,"literals":["solidity","^","0.8",".6"],"nodeType":"PragmaDirective","src":"32:23:5"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC677Receiver","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":268,"linearizedBaseContracts":[268],"name":"IERC677Receiver","nameLocation":"67:15:5","nodeType":"ContractDefinition","nodes":[{"functionSelector":"a4c0ed36","id":267,"implemented":false,"kind":"function","modifiers":[],"name":"onTokenTransfer","nameLocation":"96:15:5","nodeType":"FunctionDefinition","parameters":{"id":265,"nodeType":"ParameterList","parameters":[{"constant":false,"id":260,"mutability":"mutable","name":"sender","nameLocation":"120:6:5","nodeType":"VariableDeclaration","scope":267,"src":"112:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":259,"name":"address","nodeType":"ElementaryTypeName","src":"112:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":262,"mutability":"mutable","name":"amount","nameLocation":"136:6:5","nodeType":"VariableDeclaration","scope":267,"src":"128:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":261,"name":"uint256","nodeType":"ElementaryTypeName","src":"128:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":264,"mutability":"mutable","name":"data","nameLocation":"159:4:5","nodeType":"VariableDeclaration","scope":267,"src":"144:19:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":263,"name":"bytes","nodeType":"ElementaryTypeName","src":"144:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"111:53:5"},"returnParameters":{"id":266,"nodeType":"ParameterList","parameters":[],"src":"173:0:5"},"scope":268,"src":"87:87:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":269,"src":"57:119:5","usedErrors":[],"usedEvents":[]}],"src":"32:145:5"},"id":5},"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol","exportedSymbols":{"IOwnable":[284]},"id":285,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":270,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:6"},{"abstract":false,"baseContracts":[],"canonicalName":"IOwnable","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":284,"linearizedBaseContracts":[284],"name":"IOwnable","nameLocation":"67:8:6","nodeType":"ContractDefinition","nodes":[{"functionSelector":"8da5cb5b","id":275,"implemented":false,"kind":"function","modifiers":[],"name":"owner","nameLocation":"89:5:6","nodeType":"FunctionDefinition","parameters":{"id":271,"nodeType":"ParameterList","parameters":[],"src":"94:2:6"},"returnParameters":{"id":274,"nodeType":"ParameterList","parameters":[{"constant":false,"id":273,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":275,"src":"115:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":272,"name":"address","nodeType":"ElementaryTypeName","src":"115:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"114:9:6"},"scope":284,"src":"80:44:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"f2fde38b","id":280,"implemented":false,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"137:17:6","nodeType":"FunctionDefinition","parameters":{"id":278,"nodeType":"ParameterList","parameters":[{"constant":false,"id":277,"mutability":"mutable","name":"recipient","nameLocation":"163:9:6","nodeType":"VariableDeclaration","scope":280,"src":"155:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":276,"name":"address","nodeType":"ElementaryTypeName","src":"155:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"154:19:6"},"returnParameters":{"id":279,"nodeType":"ParameterList","parameters":[],"src":"182:0:6"},"scope":284,"src":"128:55:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"79ba5097","id":283,"implemented":false,"kind":"function","modifiers":[],"name":"acceptOwnership","nameLocation":"196:15:6","nodeType":"FunctionDefinition","parameters":{"id":281,"nodeType":"ParameterList","parameters":[],"src":"211:2:6"},"returnParameters":{"id":282,"nodeType":"ParameterList","parameters":[],"src":"222:0:6"},"scope":284,"src":"187:36:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":285,"src":"57:168:6","usedErrors":[],"usedEvents":[]}],"src":"32:194:6"},"id":6},"@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol","exportedSymbols":{"LinkTokenInterface":[379]},"id":380,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":286,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:7"},{"abstract":false,"baseContracts":[],"canonicalName":"LinkTokenInterface","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":379,"linearizedBaseContracts":[379],"name":"LinkTokenInterface","nameLocation":"67:18:7","nodeType":"ContractDefinition","nodes":[{"functionSelector":"dd62ed3e","id":295,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"99:9:7","nodeType":"FunctionDefinition","parameters":{"id":291,"nodeType":"ParameterList","parameters":[{"constant":false,"id":288,"mutability":"mutable","name":"owner","nameLocation":"117:5:7","nodeType":"VariableDeclaration","scope":295,"src":"109:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":287,"name":"address","nodeType":"ElementaryTypeName","src":"109:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":290,"mutability":"mutable","name":"spender","nameLocation":"132:7:7","nodeType":"VariableDeclaration","scope":295,"src":"124:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":289,"name":"address","nodeType":"ElementaryTypeName","src":"124:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"108:32:7"},"returnParameters":{"id":294,"nodeType":"ParameterList","parameters":[{"constant":false,"id":293,"mutability":"mutable","name":"remaining","nameLocation":"172:9:7","nodeType":"VariableDeclaration","scope":295,"src":"164:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":292,"name":"uint256","nodeType":"ElementaryTypeName","src":"164:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"163:19:7"},"scope":379,"src":"90:93:7","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"095ea7b3","id":304,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"196:7:7","nodeType":"FunctionDefinition","parameters":{"id":300,"nodeType":"ParameterList","parameters":[{"constant":false,"id":297,"mutability":"mutable","name":"spender","nameLocation":"212:7:7","nodeType":"VariableDeclaration","scope":304,"src":"204:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":296,"name":"address","nodeType":"ElementaryTypeName","src":"204:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":299,"mutability":"mutable","name":"value","nameLocation":"229:5:7","nodeType":"VariableDeclaration","scope":304,"src":"221:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":298,"name":"uint256","nodeType":"ElementaryTypeName","src":"221:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"203:32:7"},"returnParameters":{"id":303,"nodeType":"ParameterList","parameters":[{"constant":false,"id":302,"mutability":"mutable","name":"success","nameLocation":"259:7:7","nodeType":"VariableDeclaration","scope":304,"src":"254:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":301,"name":"bool","nodeType":"ElementaryTypeName","src":"254:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"253:14:7"},"scope":379,"src":"187:81:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"70a08231","id":311,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"281:9:7","nodeType":"FunctionDefinition","parameters":{"id":307,"nodeType":"ParameterList","parameters":[{"constant":false,"id":306,"mutability":"mutable","name":"owner","nameLocation":"299:5:7","nodeType":"VariableDeclaration","scope":311,"src":"291:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":305,"name":"address","nodeType":"ElementaryTypeName","src":"291:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"290:15:7"},"returnParameters":{"id":310,"nodeType":"ParameterList","parameters":[{"constant":false,"id":309,"mutability":"mutable","name":"balance","nameLocation":"337:7:7","nodeType":"VariableDeclaration","scope":311,"src":"329:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":308,"name":"uint256","nodeType":"ElementaryTypeName","src":"329:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"328:17:7"},"scope":379,"src":"272:74:7","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"313ce567","id":316,"implemented":false,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"359:8:7","nodeType":"FunctionDefinition","parameters":{"id":312,"nodeType":"ParameterList","parameters":[],"src":"367:2:7"},"returnParameters":{"id":315,"nodeType":"ParameterList","parameters":[{"constant":false,"id":314,"mutability":"mutable","name":"decimalPlaces","nameLocation":"399:13:7","nodeType":"VariableDeclaration","scope":316,"src":"393:19:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":313,"name":"uint8","nodeType":"ElementaryTypeName","src":"393:5:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"392:21:7"},"scope":379,"src":"350:64:7","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"66188463","id":325,"implemented":false,"kind":"function","modifiers":[],"name":"decreaseApproval","nameLocation":"427:16:7","nodeType":"FunctionDefinition","parameters":{"id":321,"nodeType":"ParameterList","parameters":[{"constant":false,"id":318,"mutability":"mutable","name":"spender","nameLocation":"452:7:7","nodeType":"VariableDeclaration","scope":325,"src":"444:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":317,"name":"address","nodeType":"ElementaryTypeName","src":"444:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":320,"mutability":"mutable","name":"addedValue","nameLocation":"469:10:7","nodeType":"VariableDeclaration","scope":325,"src":"461:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":319,"name":"uint256","nodeType":"ElementaryTypeName","src":"461:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"443:37:7"},"returnParameters":{"id":324,"nodeType":"ParameterList","parameters":[{"constant":false,"id":323,"mutability":"mutable","name":"success","nameLocation":"504:7:7","nodeType":"VariableDeclaration","scope":325,"src":"499:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":322,"name":"bool","nodeType":"ElementaryTypeName","src":"499:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"498:14:7"},"scope":379,"src":"418:95:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"d73dd623","id":332,"implemented":false,"kind":"function","modifiers":[],"name":"increaseApproval","nameLocation":"526:16:7","nodeType":"FunctionDefinition","parameters":{"id":330,"nodeType":"ParameterList","parameters":[{"constant":false,"id":327,"mutability":"mutable","name":"spender","nameLocation":"551:7:7","nodeType":"VariableDeclaration","scope":332,"src":"543:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":326,"name":"address","nodeType":"ElementaryTypeName","src":"543:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":329,"mutability":"mutable","name":"subtractedValue","nameLocation":"568:15:7","nodeType":"VariableDeclaration","scope":332,"src":"560:23:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":328,"name":"uint256","nodeType":"ElementaryTypeName","src":"560:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"542:42:7"},"returnParameters":{"id":331,"nodeType":"ParameterList","parameters":[],"src":"593:0:7"},"scope":379,"src":"517:77:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"06fdde03","id":337,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"607:4:7","nodeType":"FunctionDefinition","parameters":{"id":333,"nodeType":"ParameterList","parameters":[],"src":"611:2:7"},"returnParameters":{"id":336,"nodeType":"ParameterList","parameters":[{"constant":false,"id":335,"mutability":"mutable","name":"tokenName","nameLocation":"651:9:7","nodeType":"VariableDeclaration","scope":337,"src":"637:23:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":334,"name":"string","nodeType":"ElementaryTypeName","src":"637:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"636:25:7"},"scope":379,"src":"598:64:7","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"95d89b41","id":342,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"675:6:7","nodeType":"FunctionDefinition","parameters":{"id":338,"nodeType":"ParameterList","parameters":[],"src":"681:2:7"},"returnParameters":{"id":341,"nodeType":"ParameterList","parameters":[{"constant":false,"id":340,"mutability":"mutable","name":"tokenSymbol","nameLocation":"721:11:7","nodeType":"VariableDeclaration","scope":342,"src":"707:25:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":339,"name":"string","nodeType":"ElementaryTypeName","src":"707:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"706:27:7"},"scope":379,"src":"666:68:7","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"18160ddd","id":347,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"747:11:7","nodeType":"FunctionDefinition","parameters":{"id":343,"nodeType":"ParameterList","parameters":[],"src":"758:2:7"},"returnParameters":{"id":346,"nodeType":"ParameterList","parameters":[{"constant":false,"id":345,"mutability":"mutable","name":"totalTokensIssued","nameLocation":"792:17:7","nodeType":"VariableDeclaration","scope":347,"src":"784:25:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":344,"name":"uint256","nodeType":"ElementaryTypeName","src":"784:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"783:27:7"},"scope":379,"src":"738:73:7","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"a9059cbb","id":356,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"824:8:7","nodeType":"FunctionDefinition","parameters":{"id":352,"nodeType":"ParameterList","parameters":[{"constant":false,"id":349,"mutability":"mutable","name":"to","nameLocation":"841:2:7","nodeType":"VariableDeclaration","scope":356,"src":"833:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":348,"name":"address","nodeType":"ElementaryTypeName","src":"833:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":351,"mutability":"mutable","name":"value","nameLocation":"853:5:7","nodeType":"VariableDeclaration","scope":356,"src":"845:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":350,"name":"uint256","nodeType":"ElementaryTypeName","src":"845:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"832:27:7"},"returnParameters":{"id":355,"nodeType":"ParameterList","parameters":[{"constant":false,"id":354,"mutability":"mutable","name":"success","nameLocation":"883:7:7","nodeType":"VariableDeclaration","scope":356,"src":"878:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":353,"name":"bool","nodeType":"ElementaryTypeName","src":"878:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"877:14:7"},"scope":379,"src":"815:77:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"4000aea0","id":367,"implemented":false,"kind":"function","modifiers":[],"name":"transferAndCall","nameLocation":"905:15:7","nodeType":"FunctionDefinition","parameters":{"id":363,"nodeType":"ParameterList","parameters":[{"constant":false,"id":358,"mutability":"mutable","name":"to","nameLocation":"929:2:7","nodeType":"VariableDeclaration","scope":367,"src":"921:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":357,"name":"address","nodeType":"ElementaryTypeName","src":"921:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":360,"mutability":"mutable","name":"value","nameLocation":"941:5:7","nodeType":"VariableDeclaration","scope":367,"src":"933:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":359,"name":"uint256","nodeType":"ElementaryTypeName","src":"933:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":362,"mutability":"mutable","name":"data","nameLocation":"963:4:7","nodeType":"VariableDeclaration","scope":367,"src":"948:19:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":361,"name":"bytes","nodeType":"ElementaryTypeName","src":"948:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"920:48:7"},"returnParameters":{"id":366,"nodeType":"ParameterList","parameters":[{"constant":false,"id":365,"mutability":"mutable","name":"success","nameLocation":"992:7:7","nodeType":"VariableDeclaration","scope":367,"src":"987:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":364,"name":"bool","nodeType":"ElementaryTypeName","src":"987:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"986:14:7"},"scope":379,"src":"896:105:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"23b872dd","id":378,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"1014:12:7","nodeType":"FunctionDefinition","parameters":{"id":374,"nodeType":"ParameterList","parameters":[{"constant":false,"id":369,"mutability":"mutable","name":"from","nameLocation":"1035:4:7","nodeType":"VariableDeclaration","scope":378,"src":"1027:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":368,"name":"address","nodeType":"ElementaryTypeName","src":"1027:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":371,"mutability":"mutable","name":"to","nameLocation":"1049:2:7","nodeType":"VariableDeclaration","scope":378,"src":"1041:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":370,"name":"address","nodeType":"ElementaryTypeName","src":"1041:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":373,"mutability":"mutable","name":"value","nameLocation":"1061:5:7","nodeType":"VariableDeclaration","scope":378,"src":"1053:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":372,"name":"uint256","nodeType":"ElementaryTypeName","src":"1053:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1026:41:7"},"returnParameters":{"id":377,"nodeType":"ParameterList","parameters":[{"constant":false,"id":376,"mutability":"mutable","name":"success","nameLocation":"1091:7:7","nodeType":"VariableDeclaration","scope":378,"src":"1086:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":375,"name":"bool","nodeType":"ElementaryTypeName","src":"1086:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1085:14:7"},"scope":379,"src":"1005:95:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":380,"src":"57:1045:7","usedErrors":[],"usedEvents":[]}],"src":"32:1071:7"},"id":7},"@chainlink/contracts/src/v0.8/vendor/@arbitrum/nitro-contracts/src/precompiles/ArbGasInfo.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/vendor/@arbitrum/nitro-contracts/src/precompiles/ArbGasInfo.sol","exportedSymbols":{"ArbGasInfo":[563]},"id":564,"license":"BUSL-1.1","nodeType":"SourceUnit","nodes":[{"id":381,"literals":["solidity",">=","0.4",".21","<","0.9",".0"],"nodeType":"PragmaDirective","src":"180:32:8"},{"abstract":false,"baseContracts":[],"canonicalName":"ArbGasInfo","contractDependencies":[],"contractKind":"interface","documentation":{"id":382,"nodeType":"StructuredDocumentation","src":"214:380:8","text":"@title Provides insight into the cost of using the chain.\n @notice These methods have been adjusted to account for Nitro's heavy use of calldata compression.\n Of note to end-users, we no longer make a distinction between non-zero and zero-valued calldata bytes.\n Precompiled contract that exists in every Arbitrum chain at 0x000000000000000000000000000000000000006c."},"fullyImplemented":false,"id":563,"linearizedBaseContracts":[563],"name":"ArbGasInfo","nameLocation":"604:10:8","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":383,"nodeType":"StructuredDocumentation","src":"621:354:8","text":"@notice Get gas prices for a provided aggregator\n @return return gas prices in wei\n        (\n            per L2 tx,\n            per L1 calldata byte\n            per storage allocation,\n            per ArbGas base,\n            per ArbGas congestion,\n            per ArbGas total\n        )"},"functionSelector":"ba9c916e","id":400,"implemented":false,"kind":"function","modifiers":[],"name":"getPricesInWeiWithAggregator","nameLocation":"989:28:8","nodeType":"FunctionDefinition","parameters":{"id":386,"nodeType":"ParameterList","parameters":[{"constant":false,"id":385,"mutability":"mutable","name":"aggregator","nameLocation":"1026:10:8","nodeType":"VariableDeclaration","scope":400,"src":"1018:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":384,"name":"address","nodeType":"ElementaryTypeName","src":"1018:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1017:20:8"},"returnParameters":{"id":399,"nodeType":"ParameterList","parameters":[{"constant":false,"id":388,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":400,"src":"1082:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":387,"name":"uint256","nodeType":"ElementaryTypeName","src":"1082:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":390,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":400,"src":"1099:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":389,"name":"uint256","nodeType":"ElementaryTypeName","src":"1099:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":392,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":400,"src":"1116:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":391,"name":"uint256","nodeType":"ElementaryTypeName","src":"1116:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":394,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":400,"src":"1133:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":393,"name":"uint256","nodeType":"ElementaryTypeName","src":"1133:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":396,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":400,"src":"1150:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":395,"name":"uint256","nodeType":"ElementaryTypeName","src":"1150:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":398,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":400,"src":"1167:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":397,"name":"uint256","nodeType":"ElementaryTypeName","src":"1167:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1072:108:8"},"scope":563,"src":"980:201:8","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":401,"nodeType":"StructuredDocumentation","src":"1187:428:8","text":"@notice Get gas prices. Uses the caller's preferred aggregator, or the default if the caller doesn't have a preferred one.\n @return return gas prices in wei\n        (\n            per L2 tx,\n            per L1 calldata byte\n            per storage allocation,\n            per ArbGas base,\n            per ArbGas congestion,\n            per ArbGas total\n        )"},"functionSelector":"41b247a8","id":416,"implemented":false,"kind":"function","modifiers":[],"name":"getPricesInWei","nameLocation":"1629:14:8","nodeType":"FunctionDefinition","parameters":{"id":402,"nodeType":"ParameterList","parameters":[],"src":"1643:2:8"},"returnParameters":{"id":415,"nodeType":"ParameterList","parameters":[{"constant":false,"id":404,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":416,"src":"1690:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":403,"name":"uint256","nodeType":"ElementaryTypeName","src":"1690:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":406,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":416,"src":"1707:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":405,"name":"uint256","nodeType":"ElementaryTypeName","src":"1707:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":408,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":416,"src":"1724:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":407,"name":"uint256","nodeType":"ElementaryTypeName","src":"1724:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":410,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":416,"src":"1741:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":409,"name":"uint256","nodeType":"ElementaryTypeName","src":"1741:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":412,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":416,"src":"1758:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":411,"name":"uint256","nodeType":"ElementaryTypeName","src":"1758:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":414,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":416,"src":"1775:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":413,"name":"uint256","nodeType":"ElementaryTypeName","src":"1775:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1680:108:8"},"scope":563,"src":"1620:169:8","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":417,"nodeType":"StructuredDocumentation","src":"1795:134:8","text":"@notice Get prices in ArbGas for the supplied aggregator\n @return (per L2 tx, per L1 calldata byte, per storage allocation)"},"functionSelector":"7a1ea732","id":428,"implemented":false,"kind":"function","modifiers":[],"name":"getPricesInArbGasWithAggregator","nameLocation":"1943:31:8","nodeType":"FunctionDefinition","parameters":{"id":420,"nodeType":"ParameterList","parameters":[{"constant":false,"id":419,"mutability":"mutable","name":"aggregator","nameLocation":"1983:10:8","nodeType":"VariableDeclaration","scope":428,"src":"1975:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":418,"name":"address","nodeType":"ElementaryTypeName","src":"1975:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1974:20:8"},"returnParameters":{"id":427,"nodeType":"ParameterList","parameters":[{"constant":false,"id":422,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":428,"src":"2039:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":421,"name":"uint256","nodeType":"ElementaryTypeName","src":"2039:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":424,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":428,"src":"2056:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":423,"name":"uint256","nodeType":"ElementaryTypeName","src":"2056:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":426,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":428,"src":"2073:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":425,"name":"uint256","nodeType":"ElementaryTypeName","src":"2073:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2029:57:8"},"scope":563,"src":"1934:153:8","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":429,"nodeType":"StructuredDocumentation","src":"2093:203:8","text":"@notice Get prices in ArbGas. Assumes the callers preferred validator, or the default if caller doesn't have a preferred one.\n @return (per L2 tx, per L1 calldata byte, per storage allocation)"},"functionSelector":"02199f34","id":438,"implemented":false,"kind":"function","modifiers":[],"name":"getPricesInArbGas","nameLocation":"2310:17:8","nodeType":"FunctionDefinition","parameters":{"id":430,"nodeType":"ParameterList","parameters":[],"src":"2327:2:8"},"returnParameters":{"id":437,"nodeType":"ParameterList","parameters":[{"constant":false,"id":432,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":438,"src":"2374:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":431,"name":"uint256","nodeType":"ElementaryTypeName","src":"2374:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":434,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":438,"src":"2391:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":433,"name":"uint256","nodeType":"ElementaryTypeName","src":"2391:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":436,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":438,"src":"2408:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":435,"name":"uint256","nodeType":"ElementaryTypeName","src":"2408:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2364:57:8"},"scope":563,"src":"2301:121:8","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":439,"nodeType":"StructuredDocumentation","src":"2428:193:8","text":"@notice Get the gas accounting parameters. `gasPoolMax` is always zero, as the exponential pricing model has no such notion.\n @return (speedLimitPerSecond, gasPoolMax, maxTxGasLimit)"},"functionSelector":"612af178","id":448,"implemented":false,"kind":"function","modifiers":[],"name":"getGasAccountingParams","nameLocation":"2635:22:8","nodeType":"FunctionDefinition","parameters":{"id":440,"nodeType":"ParameterList","parameters":[],"src":"2657:2:8"},"returnParameters":{"id":447,"nodeType":"ParameterList","parameters":[{"constant":false,"id":442,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":448,"src":"2704:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":441,"name":"uint256","nodeType":"ElementaryTypeName","src":"2704:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":444,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":448,"src":"2721:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":443,"name":"uint256","nodeType":"ElementaryTypeName","src":"2721:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":446,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":448,"src":"2738:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":445,"name":"uint256","nodeType":"ElementaryTypeName","src":"2738:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2694:57:8"},"scope":563,"src":"2626:126:8","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":449,"nodeType":"StructuredDocumentation","src":"2758:64:8","text":"@notice Get the minimum gas price needed for a tx to succeed"},"functionSelector":"f918379a","id":454,"implemented":false,"kind":"function","modifiers":[],"name":"getMinimumGasPrice","nameLocation":"2836:18:8","nodeType":"FunctionDefinition","parameters":{"id":450,"nodeType":"ParameterList","parameters":[],"src":"2854:2:8"},"returnParameters":{"id":453,"nodeType":"ParameterList","parameters":[{"constant":false,"id":452,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":454,"src":"2880:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":451,"name":"uint256","nodeType":"ElementaryTypeName","src":"2880:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2879:9:8"},"scope":563,"src":"2827:62:8","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":455,"nodeType":"StructuredDocumentation","src":"2895:57:8","text":"@notice Get ArbOS's estimate of the L1 basefee in wei"},"functionSelector":"f5d6ded7","id":460,"implemented":false,"kind":"function","modifiers":[],"name":"getL1BaseFeeEstimate","nameLocation":"2966:20:8","nodeType":"FunctionDefinition","parameters":{"id":456,"nodeType":"ParameterList","parameters":[],"src":"2986:2:8"},"returnParameters":{"id":459,"nodeType":"ParameterList","parameters":[{"constant":false,"id":458,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":460,"src":"3012:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":457,"name":"uint256","nodeType":"ElementaryTypeName","src":"3012:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3011:9:8"},"scope":563,"src":"2957:64:8","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":461,"nodeType":"StructuredDocumentation","src":"3027:71:8","text":"@notice Get how slowly ArbOS updates its estimate of the L1 basefee"},"functionSelector":"29eb31ee","id":466,"implemented":false,"kind":"function","modifiers":[],"name":"getL1BaseFeeEstimateInertia","nameLocation":"3112:27:8","nodeType":"FunctionDefinition","parameters":{"id":462,"nodeType":"ParameterList","parameters":[],"src":"3139:2:8"},"returnParameters":{"id":465,"nodeType":"ParameterList","parameters":[{"constant":false,"id":464,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":466,"src":"3165:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":463,"name":"uint64","nodeType":"ElementaryTypeName","src":"3165:6:8","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"3164:8:8"},"scope":563,"src":"3103:70:8","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":467,"nodeType":"StructuredDocumentation","src":"3179:96:8","text":"@notice Get the L1 pricer reward rate, in wei per unit\n Available in ArbOS version 11"},"functionSelector":"8a5b1d28","id":472,"implemented":false,"kind":"function","modifiers":[],"name":"getL1RewardRate","nameLocation":"3289:15:8","nodeType":"FunctionDefinition","parameters":{"id":468,"nodeType":"ParameterList","parameters":[],"src":"3304:2:8"},"returnParameters":{"id":471,"nodeType":"ParameterList","parameters":[{"constant":false,"id":470,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":472,"src":"3330:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":469,"name":"uint64","nodeType":"ElementaryTypeName","src":"3330:6:8","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"3329:8:8"},"scope":563,"src":"3280:58:8","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":473,"nodeType":"StructuredDocumentation","src":"3344:84:8","text":"@notice Get the L1 pricer reward recipient\n Available in ArbOS version 11"},"functionSelector":"9e6d7e31","id":478,"implemented":false,"kind":"function","modifiers":[],"name":"getL1RewardRecipient","nameLocation":"3442:20:8","nodeType":"FunctionDefinition","parameters":{"id":474,"nodeType":"ParameterList","parameters":[],"src":"3462:2:8"},"returnParameters":{"id":477,"nodeType":"ParameterList","parameters":[{"constant":false,"id":476,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":478,"src":"3488:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":475,"name":"address","nodeType":"ElementaryTypeName","src":"3488:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3487:9:8"},"scope":563,"src":"3433:64:8","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":479,"nodeType":"StructuredDocumentation","src":"3503:56:8","text":"@notice Deprecated -- Same as getL1BaseFeeEstimate()"},"functionSelector":"055f362f","id":484,"implemented":false,"kind":"function","modifiers":[],"name":"getL1GasPriceEstimate","nameLocation":"3573:21:8","nodeType":"FunctionDefinition","parameters":{"id":480,"nodeType":"ParameterList","parameters":[],"src":"3594:2:8"},"returnParameters":{"id":483,"nodeType":"ParameterList","parameters":[{"constant":false,"id":482,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":484,"src":"3620:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":481,"name":"uint256","nodeType":"ElementaryTypeName","src":"3620:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3619:9:8"},"scope":563,"src":"3564:65:8","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":485,"nodeType":"StructuredDocumentation","src":"3635:59:8","text":"@notice Get L1 gas fees paid by the current transaction"},"functionSelector":"c6f7de0e","id":490,"implemented":false,"kind":"function","modifiers":[],"name":"getCurrentTxL1GasFees","nameLocation":"3708:21:8","nodeType":"FunctionDefinition","parameters":{"id":486,"nodeType":"ParameterList","parameters":[],"src":"3729:2:8"},"returnParameters":{"id":489,"nodeType":"ParameterList","parameters":[{"constant":false,"id":488,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":490,"src":"3755:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":487,"name":"uint256","nodeType":"ElementaryTypeName","src":"3755:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3754:9:8"},"scope":563,"src":"3699:65:8","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":491,"nodeType":"StructuredDocumentation","src":"3770:79:8","text":"@notice Get the backlogged amount of gas burnt in excess of the speed limit"},"functionSelector":"1d5b5c20","id":496,"implemented":false,"kind":"function","modifiers":[],"name":"getGasBacklog","nameLocation":"3863:13:8","nodeType":"FunctionDefinition","parameters":{"id":492,"nodeType":"ParameterList","parameters":[],"src":"3876:2:8"},"returnParameters":{"id":495,"nodeType":"ParameterList","parameters":[{"constant":false,"id":494,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":496,"src":"3902:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":493,"name":"uint64","nodeType":"ElementaryTypeName","src":"3902:6:8","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"3901:8:8"},"scope":563,"src":"3854:56:8","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":497,"nodeType":"StructuredDocumentation","src":"3916:85:8","text":"@notice Get how slowly ArbOS updates the L2 basefee in response to backlogged gas"},"functionSelector":"3dfb45b9","id":502,"implemented":false,"kind":"function","modifiers":[],"name":"getPricingInertia","nameLocation":"4015:17:8","nodeType":"FunctionDefinition","parameters":{"id":498,"nodeType":"ParameterList","parameters":[],"src":"4032:2:8"},"returnParameters":{"id":501,"nodeType":"ParameterList","parameters":[{"constant":false,"id":500,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":502,"src":"4058:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":499,"name":"uint64","nodeType":"ElementaryTypeName","src":"4058:6:8","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"4057:8:8"},"scope":563,"src":"4006:60:8","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":503,"nodeType":"StructuredDocumentation","src":"4072:98:8","text":"@notice Get the forgivable amount of backlogged gas ArbOS will ignore when raising the basefee"},"functionSelector":"25754f91","id":508,"implemented":false,"kind":"function","modifiers":[],"name":"getGasBacklogTolerance","nameLocation":"4184:22:8","nodeType":"FunctionDefinition","parameters":{"id":504,"nodeType":"ParameterList","parameters":[],"src":"4206:2:8"},"returnParameters":{"id":507,"nodeType":"ParameterList","parameters":[{"constant":false,"id":506,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":508,"src":"4232:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":505,"name":"uint64","nodeType":"ElementaryTypeName","src":"4232:6:8","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"4231:8:8"},"scope":563,"src":"4175:65:8","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":509,"nodeType":"StructuredDocumentation","src":"4246:89:8","text":"@notice Returns the surplus of funds for L1 batch posting payments (may be negative)."},"functionSelector":"520acdd7","id":514,"implemented":false,"kind":"function","modifiers":[],"name":"getL1PricingSurplus","nameLocation":"4349:19:8","nodeType":"FunctionDefinition","parameters":{"id":510,"nodeType":"ParameterList","parameters":[],"src":"4368:2:8"},"returnParameters":{"id":513,"nodeType":"ParameterList","parameters":[{"constant":false,"id":512,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":514,"src":"4394:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":511,"name":"int256","nodeType":"ElementaryTypeName","src":"4394:6:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"4393:8:8"},"scope":563,"src":"4340:62:8","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":515,"nodeType":"StructuredDocumentation","src":"4408:100:8","text":"@notice Returns the base charge (in L1 gas) attributed to each data batch in the calldata pricer"},"functionSelector":"6ecca45a","id":520,"implemented":false,"kind":"function","modifiers":[],"name":"getPerBatchGasCharge","nameLocation":"4522:20:8","nodeType":"FunctionDefinition","parameters":{"id":516,"nodeType":"ParameterList","parameters":[],"src":"4542:2:8"},"returnParameters":{"id":519,"nodeType":"ParameterList","parameters":[{"constant":false,"id":518,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":520,"src":"4568:5:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"},"typeName":{"id":517,"name":"int64","nodeType":"ElementaryTypeName","src":"4568:5:8","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"visibility":"internal"}],"src":"4567:7:8"},"scope":563,"src":"4513:62:8","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":521,"nodeType":"StructuredDocumentation","src":"4581:61:8","text":"@notice Returns the cost amortization cap in basis points"},"functionSelector":"7a7d6beb","id":526,"implemented":false,"kind":"function","modifiers":[],"name":"getAmortizedCostCapBips","nameLocation":"4656:23:8","nodeType":"FunctionDefinition","parameters":{"id":522,"nodeType":"ParameterList","parameters":[],"src":"4679:2:8"},"returnParameters":{"id":525,"nodeType":"ParameterList","parameters":[{"constant":false,"id":524,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":526,"src":"4705:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":523,"name":"uint64","nodeType":"ElementaryTypeName","src":"4705:6:8","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"4704:8:8"},"scope":563,"src":"4647:66:8","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":527,"nodeType":"StructuredDocumentation","src":"4719:52:8","text":"@notice Returns the available funds from L1 fees"},"functionSelector":"5b39d23c","id":532,"implemented":false,"kind":"function","modifiers":[],"name":"getL1FeesAvailable","nameLocation":"4785:18:8","nodeType":"FunctionDefinition","parameters":{"id":528,"nodeType":"ParameterList","parameters":[],"src":"4803:2:8"},"returnParameters":{"id":531,"nodeType":"ParameterList","parameters":[{"constant":false,"id":530,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":532,"src":"4829:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":529,"name":"uint256","nodeType":"ElementaryTypeName","src":"4829:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4828:9:8"},"scope":563,"src":"4776:62:8","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":533,"nodeType":"StructuredDocumentation","src":"4844:125:8","text":"@notice Returns the equilibration units parameter for L1 price adjustment algorithm\n Available in ArbOS version 20"},"functionSelector":"ad26ce90","id":538,"implemented":false,"kind":"function","modifiers":[],"name":"getL1PricingEquilibrationUnits","nameLocation":"4983:30:8","nodeType":"FunctionDefinition","parameters":{"id":534,"nodeType":"ParameterList","parameters":[],"src":"5013:2:8"},"returnParameters":{"id":537,"nodeType":"ParameterList","parameters":[{"constant":false,"id":536,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":538,"src":"5039:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":535,"name":"uint256","nodeType":"ElementaryTypeName","src":"5039:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5038:9:8"},"scope":563,"src":"4974:74:8","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":539,"nodeType":"StructuredDocumentation","src":"5054:107:8","text":"@notice Returns the last time the L1 calldata pricer was updated.\n Available in ArbOS version 20"},"functionSelector":"138b47b4","id":544,"implemented":false,"kind":"function","modifiers":[],"name":"getLastL1PricingUpdateTime","nameLocation":"5175:26:8","nodeType":"FunctionDefinition","parameters":{"id":540,"nodeType":"ParameterList","parameters":[],"src":"5201:2:8"},"returnParameters":{"id":543,"nodeType":"ParameterList","parameters":[{"constant":false,"id":542,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":544,"src":"5227:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":541,"name":"uint64","nodeType":"ElementaryTypeName","src":"5227:6:8","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"5226:8:8"},"scope":563,"src":"5166:69:8","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":545,"nodeType":"StructuredDocumentation","src":"5241:133:8","text":"@notice Returns the amount of L1 calldata payments due for rewards (per the L1 reward rate)\n Available in ArbOS version 20"},"functionSelector":"963d6002","id":550,"implemented":false,"kind":"function","modifiers":[],"name":"getL1PricingFundsDueForRewards","nameLocation":"5388:30:8","nodeType":"FunctionDefinition","parameters":{"id":546,"nodeType":"ParameterList","parameters":[],"src":"5418:2:8"},"returnParameters":{"id":549,"nodeType":"ParameterList","parameters":[{"constant":false,"id":548,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":550,"src":"5444:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":547,"name":"uint256","nodeType":"ElementaryTypeName","src":"5444:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5443:9:8"},"scope":563,"src":"5379:74:8","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":551,"nodeType":"StructuredDocumentation","src":"5459:113:8","text":"@notice Returns the amount of L1 calldata posted since the last update.\n Available in ArbOS version 20"},"functionSelector":"eff01306","id":556,"implemented":false,"kind":"function","modifiers":[],"name":"getL1PricingUnitsSinceUpdate","nameLocation":"5586:28:8","nodeType":"FunctionDefinition","parameters":{"id":552,"nodeType":"ParameterList","parameters":[],"src":"5614:2:8"},"returnParameters":{"id":555,"nodeType":"ParameterList","parameters":[{"constant":false,"id":554,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":556,"src":"5640:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":553,"name":"uint64","nodeType":"ElementaryTypeName","src":"5640:6:8","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"5639:8:8"},"scope":563,"src":"5577:71:8","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":557,"nodeType":"StructuredDocumentation","src":"5654:121:8","text":"@notice Returns the L1 pricing surplus as of the last update (may be negative).\n Available in ArbOS version 20"},"functionSelector":"2987d027","id":562,"implemented":false,"kind":"function","modifiers":[],"name":"getLastL1PricingSurplus","nameLocation":"5789:23:8","nodeType":"FunctionDefinition","parameters":{"id":558,"nodeType":"ParameterList","parameters":[],"src":"5812:2:8"},"returnParameters":{"id":561,"nodeType":"ParameterList","parameters":[{"constant":false,"id":560,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":562,"src":"5838:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":559,"name":"int256","nodeType":"ElementaryTypeName","src":"5838:6:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"5837:8:8"},"scope":563,"src":"5780:66:8","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":564,"src":"594:5254:8","usedErrors":[],"usedEvents":[]}],"src":"180:5668:8"},"id":8},"@chainlink/contracts/src/v0.8/vendor/@arbitrum/nitro-contracts/src/precompiles/ArbSys.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/vendor/@arbitrum/nitro-contracts/src/precompiles/ArbSys.sol","exportedSymbols":{"ArbSys":[709]},"id":710,"license":"BUSL-1.1","nodeType":"SourceUnit","nodes":[{"id":565,"literals":["solidity",">=","0.4",".21","<","0.9",".0"],"nodeType":"PragmaDirective","src":"159:32:9"},{"abstract":false,"baseContracts":[],"canonicalName":"ArbSys","contractDependencies":[],"contractKind":"interface","documentation":{"id":566,"nodeType":"StructuredDocumentation","src":"193:246:9","text":" @title System level functionality\n @notice For use by contracts to interact with core L2-specific functionality.\n Precompiled contract that exists in every Arbitrum chain at address(100), 0x0000000000000000000000000000000000000064."},"fullyImplemented":false,"id":709,"linearizedBaseContracts":[709],"name":"ArbSys","nameLocation":"450:6:9","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":567,"nodeType":"StructuredDocumentation","src":"463:162:9","text":" @notice Get Arbitrum block number (distinct from L1 block number; Arbitrum genesis block has block number 0)\n @return block number as int"},"functionSelector":"a3b1b31d","id":572,"implemented":false,"kind":"function","modifiers":[],"name":"arbBlockNumber","nameLocation":"639:14:9","nodeType":"FunctionDefinition","parameters":{"id":568,"nodeType":"ParameterList","parameters":[],"src":"653:2:9"},"returnParameters":{"id":571,"nodeType":"ParameterList","parameters":[{"constant":false,"id":570,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":572,"src":"679:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":569,"name":"uint256","nodeType":"ElementaryTypeName","src":"679:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"678:9:9"},"scope":709,"src":"630:58:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":573,"nodeType":"StructuredDocumentation","src":"694:146:9","text":" @notice Get Arbitrum block hash (reverts unless currentBlockNum-256 <= arbBlockNum < currentBlockNum)\n @return block hash"},"functionSelector":"2b407a82","id":580,"implemented":false,"kind":"function","modifiers":[],"name":"arbBlockHash","nameLocation":"854:12:9","nodeType":"FunctionDefinition","parameters":{"id":576,"nodeType":"ParameterList","parameters":[{"constant":false,"id":575,"mutability":"mutable","name":"arbBlockNum","nameLocation":"875:11:9","nodeType":"VariableDeclaration","scope":580,"src":"867:19:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":574,"name":"uint256","nodeType":"ElementaryTypeName","src":"867:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"866:21:9"},"returnParameters":{"id":579,"nodeType":"ParameterList","parameters":[{"constant":false,"id":578,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":580,"src":"911:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":577,"name":"bytes32","nodeType":"ElementaryTypeName","src":"911:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"910:9:9"},"scope":709,"src":"845:75:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":581,"nodeType":"StructuredDocumentation","src":"926:107:9","text":" @notice Gets the rollup's unique chain identifier\n @return Chain identifier as int"},"functionSelector":"d127f54a","id":586,"implemented":false,"kind":"function","modifiers":[],"name":"arbChainID","nameLocation":"1047:10:9","nodeType":"FunctionDefinition","parameters":{"id":582,"nodeType":"ParameterList","parameters":[],"src":"1057:2:9"},"returnParameters":{"id":585,"nodeType":"ParameterList","parameters":[{"constant":false,"id":584,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":586,"src":"1083:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":583,"name":"uint256","nodeType":"ElementaryTypeName","src":"1083:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1082:9:9"},"scope":709,"src":"1038:54:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":587,"nodeType":"StructuredDocumentation","src":"1098:118:9","text":" @notice Get internal version number identifying an ArbOS build\n @return version number as int"},"functionSelector":"051038f2","id":592,"implemented":false,"kind":"function","modifiers":[],"name":"arbOSVersion","nameLocation":"1230:12:9","nodeType":"FunctionDefinition","parameters":{"id":588,"nodeType":"ParameterList","parameters":[],"src":"1242:2:9"},"returnParameters":{"id":591,"nodeType":"ParameterList","parameters":[{"constant":false,"id":590,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":592,"src":"1268:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":589,"name":"uint256","nodeType":"ElementaryTypeName","src":"1268:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1267:9:9"},"scope":709,"src":"1221:56:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":593,"nodeType":"StructuredDocumentation","src":"1283:100:9","text":" @notice Returns 0 since Nitro has no concept of storage gas\n @return uint 0"},"functionSelector":"a94597ff","id":598,"implemented":false,"kind":"function","modifiers":[],"name":"getStorageGasAvailable","nameLocation":"1397:22:9","nodeType":"FunctionDefinition","parameters":{"id":594,"nodeType":"ParameterList","parameters":[],"src":"1419:2:9"},"returnParameters":{"id":597,"nodeType":"ParameterList","parameters":[{"constant":false,"id":596,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":598,"src":"1445:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":595,"name":"uint256","nodeType":"ElementaryTypeName","src":"1445:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1444:9:9"},"scope":709,"src":"1388:66:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":599,"nodeType":"StructuredDocumentation","src":"1460:293:9","text":" @notice (deprecated) check if current call is top level (meaning it was triggered by an EoA or a L1 contract)\n @dev this call has been deprecated and may be removed in a future release\n @return true if current execution frame is not a call by another L2 contract"},"functionSelector":"08bd624c","id":604,"implemented":false,"kind":"function","modifiers":[],"name":"isTopLevelCall","nameLocation":"1767:14:9","nodeType":"FunctionDefinition","parameters":{"id":600,"nodeType":"ParameterList","parameters":[],"src":"1781:2:9"},"returnParameters":{"id":603,"nodeType":"ParameterList","parameters":[{"constant":false,"id":602,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":604,"src":"1807:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":601,"name":"bool","nodeType":"ElementaryTypeName","src":"1807:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1806:6:9"},"scope":709,"src":"1758:55:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":605,"nodeType":"StructuredDocumentation","src":"1819:192:9","text":" @notice map L1 sender contract address to its L2 alias\n @param sender sender address\n @param unused argument no longer used\n @return aliased sender address"},"functionSelector":"4dbbd506","id":614,"implemented":false,"kind":"function","modifiers":[],"name":"mapL1SenderContractAddressToL2Alias","nameLocation":"2025:35:9","nodeType":"FunctionDefinition","parameters":{"id":610,"nodeType":"ParameterList","parameters":[{"constant":false,"id":607,"mutability":"mutable","name":"sender","nameLocation":"2069:6:9","nodeType":"VariableDeclaration","scope":614,"src":"2061:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":606,"name":"address","nodeType":"ElementaryTypeName","src":"2061:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":609,"mutability":"mutable","name":"unused","nameLocation":"2085:6:9","nodeType":"VariableDeclaration","scope":614,"src":"2077:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":608,"name":"address","nodeType":"ElementaryTypeName","src":"2077:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2060:32:9"},"returnParameters":{"id":613,"nodeType":"ParameterList","parameters":[{"constant":false,"id":612,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":614,"src":"2140:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":611,"name":"address","nodeType":"ElementaryTypeName","src":"2140:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2139:9:9"},"scope":709,"src":"2016:133:9","stateMutability":"pure","virtual":false,"visibility":"external"},{"documentation":{"id":615,"nodeType":"StructuredDocumentation","src":"2155:189:9","text":" @notice check if the caller (of this caller of this) is an aliased L1 contract address\n @return true iff the caller's address is an alias for an L1 contract address"},"functionSelector":"175a260b","id":620,"implemented":false,"kind":"function","modifiers":[],"name":"wasMyCallersAddressAliased","nameLocation":"2358:26:9","nodeType":"FunctionDefinition","parameters":{"id":616,"nodeType":"ParameterList","parameters":[],"src":"2384:2:9"},"returnParameters":{"id":619,"nodeType":"ParameterList","parameters":[{"constant":false,"id":618,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":620,"src":"2410:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":617,"name":"bool","nodeType":"ElementaryTypeName","src":"2410:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2409:6:9"},"scope":709,"src":"2349:67:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":621,"nodeType":"StructuredDocumentation","src":"2422:224:9","text":" @notice return the address of the caller (of this caller of this), without applying L1 contract address aliasing\n @return address of the caller's caller, without applying L1 contract address aliasing"},"functionSelector":"d74523b3","id":626,"implemented":false,"kind":"function","modifiers":[],"name":"myCallersAddressWithoutAliasing","nameLocation":"2660:31:9","nodeType":"FunctionDefinition","parameters":{"id":622,"nodeType":"ParameterList","parameters":[],"src":"2691:2:9"},"returnParameters":{"id":625,"nodeType":"ParameterList","parameters":[{"constant":false,"id":624,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":626,"src":"2717:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":623,"name":"address","nodeType":"ElementaryTypeName","src":"2717:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2716:9:9"},"scope":709,"src":"2651:75:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":627,"nodeType":"StructuredDocumentation","src":"2732:284:9","text":" @notice Send given amount of Eth to dest from sender.\n This is a convenience function, which is equivalent to calling sendTxToL1 with empty data.\n @param destination recipient address on L1\n @return unique identifier for this L2-to-L1 transaction."},"functionSelector":"25e16063","id":634,"implemented":false,"kind":"function","modifiers":[],"name":"withdrawEth","nameLocation":"3030:11:9","nodeType":"FunctionDefinition","parameters":{"id":630,"nodeType":"ParameterList","parameters":[{"constant":false,"id":629,"mutability":"mutable","name":"destination","nameLocation":"3050:11:9","nodeType":"VariableDeclaration","scope":634,"src":"3042:19:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":628,"name":"address","nodeType":"ElementaryTypeName","src":"3042:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3041:21:9"},"returnParameters":{"id":633,"nodeType":"ParameterList","parameters":[{"constant":false,"id":632,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":634,"src":"3113:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":631,"name":"uint256","nodeType":"ElementaryTypeName","src":"3113:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3112:9:9"},"scope":709,"src":"3021:101:9","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":635,"nodeType":"StructuredDocumentation","src":"3128:408:9","text":" @notice Send a transaction to L1\n @dev it is not possible to execute on the L1 any L2-to-L1 transaction which contains data\n to a contract address without any code (as enforced by the Bridge contract).\n @param destination recipient address on L1\n @param data (optional) calldata for L1 contract call\n @return a unique identifier for this L2-to-L1 transaction."},"functionSelector":"928c169a","id":644,"implemented":false,"kind":"function","modifiers":[],"name":"sendTxToL1","nameLocation":"3550:10:9","nodeType":"FunctionDefinition","parameters":{"id":640,"nodeType":"ParameterList","parameters":[{"constant":false,"id":637,"mutability":"mutable","name":"destination","nameLocation":"3569:11:9","nodeType":"VariableDeclaration","scope":644,"src":"3561:19:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":636,"name":"address","nodeType":"ElementaryTypeName","src":"3561:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":639,"mutability":"mutable","name":"data","nameLocation":"3597:4:9","nodeType":"VariableDeclaration","scope":644,"src":"3582:19:9","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":638,"name":"bytes","nodeType":"ElementaryTypeName","src":"3582:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3560:42:9"},"returnParameters":{"id":643,"nodeType":"ParameterList","parameters":[{"constant":false,"id":642,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":644,"src":"3653:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":641,"name":"uint256","nodeType":"ElementaryTypeName","src":"3653:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3652:9:9"},"scope":709,"src":"3541:121:9","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":645,"nodeType":"StructuredDocumentation","src":"3668:230:9","text":" @notice Get send Merkle tree state\n @return size number of sends in the history\n @return root root hash of the send history\n @return partials hashes of partial subtrees in the send history tree"},"functionSelector":"7aeecd2a","id":655,"implemented":false,"kind":"function","modifiers":[],"name":"sendMerkleTreeState","nameLocation":"3912:19:9","nodeType":"FunctionDefinition","parameters":{"id":646,"nodeType":"ParameterList","parameters":[],"src":"3931:2:9"},"returnParameters":{"id":654,"nodeType":"ParameterList","parameters":[{"constant":false,"id":648,"mutability":"mutable","name":"size","nameLocation":"4002:4:9","nodeType":"VariableDeclaration","scope":655,"src":"3994:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":647,"name":"uint256","nodeType":"ElementaryTypeName","src":"3994:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":650,"mutability":"mutable","name":"root","nameLocation":"4028:4:9","nodeType":"VariableDeclaration","scope":655,"src":"4020:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":649,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4020:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":653,"mutability":"mutable","name":"partials","nameLocation":"4063:8:9","nodeType":"VariableDeclaration","scope":655,"src":"4046:25:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":651,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4046:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":652,"nodeType":"ArrayTypeName","src":"4046:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"3980:101:9"},"scope":709,"src":"3903:179:9","stateMutability":"view","virtual":false,"visibility":"external"},{"anonymous":false,"documentation":{"id":656,"nodeType":"StructuredDocumentation","src":"4088:133:9","text":" @notice creates a send txn from L2 to L1\n @param position = (level << 192) + leaf = (0 << 192) + leaf = leaf"},"eventSelector":"3e7aafa77dbf186b7fd488006beff893744caa3c4f6f299e8a709fa2087374fc","id":676,"name":"L2ToL1Tx","nameLocation":"4232:8:9","nodeType":"EventDefinition","parameters":{"id":675,"nodeType":"ParameterList","parameters":[{"constant":false,"id":658,"indexed":false,"mutability":"mutable","name":"caller","nameLocation":"4258:6:9","nodeType":"VariableDeclaration","scope":676,"src":"4250:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":657,"name":"address","nodeType":"ElementaryTypeName","src":"4250:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":660,"indexed":true,"mutability":"mutable","name":"destination","nameLocation":"4290:11:9","nodeType":"VariableDeclaration","scope":676,"src":"4274:27:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":659,"name":"address","nodeType":"ElementaryTypeName","src":"4274:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":662,"indexed":true,"mutability":"mutable","name":"hash","nameLocation":"4327:4:9","nodeType":"VariableDeclaration","scope":676,"src":"4311:20:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":661,"name":"uint256","nodeType":"ElementaryTypeName","src":"4311:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":664,"indexed":true,"mutability":"mutable","name":"position","nameLocation":"4357:8:9","nodeType":"VariableDeclaration","scope":676,"src":"4341:24:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":663,"name":"uint256","nodeType":"ElementaryTypeName","src":"4341:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":666,"indexed":false,"mutability":"mutable","name":"arbBlockNum","nameLocation":"4383:11:9","nodeType":"VariableDeclaration","scope":676,"src":"4375:19:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":665,"name":"uint256","nodeType":"ElementaryTypeName","src":"4375:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":668,"indexed":false,"mutability":"mutable","name":"ethBlockNum","nameLocation":"4412:11:9","nodeType":"VariableDeclaration","scope":676,"src":"4404:19:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":667,"name":"uint256","nodeType":"ElementaryTypeName","src":"4404:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":670,"indexed":false,"mutability":"mutable","name":"timestamp","nameLocation":"4441:9:9","nodeType":"VariableDeclaration","scope":676,"src":"4433:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":669,"name":"uint256","nodeType":"ElementaryTypeName","src":"4433:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":672,"indexed":false,"mutability":"mutable","name":"callvalue","nameLocation":"4468:9:9","nodeType":"VariableDeclaration","scope":676,"src":"4460:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":671,"name":"uint256","nodeType":"ElementaryTypeName","src":"4460:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":674,"indexed":false,"mutability":"mutable","name":"data","nameLocation":"4493:4:9","nodeType":"VariableDeclaration","scope":676,"src":"4487:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":673,"name":"bytes","nodeType":"ElementaryTypeName","src":"4487:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4240:263:9"},"src":"4226:278:9"},{"anonymous":false,"documentation":{"id":677,"nodeType":"StructuredDocumentation","src":"4510:85:9","text":"@dev DEPRECATED in favour of the new L2ToL1Tx event above after the nitro upgrade"},"eventSelector":"5baaa87db386365b5c161be377bc3d8e317e8d98d71a3ca7ed7d555340c8f767","id":699,"name":"L2ToL1Transaction","nameLocation":"4606:17:9","nodeType":"EventDefinition","parameters":{"id":698,"nodeType":"ParameterList","parameters":[{"constant":false,"id":679,"indexed":false,"mutability":"mutable","name":"caller","nameLocation":"4641:6:9","nodeType":"VariableDeclaration","scope":699,"src":"4633:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":678,"name":"address","nodeType":"ElementaryTypeName","src":"4633:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":681,"indexed":true,"mutability":"mutable","name":"destination","nameLocation":"4673:11:9","nodeType":"VariableDeclaration","scope":699,"src":"4657:27:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":680,"name":"address","nodeType":"ElementaryTypeName","src":"4657:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":683,"indexed":true,"mutability":"mutable","name":"uniqueId","nameLocation":"4710:8:9","nodeType":"VariableDeclaration","scope":699,"src":"4694:24:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":682,"name":"uint256","nodeType":"ElementaryTypeName","src":"4694:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":685,"indexed":true,"mutability":"mutable","name":"batchNumber","nameLocation":"4744:11:9","nodeType":"VariableDeclaration","scope":699,"src":"4728:27:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":684,"name":"uint256","nodeType":"ElementaryTypeName","src":"4728:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":687,"indexed":false,"mutability":"mutable","name":"indexInBatch","nameLocation":"4773:12:9","nodeType":"VariableDeclaration","scope":699,"src":"4765:20:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":686,"name":"uint256","nodeType":"ElementaryTypeName","src":"4765:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":689,"indexed":false,"mutability":"mutable","name":"arbBlockNum","nameLocation":"4803:11:9","nodeType":"VariableDeclaration","scope":699,"src":"4795:19:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":688,"name":"uint256","nodeType":"ElementaryTypeName","src":"4795:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":691,"indexed":false,"mutability":"mutable","name":"ethBlockNum","nameLocation":"4832:11:9","nodeType":"VariableDeclaration","scope":699,"src":"4824:19:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":690,"name":"uint256","nodeType":"ElementaryTypeName","src":"4824:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":693,"indexed":false,"mutability":"mutable","name":"timestamp","nameLocation":"4861:9:9","nodeType":"VariableDeclaration","scope":699,"src":"4853:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":692,"name":"uint256","nodeType":"ElementaryTypeName","src":"4853:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":695,"indexed":false,"mutability":"mutable","name":"callvalue","nameLocation":"4888:9:9","nodeType":"VariableDeclaration","scope":699,"src":"4880:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":694,"name":"uint256","nodeType":"ElementaryTypeName","src":"4880:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":697,"indexed":false,"mutability":"mutable","name":"data","nameLocation":"4913:4:9","nodeType":"VariableDeclaration","scope":699,"src":"4907:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":696,"name":"bytes","nodeType":"ElementaryTypeName","src":"4907:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4623:300:9"},"src":"4600:324:9"},{"anonymous":false,"documentation":{"id":700,"nodeType":"StructuredDocumentation","src":"4930:250:9","text":" @notice logs a merkle branch for proof synthesis\n @param reserved an index meant only to align the 4th index with L2ToL1Transaction's 4th event\n @param hash the merkle hash\n @param position = (level << 192) + leaf"},"eventSelector":"e9e13da364699fb5b0496ff5a0fc70760ad5836e93ba96568a4e42b9914a8b95","id":708,"name":"SendMerkleUpdate","nameLocation":"5191:16:9","nodeType":"EventDefinition","parameters":{"id":707,"nodeType":"ParameterList","parameters":[{"constant":false,"id":702,"indexed":true,"mutability":"mutable","name":"reserved","nameLocation":"5233:8:9","nodeType":"VariableDeclaration","scope":708,"src":"5217:24:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":701,"name":"uint256","nodeType":"ElementaryTypeName","src":"5217:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":704,"indexed":true,"mutability":"mutable","name":"hash","nameLocation":"5267:4:9","nodeType":"VariableDeclaration","scope":708,"src":"5251:20:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":703,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5251:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":706,"indexed":true,"mutability":"mutable","name":"position","nameLocation":"5297:8:9","nodeType":"VariableDeclaration","scope":708,"src":"5281:24:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":705,"name":"uint256","nodeType":"ElementaryTypeName","src":"5281:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5207:104:9"},"src":"5185:127:9"}],"scope":710,"src":"440:4874:9","usedErrors":[],"usedEvents":[676,699,708]}],"src":"159:5156:9"},"id":9},"@chainlink/contracts/src/v0.8/vrf/VRF.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/vrf/VRF.sol","exportedSymbols":{"VRF":[1828]},"id":1829,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":711,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:10"},{"abstract":false,"baseContracts":[],"canonicalName":"VRF","contractDependencies":[],"contractKind":"contract","documentation":{"id":712,"nodeType":"StructuredDocumentation","src":"57:7124:10","text":"****************************************************************************\n @notice Verification of verifiable-random-function (VRF) proofs, following\n @notice https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.3\n @notice See https://eprint.iacr.org/2017/099.pdf for security proofs.\n @dev Bibliographic references:\n @dev Goldberg, et al., \"Verifiable Random Functions (VRFs)\", Internet Draft\n @dev draft-irtf-cfrg-vrf-05, IETF, Aug 11 2019,\n @dev https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05\n @dev Papadopoulos, et al., \"Making NSEC5 Practical for DNSSEC\", Cryptology\n @dev ePrint Archive, Report 2017/099, https://eprint.iacr.org/2017/099.pdf\n ****************************************************************************\n @dev USAGE\n @dev The main entry point is _randomValueFromVRFProof. See its docstring.\n ****************************************************************************\n @dev PURPOSE\n @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n @dev to Vera the verifier in such a way that Vera can be sure he's not\n @dev making his output up to suit himself. Reggie provides Vera a public key\n @dev to which he knows the secret key. Each time Vera provides a seed to\n @dev Reggie, he gives back a value which is computed completely\n @dev deterministically from the seed and the secret key.\n @dev Reggie provides a proof by which Vera can verify that the output was\n @dev correctly computed once Reggie tells it to her, but without that proof,\n @dev the output is computationally indistinguishable to her from a uniform\n @dev random sample from the output space.\n @dev The purpose of this contract is to perform that verification.\n ****************************************************************************\n @dev DESIGN NOTES\n @dev The VRF algorithm verified here satisfies the full uniqueness, full\n @dev collision resistance, and full pseudo-randomness security properties.\n @dev See \"SECURITY PROPERTIES\" below, and\n @dev https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-3\n @dev An elliptic curve point is generally represented in the solidity code\n @dev as a uint256[2], corresponding to its affine coordinates in\n @dev GF(FIELD_SIZE).\n @dev For the sake of efficiency, this implementation deviates from the spec\n @dev in some minor ways:\n @dev - Keccak hash rather than the SHA256 hash recommended in\n @dev   https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.5\n @dev   Keccak costs much less gas on the EVM, and provides similar security.\n @dev - Secp256k1 curve instead of the P-256 or ED25519 curves recommended in\n @dev   https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.5\n @dev   For curve-point multiplication, it's much cheaper to abuse ECRECOVER\n @dev - _hashToCurve recursively hashes until it finds a curve x-ordinate. On\n @dev   the EVM, this is slightly more efficient than the recommendation in\n @dev   https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.4.1.1\n @dev   step 5, to concatenate with a nonce then hash, and rehash with the\n @dev   nonce updated until a valid x-ordinate is found.\n @dev - _hashToCurve does not include a cipher version string or the byte 0x1\n @dev   in the hash message, as recommended in step 5.B of the draft\n @dev   standard. They are unnecessary here because no variation in the\n @dev   cipher suite is allowed.\n @dev - Similarly, the hash input in _scalarFromCurvePoints does not include a\n @dev   commitment to the cipher suite, either, which differs from step 2 of\n @dev   https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.4.3\n @dev   . Also, the hash input is the concatenation of the uncompressed\n @dev   points, not the compressed points as recommended in step 3.\n @dev - In the calculation of the challenge value \"c\", the \"u\" value (i.e.\n @dev   the value computed by Reggie as the nonce times the secp256k1\n @dev   generator point, see steps 5 and 7 of\n @dev   https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.3\n @dev   ) is replaced by its ethereum address, i.e. the lower 160 bits of the\n @dev   keccak hash of the original u. This is because we only verify the\n @dev   calculation of u up to its address, by abusing ECRECOVER.\n ****************************************************************************\n @dev   SECURITY PROPERTIES\n @dev Here are the security properties for this VRF:\n @dev Full uniqueness: For any seed and valid VRF public key, there is\n @dev   exactly one VRF output which can be proved to come from that seed, in\n @dev   the sense that the proof will pass _verifyVRFProof.\n @dev Full collision resistance: It's cryptographically infeasible to find\n @dev   two seeds with same VRF output from a fixed, valid VRF key\n @dev Full pseudorandomness: Absent the proofs that the VRF outputs are\n @dev   derived from a given seed, the outputs are computationally\n @dev   indistinguishable from randomness.\n @dev https://eprint.iacr.org/2017/099.pdf, Appendix B contains the proofs\n @dev for these properties.\n @dev For secp256k1, the key validation described in section\n @dev https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.6\n @dev is unnecessary, because secp256k1 has cofactor 1, and the\n @dev representation of the public key used here (affine x- and y-ordinates\n @dev of the secp256k1 point on the standard y^2=x^3+7 curve) cannot refer to\n @dev the point at infinity.\n ****************************************************************************\n @dev OTHER SECURITY CONSIDERATIONS\n @dev The seed input to the VRF could in principle force an arbitrary amount\n @dev of work in _hashToCurve, by requiring extra rounds of hashing and\n @dev checking whether that's yielded the x ordinate of a secp256k1 point.\n @dev However, under the Random Oracle Model the probability of choosing a\n @dev point which forces n extra rounds in _hashToCurve is 2⁻ⁿ. The base cost\n @dev for calling _hashToCurve is about 25,000 gas, and each round of checking\n @dev for a valid x ordinate costs about 15,555 gas, so to find a seed for\n @dev which _hashToCurve would cost more than 2,017,000 gas, one would have to\n @dev try, in expectation, about 2¹²⁸ seeds, which is infeasible for any\n @dev foreseeable computational resources. (25,000 + 128 * 15,555 < 2,017,000.)\n @dev Since the gas block limit for the Ethereum main net is 10,000,000 gas,\n @dev this means it is infeasible for an adversary to prevent correct\n @dev operation of this contract by choosing an adverse seed.\n @dev (See TestMeasureHashToCurveGasCost for verification of the gas cost for\n @dev _hashToCurve.)\n @dev It may be possible to make a secure constant-time _hashToCurve function.\n @dev See notes in _hashToCurve docstring."},"fullyImplemented":true,"id":1828,"linearizedBaseContracts":[1828],"name":"VRF","nameLocation":"7191:3:10","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":715,"mutability":"constant","name":"GROUP_ORDER","nameLocation":"7338:11:10","nodeType":"VariableDeclaration","scope":1828,"src":"7313:105:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":713,"name":"uint256","nodeType":"ElementaryTypeName","src":"7313:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"307846464646464646464646464646464646464646464646464646464646464646454241414544434536414634384130334242464432354538434430333634313431","id":714,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7352:66:10","typeDescriptions":{"typeIdentifier":"t_rational_115792089237316195423570985008687907852837564279074904382605163141518161494337_by_1","typeString":"int_const 1157...(70 digits omitted)...4337"},"value":"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141"},"visibility":"private"},{"constant":true,"id":718,"mutability":"constant","name":"FIELD_SIZE","nameLocation":"7525:10:10","nodeType":"VariableDeclaration","scope":1828,"src":"7500:152:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":716,"name":"uint256","nodeType":"ElementaryTypeName","src":"7500:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"307846464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646454646464646433246","id":717,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7586:66:10","typeDescriptions":{"typeIdentifier":"t_rational_115792089237316195423570985008687907853269984665640564039457584007908834671663_by_1","typeString":"int_const 1157...(70 digits omitted)...1663"},"value":"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F"},"visibility":"private"},{"constant":true,"id":721,"mutability":"constant","name":"WORD_LENGTH_BYTES","nameLocation":"7681:17:10","nodeType":"VariableDeclaration","scope":1828,"src":"7656:49:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":719,"name":"uint256","nodeType":"ElementaryTypeName","src":"7656:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783230","id":720,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7701:4:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"0x20"},"visibility":"private"},{"body":{"id":797,"nodeType":"Block","src":"7924:882:10","statements":[{"assignments":[731],"declarations":[{"constant":false,"id":731,"mutability":"mutable","name":"callResult","nameLocation":"7938:10:10","nodeType":"VariableDeclaration","scope":797,"src":"7930:18:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":730,"name":"uint256","nodeType":"ElementaryTypeName","src":"7930:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":732,"nodeType":"VariableDeclarationStatement","src":"7930:18:10"},{"assignments":[738],"declarations":[{"constant":false,"id":738,"mutability":"mutable","name":"bigModExpContractInputs","nameLocation":"7972:23:10","nodeType":"VariableDeclaration","scope":797,"src":"7954:41:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$6_memory_ptr","typeString":"uint256[6]"},"typeName":{"baseType":{"id":736,"name":"uint256","nodeType":"ElementaryTypeName","src":"7954:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":737,"length":{"hexValue":"36","id":735,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7962:1:10","typeDescriptions":{"typeIdentifier":"t_rational_6_by_1","typeString":"int_const 6"},"value":"6"},"nodeType":"ArrayTypeName","src":"7954:10:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$6_storage_ptr","typeString":"uint256[6]"}},"visibility":"internal"}],"id":739,"nodeType":"VariableDeclarationStatement","src":"7954:41:10"},{"expression":{"id":744,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":740,"name":"bigModExpContractInputs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":738,"src":"8001:23:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$6_memory_ptr","typeString":"uint256[6] memory"}},"id":742,"indexExpression":{"hexValue":"30","id":741,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8025:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8001:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":743,"name":"WORD_LENGTH_BYTES","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":721,"src":"8030:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8001:46:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":745,"nodeType":"ExpressionStatement","src":"8001:46:10"},{"expression":{"id":750,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":746,"name":"bigModExpContractInputs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":738,"src":"8071:23:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$6_memory_ptr","typeString":"uint256[6] memory"}},"id":748,"indexExpression":{"hexValue":"31","id":747,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8095:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8071:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":749,"name":"WORD_LENGTH_BYTES","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":721,"src":"8100:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8071:46:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":751,"nodeType":"ExpressionStatement","src":"8071:46:10"},{"expression":{"id":756,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":752,"name":"bigModExpContractInputs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":738,"src":"8145:23:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$6_memory_ptr","typeString":"uint256[6] memory"}},"id":754,"indexExpression":{"hexValue":"32","id":753,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8169:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8145:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":755,"name":"WORD_LENGTH_BYTES","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":721,"src":"8174:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8145:46:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":757,"nodeType":"ExpressionStatement","src":"8145:46:10"},{"expression":{"id":762,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":758,"name":"bigModExpContractInputs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":738,"src":"8218:23:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$6_memory_ptr","typeString":"uint256[6] memory"}},"id":760,"indexExpression":{"hexValue":"33","id":759,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8242:1:10","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8218:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":761,"name":"base","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":723,"src":"8247:4:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8218:33:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":763,"nodeType":"ExpressionStatement","src":"8218:33:10"},{"expression":{"id":768,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":764,"name":"bigModExpContractInputs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":738,"src":"8257:23:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$6_memory_ptr","typeString":"uint256[6] memory"}},"id":766,"indexExpression":{"hexValue":"34","id":765,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8281:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8257:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":767,"name":"exponent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":725,"src":"8286:8:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8257:37:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":769,"nodeType":"ExpressionStatement","src":"8257:37:10"},{"expression":{"id":774,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":770,"name":"bigModExpContractInputs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":738,"src":"8300:23:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$6_memory_ptr","typeString":"uint256[6] memory"}},"id":772,"indexExpression":{"hexValue":"35","id":771,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8324:1:10","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8300:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":773,"name":"FIELD_SIZE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":718,"src":"8329:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8300:39:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":775,"nodeType":"ExpressionStatement","src":"8300:39:10"},{"assignments":[781],"declarations":[{"constant":false,"id":781,"mutability":"mutable","name":"output","nameLocation":"8363:6:10","nodeType":"VariableDeclaration","scope":797,"src":"8345:24:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$1_memory_ptr","typeString":"uint256[1]"},"typeName":{"baseType":{"id":779,"name":"uint256","nodeType":"ElementaryTypeName","src":"8345:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":780,"length":{"hexValue":"31","id":778,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8353:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"ArrayTypeName","src":"8345:10:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$1_storage_ptr","typeString":"uint256[1]"}},"visibility":"internal"}],"id":782,"nodeType":"VariableDeclarationStatement","src":"8345:24:10"},{"AST":{"nativeSrc":"8384:274:10","nodeType":"YulBlock","src":"8384:274:10","statements":[{"nativeSrc":"8392:260:10","nodeType":"YulAssignment","src":"8392:260:10","value":{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"8430:1:10","nodeType":"YulLiteral","src":"8430:1:10","type":"","value":"0"}],"functionName":{"name":"not","nativeSrc":"8426:3:10","nodeType":"YulIdentifier","src":"8426:3:10"},"nativeSrc":"8426:6:10","nodeType":"YulFunctionCall","src":"8426:6:10"},{"kind":"number","nativeSrc":"8464:4:10","nodeType":"YulLiteral","src":"8464:4:10","type":"","value":"0x05"},{"name":"bigModExpContractInputs","nativeSrc":"8508:23:10","nodeType":"YulIdentifier","src":"8508:23:10"},{"kind":"number","nativeSrc":"8541:4:10","nodeType":"YulLiteral","src":"8541:4:10","type":"","value":"0xc0"},{"name":"output","nativeSrc":"8596:6:10","nodeType":"YulIdentifier","src":"8596:6:10"},{"kind":"number","nativeSrc":"8612:4:10","nodeType":"YulLiteral","src":"8612:4:10","type":"","value":"0x20"}],"functionName":{"name":"staticcall","nativeSrc":"8406:10:10","nodeType":"YulIdentifier","src":"8406:10:10"},"nativeSrc":"8406:246:10","nodeType":"YulFunctionCall","src":"8406:246:10"},"variableNames":[{"name":"callResult","nativeSrc":"8392:10:10","nodeType":"YulIdentifier","src":"8392:10:10"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":738,"isOffset":false,"isSlot":false,"src":"8508:23:10","valueSize":1},{"declaration":731,"isOffset":false,"isSlot":false,"src":"8392:10:10","valueSize":1},{"declaration":781,"isOffset":false,"isSlot":false,"src":"8596:6:10","valueSize":1}],"id":783,"nodeType":"InlineAssembly","src":"8375:283:10"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":786,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":784,"name":"callResult","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":731,"src":"8667:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":785,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8681:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8667:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":792,"nodeType":"IfStatement","src":"8663:117:10","trueBody":{"id":791,"nodeType":"Block","src":"8684:96:10","statements":[{"expression":{"arguments":[{"hexValue":"6269674d6f64457870206661696c75726521","id":788,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8752:20:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_4bd695d9be776d24ba6aaa6ea48a189f388adfd8a5e6a1df7bd6471290ea4e5f","typeString":"literal_string \"bigModExp failure!\""},"value":"bigModExp failure!"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_4bd695d9be776d24ba6aaa6ea48a189f388adfd8a5e6a1df7bd6471290ea4e5f","typeString":"literal_string \"bigModExp failure!\""}],"id":787,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"8745:6:10","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":789,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8745:28:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":790,"nodeType":"ExpressionStatement","src":"8745:28:10"}]}},{"expression":{"baseExpression":{"id":793,"name":"output","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":781,"src":"8792:6:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$1_memory_ptr","typeString":"uint256[1] memory"}},"id":795,"indexExpression":{"hexValue":"30","id":794,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8799:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8792:9:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":729,"id":796,"nodeType":"Return","src":"8785:16:10"}]},"id":798,"implemented":true,"kind":"function","modifiers":[],"name":"_bigModExp","nameLocation":"7834:10:10","nodeType":"FunctionDefinition","parameters":{"id":726,"nodeType":"ParameterList","parameters":[{"constant":false,"id":723,"mutability":"mutable","name":"base","nameLocation":"7853:4:10","nodeType":"VariableDeclaration","scope":798,"src":"7845:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":722,"name":"uint256","nodeType":"ElementaryTypeName","src":"7845:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":725,"mutability":"mutable","name":"exponent","nameLocation":"7867:8:10","nodeType":"VariableDeclaration","scope":798,"src":"7859:16:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":724,"name":"uint256","nodeType":"ElementaryTypeName","src":"7859:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7844:32:10"},"returnParameters":{"id":729,"nodeType":"ParameterList","parameters":[{"constant":false,"id":728,"mutability":"mutable","name":"exponentiation","nameLocation":"7908:14:10","nodeType":"VariableDeclaration","scope":798,"src":"7900:22:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":727,"name":"uint256","nodeType":"ElementaryTypeName","src":"7900:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7899:24:10"},"scope":1828,"src":"7825:981:10","stateMutability":"view","virtual":false,"visibility":"internal"},{"constant":true,"id":806,"mutability":"constant","name":"SQRT_POWER","nameLocation":"9006:10:10","nodeType":"VariableDeclaration","scope":1828,"src":"8981:59:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":799,"name":"uint256","nodeType":"ElementaryTypeName","src":"8981:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":805,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":802,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"id":800,"name":"FIELD_SIZE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":718,"src":"9020:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":801,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9033:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9020:14:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":803,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"9019:16:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":804,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9039:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9019:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"body":{"id":818,"nodeType":"Block","src":"9169:43:10","statements":[{"expression":{"arguments":[{"id":814,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":808,"src":"9193:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":815,"name":"SQRT_POWER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":806,"src":"9196:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":813,"name":"_bigModExp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":798,"src":"9182:10:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) view returns (uint256)"}},"id":816,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9182:25:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":812,"id":817,"nodeType":"Return","src":"9175:32:10"}]},"id":819,"implemented":true,"kind":"function","modifiers":[],"name":"_squareRoot","nameLocation":"9114:11:10","nodeType":"FunctionDefinition","parameters":{"id":809,"nodeType":"ParameterList","parameters":[{"constant":false,"id":808,"mutability":"mutable","name":"x","nameLocation":"9134:1:10","nodeType":"VariableDeclaration","scope":819,"src":"9126:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":807,"name":"uint256","nodeType":"ElementaryTypeName","src":"9126:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9125:11:10"},"returnParameters":{"id":812,"nodeType":"ParameterList","parameters":[{"constant":false,"id":811,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":819,"src":"9160:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":810,"name":"uint256","nodeType":"ElementaryTypeName","src":"9160:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9159:9:10"},"scope":1828,"src":"9105:107:10","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":844,"nodeType":"Block","src":"9334:198:10","statements":[{"assignments":[827],"declarations":[{"constant":false,"id":827,"mutability":"mutable","name":"xCubed","nameLocation":"9429:6:10","nodeType":"VariableDeclaration","scope":844,"src":"9421:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":826,"name":"uint256","nodeType":"ElementaryTypeName","src":"9421:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":837,"initialValue":{"arguments":[{"id":829,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":821,"src":"9445:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":831,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":821,"src":"9455:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":832,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":821,"src":"9458:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":833,"name":"FIELD_SIZE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":718,"src":"9461:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":830,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"9448:6:10","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":834,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9448:24:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":835,"name":"FIELD_SIZE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":718,"src":"9474:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":828,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"9438:6:10","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":836,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9438:47:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9421:64:10"},{"expression":{"arguments":[{"id":839,"name":"xCubed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":827,"src":"9505:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"37","id":840,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9513:1:10","typeDescriptions":{"typeIdentifier":"t_rational_7_by_1","typeString":"int_const 7"},"value":"7"},{"id":841,"name":"FIELD_SIZE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":718,"src":"9516:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_7_by_1","typeString":"int_const 7"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":838,"name":"addmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-2,"src":"9498:6:10","typeDescriptions":{"typeIdentifier":"t_function_addmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":842,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9498:29:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":825,"id":843,"nodeType":"Return","src":"9491:36:10"}]},"id":845,"implemented":true,"kind":"function","modifiers":[],"name":"_ySquared","nameLocation":"9281:9:10","nodeType":"FunctionDefinition","parameters":{"id":822,"nodeType":"ParameterList","parameters":[{"constant":false,"id":821,"mutability":"mutable","name":"x","nameLocation":"9299:1:10","nodeType":"VariableDeclaration","scope":845,"src":"9291:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":820,"name":"uint256","nodeType":"ElementaryTypeName","src":"9291:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9290:11:10"},"returnParameters":{"id":825,"nodeType":"ParameterList","parameters":[{"constant":false,"id":824,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":845,"src":"9325:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":823,"name":"uint256","nodeType":"ElementaryTypeName","src":"9325:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9324:9:10"},"scope":1828,"src":"9272:260:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":888,"nodeType":"Block","src":"9638:397:10","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":859,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":855,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":849,"src":"9823:1:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"id":857,"indexExpression":{"hexValue":"30","id":856,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9825:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9823:4:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":858,"name":"FIELD_SIZE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":718,"src":"9830:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9823:17:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"696e76616c696420782d6f7264696e617465","id":860,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9842:20:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_787cf99fb194dba922561b5b1fd0b18a6a49c57eaa01d9c5279f2b2a5bdc1a86","typeString":"literal_string \"invalid x-ordinate\""},"value":"invalid x-ordinate"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_787cf99fb194dba922561b5b1fd0b18a6a49c57eaa01d9c5279f2b2a5bdc1a86","typeString":"literal_string \"invalid x-ordinate\""}],"id":854,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9815:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":861,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9815:48:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":862,"nodeType":"ExpressionStatement","src":"9815:48:10"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":868,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":864,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":849,"src":"9928:1:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"id":866,"indexExpression":{"hexValue":"31","id":865,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9930:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9928:4:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":867,"name":"FIELD_SIZE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":718,"src":"9935:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9928:17:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"696e76616c696420792d6f7264696e617465","id":869,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9947:20:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_ecc598139057476f7e46578e2e254b173afe0910225980583669989d2a737f84","typeString":"literal_string \"invalid y-ordinate\""},"value":"invalid y-ordinate"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ecc598139057476f7e46578e2e254b173afe0910225980583669989d2a737f84","typeString":"literal_string \"invalid y-ordinate\""}],"id":863,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9920:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":870,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9920:48:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":871,"nodeType":"ExpressionStatement","src":"9920:48:10"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":886,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"baseExpression":{"id":873,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":849,"src":"9991:1:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"id":875,"indexExpression":{"hexValue":"30","id":874,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9993:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9991:4:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":872,"name":"_ySquared","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":845,"src":"9981:9:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":876,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9981:15:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"baseExpression":{"id":878,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":849,"src":"10007:1:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"id":880,"indexExpression":{"hexValue":"31","id":879,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10009:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10007:4:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"baseExpression":{"id":881,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":849,"src":"10013:1:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"id":883,"indexExpression":{"hexValue":"31","id":882,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10015:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10013:4:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":884,"name":"FIELD_SIZE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":718,"src":"10019:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":877,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"10000:6:10","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":885,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10000:30:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9981:49:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":853,"id":887,"nodeType":"Return","src":"9974:56:10"}]},"id":889,"implemented":true,"kind":"function","modifiers":[],"name":"_isOnCurve","nameLocation":"9577:10:10","nodeType":"FunctionDefinition","parameters":{"id":850,"nodeType":"ParameterList","parameters":[{"constant":false,"id":849,"mutability":"mutable","name":"p","nameLocation":"9606:1:10","nodeType":"VariableDeclaration","scope":889,"src":"9588:19:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2]"},"typeName":{"baseType":{"id":846,"name":"uint256","nodeType":"ElementaryTypeName","src":"9588:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":848,"length":{"hexValue":"32","id":847,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9596:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"9588:10:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"visibility":"internal"}],"src":"9587:21:10"},"returnParameters":{"id":853,"nodeType":"ParameterList","parameters":[{"constant":false,"id":852,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":889,"src":"9632:4:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":851,"name":"bool","nodeType":"ElementaryTypeName","src":"9632:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"9631:6:10"},"scope":1828,"src":"9568:467:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":924,"nodeType":"Block","src":"10161:339:10","statements":[{"expression":{"id":903,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":896,"name":"x_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":894,"src":"10167:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":900,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":891,"src":"10190:1:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":899,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"10180:9:10","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":901,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10180:12:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":898,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10172:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":897,"name":"uint256","nodeType":"ElementaryTypeName","src":"10172:7:10","typeDescriptions":{}}},"id":902,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10172:21:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10167:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":904,"nodeType":"ExpressionStatement","src":"10167:26:10"},{"body":{"id":920,"nodeType":"Block","src":"10421:60:10","statements":[{"expression":{"id":918,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":908,"name":"x_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":894,"src":"10429:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"arguments":[{"id":914,"name":"x_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":894,"src":"10469:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":912,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"10452:3:10","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":913,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"10456:12:10","memberName":"encodePacked","nodeType":"MemberAccess","src":"10452:16:10","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":915,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10452:20:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":911,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"10442:9:10","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":916,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10442:31:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":910,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10434:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":909,"name":"uint256","nodeType":"ElementaryTypeName","src":"10434:7:10","typeDescriptions":{}}},"id":917,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10434:40:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10429:45:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":919,"nodeType":"ExpressionStatement","src":"10429:45:10"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":907,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":905,"name":"x_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":894,"src":"10403:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":906,"name":"FIELD_SIZE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":718,"src":"10409:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10403:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":921,"nodeType":"WhileStatement","src":"10396:85:10"},{"expression":{"id":922,"name":"x_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":894,"src":"10493:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":895,"id":923,"nodeType":"Return","src":"10486:9:10"}]},"id":925,"implemented":true,"kind":"function","modifiers":[],"name":"_fieldHash","nameLocation":"10099:10:10","nodeType":"FunctionDefinition","parameters":{"id":892,"nodeType":"ParameterList","parameters":[{"constant":false,"id":891,"mutability":"mutable","name":"b","nameLocation":"10123:1:10","nodeType":"VariableDeclaration","scope":925,"src":"10110:14:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":890,"name":"bytes","nodeType":"ElementaryTypeName","src":"10110:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"10109:16:10"},"returnParameters":{"id":895,"nodeType":"ParameterList","parameters":[{"constant":false,"id":894,"mutability":"mutable","name":"x_","nameLocation":"10157:2:10","nodeType":"VariableDeclaration","scope":925,"src":"10149:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":893,"name":"uint256","nodeType":"ElementaryTypeName","src":"10149:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10148:12:10"},"scope":1828,"src":"10090:410:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":976,"nodeType":"Block","src":"11011:287:10","statements":[{"id":973,"nodeType":"UncheckedBlock","src":"11017:263:10","statements":[{"expression":{"id":940,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":934,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":932,"src":"11035:1:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"id":936,"indexExpression":{"hexValue":"30","id":935,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11037:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"11035:4:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":938,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":927,"src":"11053:1:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":937,"name":"_fieldHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":925,"src":"11042:10:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_uint256_$","typeString":"function (bytes memory) pure returns (uint256)"}},"id":939,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11042:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11035:20:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":941,"nodeType":"ExpressionStatement","src":"11035:20:10"},{"expression":{"id":952,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":942,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":932,"src":"11063:1:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"id":944,"indexExpression":{"hexValue":"31","id":943,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11065:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"11063:4:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"baseExpression":{"id":947,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":932,"src":"11092:1:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"id":949,"indexExpression":{"hexValue":"30","id":948,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11094:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11092:4:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":946,"name":"_ySquared","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":845,"src":"11082:9:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":950,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11082:15:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":945,"name":"_squareRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":819,"src":"11070:11:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view returns (uint256)"}},"id":951,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11070:28:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11063:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":953,"nodeType":"ExpressionStatement","src":"11063:35:10"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":960,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":958,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":954,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":932,"src":"11110:1:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"id":956,"indexExpression":{"hexValue":"31","id":955,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11112:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11110:4:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"32","id":957,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11117:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11110:8:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":959,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11122:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11110:13:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":972,"nodeType":"IfStatement","src":"11106:168:10","trueBody":{"id":971,"nodeType":"Block","src":"11125:149:10","statements":[{"expression":{"id":969,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":961,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":932,"src":"11241:1:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"id":963,"indexExpression":{"hexValue":"31","id":962,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11243:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"11241:4:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":968,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":964,"name":"FIELD_SIZE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":718,"src":"11248:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"baseExpression":{"id":965,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":932,"src":"11261:1:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"id":967,"indexExpression":{"hexValue":"31","id":966,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11263:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11261:4:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11248:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11241:24:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":970,"nodeType":"ExpressionStatement","src":"11241:24:10"}]}}]},{"expression":{"id":974,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":932,"src":"11292:1:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"functionReturnParameters":933,"id":975,"nodeType":"Return","src":"11285:8:10"}]},"id":977,"implemented":true,"kind":"function","modifiers":[],"name":"_newCandidateSecp256k1Point","nameLocation":"10923:27:10","nodeType":"FunctionDefinition","parameters":{"id":928,"nodeType":"ParameterList","parameters":[{"constant":false,"id":927,"mutability":"mutable","name":"b","nameLocation":"10964:1:10","nodeType":"VariableDeclaration","scope":977,"src":"10951:14:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":926,"name":"bytes","nodeType":"ElementaryTypeName","src":"10951:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"10950:16:10"},"returnParameters":{"id":933,"nodeType":"ParameterList","parameters":[{"constant":false,"id":932,"mutability":"mutable","name":"p","nameLocation":"11008:1:10","nodeType":"VariableDeclaration","scope":977,"src":"10990:19:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2]"},"typeName":{"baseType":{"id":929,"name":"uint256","nodeType":"ElementaryTypeName","src":"10990:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":931,"length":{"hexValue":"32","id":930,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10998:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"10990:10:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"visibility":"internal"}],"src":"10989:21:10"},"scope":1828,"src":"10914:384:10","stateMutability":"view","virtual":false,"visibility":"internal"},{"constant":true,"id":980,"mutability":"constant","name":"HASH_TO_CURVE_HASH_PREFIX","nameLocation":"11438:25:10","nodeType":"VariableDeclaration","scope":1828,"src":"11412:55:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":978,"name":"uint256","nodeType":"ElementaryTypeName","src":"11412:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":979,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11466:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"internal"},{"body":{"id":1023,"nodeType":"Block","src":"12344:215:10","statements":[{"expression":{"id":1002,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":993,"name":"rv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":991,"src":"12350:2:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":997,"name":"HASH_TO_CURVE_HASH_PREFIX","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":980,"src":"12400:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":998,"name":"pk","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":984,"src":"12427:2:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},{"id":999,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":986,"src":"12431:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":995,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"12383:3:10","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":996,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12387:12:10","memberName":"encodePacked","nodeType":"MemberAccess","src":"12383:16:10","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1000,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12383:54:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":994,"name":"_newCandidateSecp256k1Point","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":977,"src":"12355:27:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes_memory_ptr_$returns$_t_array$_t_uint256_$2_memory_ptr_$","typeString":"function (bytes memory) view returns (uint256[2] memory)"}},"id":1001,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12355:83:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"src":"12350:88:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"id":1003,"nodeType":"ExpressionStatement","src":"12350:88:10"},{"body":{"id":1019,"nodeType":"Block","src":"12468:72:10","statements":[{"expression":{"id":1017,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1008,"name":"rv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":991,"src":"12476:2:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"baseExpression":{"id":1012,"name":"rv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":991,"src":"12526:2:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"id":1014,"indexExpression":{"hexValue":"30","id":1013,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12529:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12526:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1010,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"12509:3:10","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1011,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12513:12:10","memberName":"encodePacked","nodeType":"MemberAccess","src":"12509:16:10","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1015,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12509:23:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1009,"name":"_newCandidateSecp256k1Point","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":977,"src":"12481:27:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes_memory_ptr_$returns$_t_array$_t_uint256_$2_memory_ptr_$","typeString":"function (bytes memory) view returns (uint256[2] memory)"}},"id":1016,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12481:52:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"src":"12476:57:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"id":1018,"nodeType":"ExpressionStatement","src":"12476:57:10"}]},"condition":{"id":1007,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"12451:15:10","subExpression":{"arguments":[{"id":1005,"name":"rv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":991,"src":"12463:2:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}],"id":1004,"name":"_isOnCurve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":889,"src":"12452:10:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_uint256_$2_memory_ptr_$returns$_t_bool_$","typeString":"function (uint256[2] memory) pure returns (bool)"}},"id":1006,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12452:14:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1020,"nodeType":"WhileStatement","src":"12444:96:10"},{"expression":{"id":1021,"name":"rv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":991,"src":"12552:2:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"functionReturnParameters":992,"id":1022,"nodeType":"Return","src":"12545:9:10"}]},"id":1024,"implemented":true,"kind":"function","modifiers":[],"name":"_hashToCurve","nameLocation":"12249:12:10","nodeType":"FunctionDefinition","parameters":{"id":987,"nodeType":"ParameterList","parameters":[{"constant":false,"id":984,"mutability":"mutable","name":"pk","nameLocation":"12280:2:10","nodeType":"VariableDeclaration","scope":1024,"src":"12262:20:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2]"},"typeName":{"baseType":{"id":981,"name":"uint256","nodeType":"ElementaryTypeName","src":"12262:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":983,"length":{"hexValue":"32","id":982,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12270:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"12262:10:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"visibility":"internal"},{"constant":false,"id":986,"mutability":"mutable","name":"input","nameLocation":"12292:5:10","nodeType":"VariableDeclaration","scope":1024,"src":"12284:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":985,"name":"uint256","nodeType":"ElementaryTypeName","src":"12284:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12261:37:10"},"returnParameters":{"id":992,"nodeType":"ParameterList","parameters":[{"constant":false,"id":991,"mutability":"mutable","name":"rv","nameLocation":"12340:2:10","nodeType":"VariableDeclaration","scope":1024,"src":"12322:20:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2]"},"typeName":{"baseType":{"id":988,"name":"uint256","nodeType":"ElementaryTypeName","src":"12322:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":990,"length":{"hexValue":"32","id":989,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12330:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"12322:10:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"visibility":"internal"}],"src":"12321:22:10"},"scope":1828,"src":"12240:319:10","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1115,"nodeType":"Block","src":"13202:914:10","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1043,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1041,"name":"scalar","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1031,"src":"13267:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":1042,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13277:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"13267:11:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"7a65726f207363616c6172","id":1044,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13280:13:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_e71e9381bf8fff7d9eeee436d182c3c8b982b1d416953f4ca9ccf572989baeca","typeString":"literal_string \"zero scalar\""},"value":"zero scalar"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e71e9381bf8fff7d9eeee436d182c3c8b982b1d416953f4ca9ccf572989baeca","typeString":"literal_string \"zero scalar\""}],"id":1040,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"13259:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1045,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13259:35:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1046,"nodeType":"ExpressionStatement","src":"13259:35:10"},{"assignments":[1048],"declarations":[{"constant":false,"id":1048,"mutability":"mutable","name":"x","nameLocation":"13347:1:10","nodeType":"VariableDeclaration","scope":1115,"src":"13339:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1047,"name":"uint256","nodeType":"ElementaryTypeName","src":"13339:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1052,"initialValue":{"baseExpression":{"id":1049,"name":"multiplicand","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1029,"src":"13351:12:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"id":1051,"indexExpression":{"hexValue":"30","id":1050,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13364:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13351:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13339:27:10"},{"assignments":[1054],"declarations":[{"constant":false,"id":1054,"mutability":"mutable","name":"v","nameLocation":"13408:1:10","nodeType":"VariableDeclaration","scope":1115,"src":"13402:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1053,"name":"uint8","nodeType":"ElementaryTypeName","src":"13402:5:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":1065,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1061,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1059,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1055,"name":"multiplicand","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1029,"src":"13412:12:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"id":1057,"indexExpression":{"hexValue":"31","id":1056,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13425:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13412:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"32","id":1058,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13430:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"13412:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1060,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13435:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"13412:24:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"3238","id":1063,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13444:2:10","typeDescriptions":{"typeIdentifier":"t_rational_28_by_1","typeString":"int_const 28"},"value":"28"},"id":1064,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"13412:34:10","trueExpression":{"hexValue":"3237","id":1062,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13439:2:10","typeDescriptions":{"typeIdentifier":"t_rational_27_by_1","typeString":"int_const 27"},"value":"27"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"13402:44:10"},{"assignments":[1067],"declarations":[{"constant":false,"id":1067,"mutability":"mutable","name":"scalarTimesX","nameLocation":"13803:12:10","nodeType":"VariableDeclaration","scope":1115,"src":"13795:20:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1066,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13795:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1076,"initialValue":{"arguments":[{"arguments":[{"id":1071,"name":"scalar","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1031,"src":"13833:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1072,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1048,"src":"13841:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1073,"name":"GROUP_ORDER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":715,"src":"13844:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1070,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"13826:6:10","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1074,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13826:30:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1069,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13818:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1068,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13818:7:10","typeDescriptions":{}}},"id":1075,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13818:39:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"13795:62:10"},{"assignments":[1078],"declarations":[{"constant":false,"id":1078,"mutability":"mutable","name":"actual","nameLocation":"13871:6:10","nodeType":"VariableDeclaration","scope":1115,"src":"13863:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1077,"name":"address","nodeType":"ElementaryTypeName","src":"13863:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1091,"initialValue":{"arguments":[{"arguments":[{"hexValue":"30","id":1082,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13898:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1081,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13890:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1080,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13890:7:10","typeDescriptions":{}}},"id":1083,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13890:10:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1084,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1054,"src":"13902:1:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"arguments":[{"id":1087,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1048,"src":"13913:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1086,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13905:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1085,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13905:7:10","typeDescriptions":{}}},"id":1088,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13905:10:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1089,"name":"scalarTimesX","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1067,"src":"13917:12:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1079,"name":"ecrecover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-6,"src":"13880:9:10","typeDescriptions":{"typeIdentifier":"t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":1090,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13880:50:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"13863:67:10"},{"assignments":[1093],"declarations":[{"constant":false,"id":1093,"mutability":"mutable","name":"expected","nameLocation":"14004:8:10","nodeType":"VariableDeclaration","scope":1115,"src":"13996:16:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1092,"name":"address","nodeType":"ElementaryTypeName","src":"13996:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1109,"initialValue":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"id":1103,"name":"product","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1035,"src":"14066:7:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}],"expression":{"id":1101,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"14049:3:10","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1102,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"14053:12:10","memberName":"encodePacked","nodeType":"MemberAccess","src":"14049:16:10","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1104,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14049:25:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1100,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"14039:9:10","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1105,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14039:36:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1099,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14031:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1098,"name":"uint256","nodeType":"ElementaryTypeName","src":"14031:7:10","typeDescriptions":{}}},"id":1106,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14031:45:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1097,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14023:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":1096,"name":"uint160","nodeType":"ElementaryTypeName","src":"14023:7:10","typeDescriptions":{}}},"id":1107,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14023:54:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":1095,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14015:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1094,"name":"address","nodeType":"ElementaryTypeName","src":"14015:7:10","typeDescriptions":{}}},"id":1108,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14015:63:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"13996:82:10"},{"expression":{"components":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1112,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1110,"name":"actual","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1078,"src":"14092:6:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1111,"name":"expected","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1093,"src":"14102:8:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"14092:18:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":1113,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14091:20:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1039,"id":1114,"nodeType":"Return","src":"14084:27:10"}]},"documentation":{"id":1025,"nodeType":"StructuredDocumentation","src":"12563:485:10","text":"*********************************************************************\n @notice Check that product==scalar*multiplicand\n @dev Based on Vitalik Buterin's idea in ethresear.ch post cited below.\n @param multiplicand: secp256k1 point\n @param scalar: non-zero GF(GROUP_ORDER) scalar\n @param product: secp256k1 expected to be multiplier * multiplicand\n @return verifies true iff product==scalar*multiplicand, with cryptographically high probability"},"id":1116,"implemented":true,"kind":"function","modifiers":[],"name":"_ecmulVerify","nameLocation":"13060:12:10","nodeType":"FunctionDefinition","parameters":{"id":1036,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1029,"mutability":"mutable","name":"multiplicand","nameLocation":"13096:12:10","nodeType":"VariableDeclaration","scope":1116,"src":"13078:30:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2]"},"typeName":{"baseType":{"id":1026,"name":"uint256","nodeType":"ElementaryTypeName","src":"13078:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1028,"length":{"hexValue":"32","id":1027,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13086:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"13078:10:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"visibility":"internal"},{"constant":false,"id":1031,"mutability":"mutable","name":"scalar","nameLocation":"13122:6:10","nodeType":"VariableDeclaration","scope":1116,"src":"13114:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1030,"name":"uint256","nodeType":"ElementaryTypeName","src":"13114:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1035,"mutability":"mutable","name":"product","nameLocation":"13152:7:10","nodeType":"VariableDeclaration","scope":1116,"src":"13134:25:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2]"},"typeName":{"baseType":{"id":1032,"name":"uint256","nodeType":"ElementaryTypeName","src":"13134:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1034,"length":{"hexValue":"32","id":1033,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13142:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"13134:10:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"visibility":"internal"}],"src":"13072:91:10"},"returnParameters":{"id":1039,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1038,"mutability":"mutable","name":"verifies","nameLocation":"13192:8:10","nodeType":"VariableDeclaration","scope":1116,"src":"13187:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1037,"name":"bool","nodeType":"ElementaryTypeName","src":"13187:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"13186:15:10"},"scope":1828,"src":"13051:1065:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1170,"nodeType":"Block","src":"14345:349:10","statements":[{"id":1165,"nodeType":"UncheckedBlock","src":"14351:318:10","statements":[{"assignments":[1132],"declarations":[{"constant":false,"id":1132,"mutability":"mutable","name":"num1","nameLocation":"14377:4:10","nodeType":"VariableDeclaration","scope":1165,"src":"14369:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1131,"name":"uint256","nodeType":"ElementaryTypeName","src":"14369:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1138,"initialValue":{"arguments":[{"id":1134,"name":"z2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1124,"src":"14391:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1135,"name":"x1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1118,"src":"14395:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1136,"name":"FIELD_SIZE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":718,"src":"14399:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1133,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"14384:6:10","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1137,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14384:26:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"14369:41:10"},{"assignments":[1140],"declarations":[{"constant":false,"id":1140,"mutability":"mutable","name":"num2","nameLocation":"14537:4:10","nodeType":"VariableDeclaration","scope":1165,"src":"14529:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1139,"name":"uint256","nodeType":"ElementaryTypeName","src":"14529:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1148,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1144,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1142,"name":"FIELD_SIZE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":718,"src":"14551:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1143,"name":"x2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1122,"src":"14564:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14551:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1145,"name":"z1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1120,"src":"14568:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1146,"name":"FIELD_SIZE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":718,"src":"14572:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1141,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"14544:6:10","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1147,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14544:39:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"14529:54:10"},{"expression":{"id":1163,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":1149,"name":"x3","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1127,"src":"14592:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1150,"name":"z3","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1129,"src":"14596:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1151,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"14591:8:10","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"components":[{"arguments":[{"id":1153,"name":"num1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1132,"src":"14610:4:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1154,"name":"num2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1140,"src":"14616:4:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1155,"name":"FIELD_SIZE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":718,"src":"14622:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1152,"name":"addmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-2,"src":"14603:6:10","typeDescriptions":{"typeIdentifier":"t_function_addmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1156,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14603:30:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":1158,"name":"z1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1120,"src":"14642:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1159,"name":"z2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1124,"src":"14646:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1160,"name":"FIELD_SIZE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":718,"src":"14650:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1157,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"14635:6:10","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1161,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14635:26:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1162,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14602:60:10","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"src":"14591:71:10","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1164,"nodeType":"ExpressionStatement","src":"14591:71:10"}]},{"expression":{"components":[{"id":1166,"name":"x3","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1127,"src":"14682:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1167,"name":"z3","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1129,"src":"14686:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1168,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14681:8:10","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"functionReturnParameters":1130,"id":1169,"nodeType":"Return","src":"14674:15:10"}]},"id":1171,"implemented":true,"kind":"function","modifiers":[],"name":"_projectiveSub","nameLocation":"14215:14:10","nodeType":"FunctionDefinition","parameters":{"id":1125,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1118,"mutability":"mutable","name":"x1","nameLocation":"14243:2:10","nodeType":"VariableDeclaration","scope":1171,"src":"14235:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1117,"name":"uint256","nodeType":"ElementaryTypeName","src":"14235:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1120,"mutability":"mutable","name":"z1","nameLocation":"14259:2:10","nodeType":"VariableDeclaration","scope":1171,"src":"14251:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1119,"name":"uint256","nodeType":"ElementaryTypeName","src":"14251:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1122,"mutability":"mutable","name":"x2","nameLocation":"14275:2:10","nodeType":"VariableDeclaration","scope":1171,"src":"14267:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1121,"name":"uint256","nodeType":"ElementaryTypeName","src":"14267:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1124,"mutability":"mutable","name":"z2","nameLocation":"14291:2:10","nodeType":"VariableDeclaration","scope":1171,"src":"14283:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1123,"name":"uint256","nodeType":"ElementaryTypeName","src":"14283:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14229:68:10"},"returnParameters":{"id":1130,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1127,"mutability":"mutable","name":"x3","nameLocation":"14329:2:10","nodeType":"VariableDeclaration","scope":1171,"src":"14321:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1126,"name":"uint256","nodeType":"ElementaryTypeName","src":"14321:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1129,"mutability":"mutable","name":"z3","nameLocation":"14341:2:10","nodeType":"VariableDeclaration","scope":1171,"src":"14333:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1128,"name":"uint256","nodeType":"ElementaryTypeName","src":"14333:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14320:24:10"},"scope":1828,"src":"14206:488:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1206,"nodeType":"Block","src":"14919:99:10","statements":[{"expression":{"id":1200,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":1186,"name":"x3","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1182,"src":"14926:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1187,"name":"z3","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1184,"src":"14930:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1188,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"14925:8:10","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"components":[{"arguments":[{"id":1190,"name":"x1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1173,"src":"14944:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1191,"name":"x2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1177,"src":"14948:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1192,"name":"FIELD_SIZE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":718,"src":"14952:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1189,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"14937:6:10","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1193,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14937:26:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":1195,"name":"z1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1175,"src":"14972:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1196,"name":"z2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1179,"src":"14976:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1197,"name":"FIELD_SIZE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":718,"src":"14980:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1194,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"14965:6:10","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1198,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14965:26:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1199,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14936:56:10","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"src":"14925:67:10","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1201,"nodeType":"ExpressionStatement","src":"14925:67:10"},{"expression":{"components":[{"id":1202,"name":"x3","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1182,"src":"15006:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1203,"name":"z3","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1184,"src":"15010:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1204,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"15005:8:10","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"functionReturnParameters":1185,"id":1205,"nodeType":"Return","src":"14998:15:10"}]},"id":1207,"implemented":true,"kind":"function","modifiers":[],"name":"_projectiveMul","nameLocation":"14789:14:10","nodeType":"FunctionDefinition","parameters":{"id":1180,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1173,"mutability":"mutable","name":"x1","nameLocation":"14817:2:10","nodeType":"VariableDeclaration","scope":1207,"src":"14809:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1172,"name":"uint256","nodeType":"ElementaryTypeName","src":"14809:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1175,"mutability":"mutable","name":"z1","nameLocation":"14833:2:10","nodeType":"VariableDeclaration","scope":1207,"src":"14825:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1174,"name":"uint256","nodeType":"ElementaryTypeName","src":"14825:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1177,"mutability":"mutable","name":"x2","nameLocation":"14849:2:10","nodeType":"VariableDeclaration","scope":1207,"src":"14841:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1176,"name":"uint256","nodeType":"ElementaryTypeName","src":"14841:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1179,"mutability":"mutable","name":"z2","nameLocation":"14865:2:10","nodeType":"VariableDeclaration","scope":1207,"src":"14857:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1178,"name":"uint256","nodeType":"ElementaryTypeName","src":"14857:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14803:68:10"},"returnParameters":{"id":1185,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1182,"mutability":"mutable","name":"x3","nameLocation":"14903:2:10","nodeType":"VariableDeclaration","scope":1207,"src":"14895:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1181,"name":"uint256","nodeType":"ElementaryTypeName","src":"14895:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1184,"mutability":"mutable","name":"z3","nameLocation":"14915:2:10","nodeType":"VariableDeclaration","scope":1207,"src":"14907:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1183,"name":"uint256","nodeType":"ElementaryTypeName","src":"14907:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14894:24:10"},"scope":1828,"src":"14780:238:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1365,"nodeType":"Block","src":"16825:1991:10","statements":[{"id":1359,"nodeType":"UncheckedBlock","src":"16831:1956:10","statements":[{"assignments":[1226,1228],"declarations":[{"constant":false,"id":1226,"mutability":"mutable","name":"z1","nameLocation":"17529:2:10","nodeType":"VariableDeclaration","scope":1359,"src":"17521:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1225,"name":"uint256","nodeType":"ElementaryTypeName","src":"17521:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1228,"mutability":"mutable","name":"z2","nameLocation":"17541:2:10","nodeType":"VariableDeclaration","scope":1359,"src":"17533:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1227,"name":"uint256","nodeType":"ElementaryTypeName","src":"17533:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1232,"initialValue":{"components":[{"hexValue":"31","id":1229,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17548:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},{"hexValue":"31","id":1230,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17551:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"id":1231,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"17547:6:10","typeDescriptions":{"typeIdentifier":"t_tuple$_t_rational_1_by_1_$_t_rational_1_by_1_$","typeString":"tuple(int_const 1,int_const 1)"}},"nodeType":"VariableDeclarationStatement","src":"17520:33:10"},{"assignments":[1234],"declarations":[{"constant":false,"id":1234,"mutability":"mutable","name":"lx","nameLocation":"17700:2:10","nodeType":"VariableDeclaration","scope":1359,"src":"17692:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1233,"name":"uint256","nodeType":"ElementaryTypeName","src":"17692:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1242,"initialValue":{"arguments":[{"id":1236,"name":"qy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1216,"src":"17712:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1239,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1237,"name":"FIELD_SIZE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":718,"src":"17716:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1238,"name":"py","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1212,"src":"17729:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17716:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1240,"name":"FIELD_SIZE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":718,"src":"17733:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1235,"name":"addmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-2,"src":"17705:6:10","typeDescriptions":{"typeIdentifier":"t_function_addmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1241,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17705:39:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"17692:52:10"},{"assignments":[1244],"declarations":[{"constant":false,"id":1244,"mutability":"mutable","name":"lz","nameLocation":"17760:2:10","nodeType":"VariableDeclaration","scope":1359,"src":"17752:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1243,"name":"uint256","nodeType":"ElementaryTypeName","src":"17752:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1252,"initialValue":{"arguments":[{"id":1246,"name":"qx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1214,"src":"17772:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1249,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1247,"name":"FIELD_SIZE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":718,"src":"17776:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1248,"name":"px","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1210,"src":"17789:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17776:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1250,"name":"FIELD_SIZE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":718,"src":"17793:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1245,"name":"addmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-2,"src":"17765:6:10","typeDescriptions":{"typeIdentifier":"t_function_addmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1251,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17765:39:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"17752:52:10"},{"assignments":[1254],"declarations":[{"constant":false,"id":1254,"mutability":"mutable","name":"dx","nameLocation":"17821:2:10","nodeType":"VariableDeclaration","scope":1359,"src":"17813:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1253,"name":"uint256","nodeType":"ElementaryTypeName","src":"17813:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1255,"nodeType":"VariableDeclarationStatement","src":"17813:10:10"},{"expression":{"id":1265,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":1256,"name":"sx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1219,"src":"17917:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1257,"name":"dx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1254,"src":"17921:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1258,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"17916:8:10","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1260,"name":"lx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1234,"src":"17942:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1261,"name":"lz","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1244,"src":"17946:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1262,"name":"lx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1234,"src":"17950:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1263,"name":"lz","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1244,"src":"17954:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1259,"name":"_projectiveMul","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1207,"src":"17927:14:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$_t_uint256_$","typeString":"function (uint256,uint256,uint256,uint256) pure returns (uint256,uint256)"}},"id":1264,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17927:30:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"src":"17916:41:10","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1266,"nodeType":"ExpressionStatement","src":"17916:41:10"},{"expression":{"id":1276,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":1267,"name":"sx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1219,"src":"17989:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1268,"name":"dx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1254,"src":"17993:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1269,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"17988:8:10","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1271,"name":"sx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1219,"src":"18014:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1272,"name":"dx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1254,"src":"18018:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1273,"name":"px","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1210,"src":"18022:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1274,"name":"z1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1226,"src":"18026:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1270,"name":"_projectiveSub","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1171,"src":"17999:14:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$_t_uint256_$","typeString":"function (uint256,uint256,uint256,uint256) pure returns (uint256,uint256)"}},"id":1275,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17999:30:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"src":"17988:41:10","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1277,"nodeType":"ExpressionStatement","src":"17988:41:10"},{"expression":{"id":1287,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":1278,"name":"sx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1219,"src":"18064:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1279,"name":"dx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1254,"src":"18068:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1280,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"18063:8:10","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1282,"name":"sx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1219,"src":"18089:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1283,"name":"dx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1254,"src":"18093:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1284,"name":"qx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1214,"src":"18097:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1285,"name":"z2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1228,"src":"18101:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1281,"name":"_projectiveSub","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1171,"src":"18074:14:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$_t_uint256_$","typeString":"function (uint256,uint256,uint256,uint256) pure returns (uint256,uint256)"}},"id":1286,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18074:30:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"src":"18063:41:10","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1288,"nodeType":"ExpressionStatement","src":"18063:41:10"},{"assignments":[1290],"declarations":[{"constant":false,"id":1290,"mutability":"mutable","name":"dy","nameLocation":"18150:2:10","nodeType":"VariableDeclaration","scope":1359,"src":"18142:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1289,"name":"uint256","nodeType":"ElementaryTypeName","src":"18142:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1291,"nodeType":"VariableDeclarationStatement","src":"18142:10:10"},{"expression":{"id":1301,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":1292,"name":"sy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1221,"src":"18248:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1293,"name":"dy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1290,"src":"18252:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1294,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"18247:8:10","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1296,"name":"px","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1210,"src":"18273:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1297,"name":"z1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1226,"src":"18277:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1298,"name":"sx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1219,"src":"18281:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1299,"name":"dx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1254,"src":"18285:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1295,"name":"_projectiveSub","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1171,"src":"18258:14:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$_t_uint256_$","typeString":"function (uint256,uint256,uint256,uint256) pure returns (uint256,uint256)"}},"id":1300,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18258:30:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"src":"18247:41:10","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1302,"nodeType":"ExpressionStatement","src":"18247:41:10"},{"expression":{"id":1312,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":1303,"name":"sy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1221,"src":"18306:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1304,"name":"dy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1290,"src":"18310:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1305,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"18305:8:10","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1307,"name":"sy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1221,"src":"18331:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1308,"name":"dy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1290,"src":"18335:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1309,"name":"lx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1234,"src":"18339:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1310,"name":"lz","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1244,"src":"18343:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1306,"name":"_projectiveMul","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1207,"src":"18316:14:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$_t_uint256_$","typeString":"function (uint256,uint256,uint256,uint256) pure returns (uint256,uint256)"}},"id":1311,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18316:30:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"src":"18305:41:10","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1313,"nodeType":"ExpressionStatement","src":"18305:41:10"},{"expression":{"id":1323,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":1314,"name":"sy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1221,"src":"18383:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1315,"name":"dy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1290,"src":"18387:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1316,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"18382:8:10","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1318,"name":"sy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1221,"src":"18408:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1319,"name":"dy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1290,"src":"18412:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1320,"name":"py","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1212,"src":"18416:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1321,"name":"z1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1226,"src":"18420:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1317,"name":"_projectiveSub","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1171,"src":"18393:14:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$_t_uint256_$","typeString":"function (uint256,uint256,uint256,uint256) pure returns (uint256,uint256)"}},"id":1322,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18393:30:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"src":"18382:41:10","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1324,"nodeType":"ExpressionStatement","src":"18382:41:10"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1327,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1325,"name":"dx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1254,"src":"18467:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1326,"name":"dy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1290,"src":"18473:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18467:8:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1357,"nodeType":"Block","src":"18685:96:10","statements":[{"expression":{"id":1355,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1353,"name":"sz","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1223,"src":"18765:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1354,"name":"dx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1254,"src":"18770:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18765:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1356,"nodeType":"ExpressionStatement","src":"18765:7:10"}]},"id":1358,"nodeType":"IfStatement","src":"18463:318:10","trueBody":{"id":1352,"nodeType":"Block","src":"18477:202:10","statements":[{"expression":{"id":1334,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1328,"name":"sx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1219,"src":"18557:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1330,"name":"sx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1219,"src":"18569:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1331,"name":"dy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1290,"src":"18573:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1332,"name":"FIELD_SIZE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":718,"src":"18577:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1329,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"18562:6:10","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1333,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18562:26:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18557:31:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1335,"nodeType":"ExpressionStatement","src":"18557:31:10"},{"expression":{"id":1342,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1336,"name":"sy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1221,"src":"18598:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1338,"name":"sy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1221,"src":"18610:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1339,"name":"dx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1254,"src":"18614:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1340,"name":"FIELD_SIZE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":718,"src":"18618:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1337,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"18603:6:10","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1341,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18603:26:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18598:31:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1343,"nodeType":"ExpressionStatement","src":"18598:31:10"},{"expression":{"id":1350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1344,"name":"sz","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1223,"src":"18639:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1346,"name":"dx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1254,"src":"18651:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1347,"name":"dy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1290,"src":"18655:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1348,"name":"FIELD_SIZE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":718,"src":"18659:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1345,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"18644:6:10","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1349,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18644:26:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18639:31:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1351,"nodeType":"ExpressionStatement","src":"18639:31:10"}]}}]},{"expression":{"components":[{"id":1360,"name":"sx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1219,"src":"18800:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1361,"name":"sy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1221,"src":"18804:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1362,"name":"sz","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1223,"src":"18808:2:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1363,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"18799:12:10","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256,uint256)"}},"functionReturnParameters":1224,"id":1364,"nodeType":"Return","src":"18792:19:10"}]},"documentation":{"id":1208,"nodeType":"StructuredDocumentation","src":"15022:1647:10","text":"**************************************************************************\n@notice Computes elliptic-curve sum, in projective co-ordinates\n@dev Using projective coordinates avoids costly divisions\n@dev To use this with p and q in affine coordinates, call\n@dev _projectiveECAdd(px, py, qx, qy). This will return\n@dev the addition of (px, py, 1) and (qx, qy, 1), in the\n@dev secp256k1 group.\n@dev This can be used to calculate the z which is the inverse to zInv\n@dev in isValidVRFOutput. But consider using a faster\n@dev re-implementation such as ProjectiveECAdd in the golang vrf package.\n@dev This function assumes [px,py,1],[qx,qy,1] are valid projective\ncoordinates of secp256k1 points. That is safe in this contract,\nbecause this method is only used by _linearCombination, which checks\npoints are on the curve via ecrecover.**************************************************************************\n@param px The first affine coordinate of the first summand\n@param py The second affine coordinate of the first summand\n@param qx The first affine coordinate of the second summand\n@param qy The second affine coordinate of the second summand\n(px,py) and (qx,qy) must be distinct, valid secp256k1 points.**************************************************************************\nReturn values are projective coordinates of [px,py,1]+[qx,qy,1] as points\non secp256k1, in P²(𝔽ₙ)\n@return sx\n@return sy\n@return sz"},"id":1366,"implemented":true,"kind":"function","modifiers":[],"name":"_projectiveECAdd","nameLocation":"16681:16:10","nodeType":"FunctionDefinition","parameters":{"id":1217,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1210,"mutability":"mutable","name":"px","nameLocation":"16711:2:10","nodeType":"VariableDeclaration","scope":1366,"src":"16703:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1209,"name":"uint256","nodeType":"ElementaryTypeName","src":"16703:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1212,"mutability":"mutable","name":"py","nameLocation":"16727:2:10","nodeType":"VariableDeclaration","scope":1366,"src":"16719:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1211,"name":"uint256","nodeType":"ElementaryTypeName","src":"16719:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1214,"mutability":"mutable","name":"qx","nameLocation":"16743:2:10","nodeType":"VariableDeclaration","scope":1366,"src":"16735:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1213,"name":"uint256","nodeType":"ElementaryTypeName","src":"16735:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1216,"mutability":"mutable","name":"qy","nameLocation":"16759:2:10","nodeType":"VariableDeclaration","scope":1366,"src":"16751:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1215,"name":"uint256","nodeType":"ElementaryTypeName","src":"16751:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16697:68:10"},"returnParameters":{"id":1224,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1219,"mutability":"mutable","name":"sx","nameLocation":"16797:2:10","nodeType":"VariableDeclaration","scope":1366,"src":"16789:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1218,"name":"uint256","nodeType":"ElementaryTypeName","src":"16789:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1221,"mutability":"mutable","name":"sy","nameLocation":"16809:2:10","nodeType":"VariableDeclaration","scope":1366,"src":"16801:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1220,"name":"uint256","nodeType":"ElementaryTypeName","src":"16801:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1223,"mutability":"mutable","name":"sz","nameLocation":"16821:2:10","nodeType":"VariableDeclaration","scope":1366,"src":"16813:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1222,"name":"uint256","nodeType":"ElementaryTypeName","src":"16813:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16788:36:10"},"scope":1828,"src":"16672:2144:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1435,"nodeType":"Block","src":"19225:441:10","statements":[{"assignments":[1384],"declarations":[{"constant":false,"id":1384,"mutability":"mutable","name":"x","nameLocation":"19239:1:10","nodeType":"VariableDeclaration","scope":1435,"src":"19231:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1383,"name":"uint256","nodeType":"ElementaryTypeName","src":"19231:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1385,"nodeType":"VariableDeclarationStatement","src":"19231:9:10"},{"assignments":[1387],"declarations":[{"constant":false,"id":1387,"mutability":"mutable","name":"y","nameLocation":"19254:1:10","nodeType":"VariableDeclaration","scope":1435,"src":"19246:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1386,"name":"uint256","nodeType":"ElementaryTypeName","src":"19246:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1388,"nodeType":"VariableDeclarationStatement","src":"19246:9:10"},{"assignments":[1390],"declarations":[{"constant":false,"id":1390,"mutability":"mutable","name":"z","nameLocation":"19269:1:10","nodeType":"VariableDeclaration","scope":1435,"src":"19261:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1389,"name":"uint256","nodeType":"ElementaryTypeName","src":"19261:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1391,"nodeType":"VariableDeclarationStatement","src":"19261:9:10"},{"expression":{"id":1410,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":1392,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1384,"src":"19277:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1393,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1387,"src":"19280:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1394,"name":"z","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1390,"src":"19283:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1395,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"19276:9:10","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"baseExpression":{"id":1397,"name":"p1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1370,"src":"19305:2:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"id":1399,"indexExpression":{"hexValue":"30","id":1398,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19308:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19305:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"baseExpression":{"id":1400,"name":"p1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1370,"src":"19312:2:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"id":1402,"indexExpression":{"hexValue":"31","id":1401,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19315:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19312:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"baseExpression":{"id":1403,"name":"p2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1374,"src":"19319:2:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"id":1405,"indexExpression":{"hexValue":"30","id":1404,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19322:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19319:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"baseExpression":{"id":1406,"name":"p2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1374,"src":"19326:2:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"id":1408,"indexExpression":{"hexValue":"31","id":1407,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19329:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19326:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1396,"name":"_projectiveECAdd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1366,"src":"19288:16:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$_t_uint256_$_t_uint256_$","typeString":"function (uint256,uint256,uint256,uint256) pure returns (uint256,uint256,uint256)"}},"id":1409,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19288:44:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256,uint256)"}},"src":"19276:56:10","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1411,"nodeType":"ExpressionStatement","src":"19276:56:10"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1419,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1414,"name":"z","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1390,"src":"19404:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1415,"name":"invZ","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1376,"src":"19407:4:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1416,"name":"FIELD_SIZE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":718,"src":"19413:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1413,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"19397:6:10","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1417,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19397:27:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":1418,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19428:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"19397:32:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"696e765a206d75737420626520696e7665727365206f66207a","id":1420,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"19431:27:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_95046d93d9b2e6ba778cd180e8c682e7d907547386cb54bf80bca322c50144ca","typeString":"literal_string \"invZ must be inverse of z\""},"value":"invZ must be inverse of z"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_95046d93d9b2e6ba778cd180e8c682e7d907547386cb54bf80bca322c50144ca","typeString":"literal_string \"invZ must be inverse of z\""}],"id":1412,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"19389:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1421,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19389:70:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1422,"nodeType":"ExpressionStatement","src":"19389:70:10"},{"expression":{"components":[{"arguments":[{"id":1424,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1384,"src":"19611:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1425,"name":"invZ","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1376,"src":"19614:4:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1426,"name":"FIELD_SIZE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":718,"src":"19620:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1423,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"19604:6:10","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1427,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19604:27:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":1429,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1387,"src":"19640:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1430,"name":"invZ","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1376,"src":"19643:4:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1431,"name":"FIELD_SIZE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":718,"src":"19649:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1428,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"19633:6:10","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1432,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19633:27:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1433,"isConstant":false,"isInlineArray":true,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"19603:58:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"functionReturnParameters":1382,"id":1434,"nodeType":"Return","src":"19596:65:10"}]},"id":1436,"implemented":true,"kind":"function","modifiers":[],"name":"_affineECAdd","nameLocation":"19096:12:10","nodeType":"FunctionDefinition","parameters":{"id":1377,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1370,"mutability":"mutable","name":"p1","nameLocation":"19132:2:10","nodeType":"VariableDeclaration","scope":1436,"src":"19114:20:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2]"},"typeName":{"baseType":{"id":1367,"name":"uint256","nodeType":"ElementaryTypeName","src":"19114:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1369,"length":{"hexValue":"32","id":1368,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19122:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"19114:10:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"visibility":"internal"},{"constant":false,"id":1374,"mutability":"mutable","name":"p2","nameLocation":"19158:2:10","nodeType":"VariableDeclaration","scope":1436,"src":"19140:20:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2]"},"typeName":{"baseType":{"id":1371,"name":"uint256","nodeType":"ElementaryTypeName","src":"19140:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1373,"length":{"hexValue":"32","id":1372,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19148:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"19140:10:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"visibility":"internal"},{"constant":false,"id":1376,"mutability":"mutable","name":"invZ","nameLocation":"19174:4:10","nodeType":"VariableDeclaration","scope":1436,"src":"19166:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1375,"name":"uint256","nodeType":"ElementaryTypeName","src":"19166:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"19108:74:10"},"returnParameters":{"id":1382,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1381,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1436,"src":"19206:17:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2]"},"typeName":{"baseType":{"id":1378,"name":"uint256","nodeType":"ElementaryTypeName","src":"19206:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1380,"length":{"hexValue":"32","id":1379,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19214:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"19206:10:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"visibility":"internal"}],"src":"19205:19:10"},"scope":1828,"src":"19087:579:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1522,"nodeType":"Block","src":"19943:1056:10","statements":[{"id":1521,"nodeType":"UncheckedBlock","src":"20013:982:10","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1457,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1452,"name":"lcWitness","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1446,"src":"20092:9:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1455,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20113:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1454,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"20105:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1453,"name":"address","nodeType":"ElementaryTypeName","src":"20105:7:10","typeDescriptions":{}}},"id":1456,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20105:10:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"20092:23:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"626164207769746e657373","id":1458,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"20117:13:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_7fcbfa9df9f83be5218dd62480bcb5cdae56a970e549b88ff2403f5fcded9211","typeString":"literal_string \"bad witness\""},"value":"bad witness"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7fcbfa9df9f83be5218dd62480bcb5cdae56a970e549b88ff2403f5fcded9211","typeString":"literal_string \"bad witness\""}],"id":1451,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"20084:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1459,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20084:47:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1460,"nodeType":"ExpressionStatement","src":"20084:47:10"},{"assignments":[1462],"declarations":[{"constant":false,"id":1462,"mutability":"mutable","name":"v","nameLocation":"20145:1:10","nodeType":"VariableDeclaration","scope":1521,"src":"20139:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1461,"name":"uint8","nodeType":"ElementaryTypeName","src":"20139:5:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":1474,"initialValue":{"condition":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1469,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1463,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1442,"src":"20150:1:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"id":1465,"indexExpression":{"hexValue":"31","id":1464,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20152:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"20150:4:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"32","id":1466,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20157:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"20150:8:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1468,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20162:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"20150:13:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":1470,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"20149:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"3238","id":1472,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20172:2:10","typeDescriptions":{"typeIdentifier":"t_rational_28_by_1","typeString":"int_const 28"},"value":"28"},"id":1473,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"20149:25:10","trueExpression":{"hexValue":"3237","id":1471,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20167:2:10","typeDescriptions":{"typeIdentifier":"t_rational_27_by_1","typeString":"int_const 27"},"value":"27"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"20139:35:10"},{"assignments":[1476],"declarations":[{"constant":false,"id":1476,"mutability":"mutable","name":"pseudoHash","nameLocation":"20306:10:10","nodeType":"VariableDeclaration","scope":1521,"src":"20298:18:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1475,"name":"bytes32","nodeType":"ElementaryTypeName","src":"20298:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1489,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1487,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1479,"name":"GROUP_ORDER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":715,"src":"20327:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"arguments":[{"baseExpression":{"id":1481,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1442,"src":"20348:1:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"id":1483,"indexExpression":{"hexValue":"30","id":1482,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20350:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"20348:4:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1484,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1444,"src":"20354:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1485,"name":"GROUP_ORDER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":715,"src":"20357:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1480,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"20341:6:10","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1486,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20341:28:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"20327:42:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1478,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"20319:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1477,"name":"bytes32","nodeType":"ElementaryTypeName","src":"20319:7:10","typeDescriptions":{}}},"id":1488,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20319:51:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"20298:72:10"},{"assignments":[1491],"declarations":[{"constant":false,"id":1491,"mutability":"mutable","name":"pseudoSignature","nameLocation":"20397:15:10","nodeType":"VariableDeclaration","scope":1521,"src":"20389:23:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1490,"name":"bytes32","nodeType":"ElementaryTypeName","src":"20389:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1502,"initialValue":{"arguments":[{"arguments":[{"id":1495,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1438,"src":"20430:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"baseExpression":{"id":1496,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1442,"src":"20433:1:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"id":1498,"indexExpression":{"hexValue":"30","id":1497,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20435:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"20433:4:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1499,"name":"GROUP_ORDER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":715,"src":"20439:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1494,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"20423:6:10","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1500,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20423:28:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1493,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"20415:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1492,"name":"bytes32","nodeType":"ElementaryTypeName","src":"20415:7:10","typeDescriptions":{}}},"id":1501,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20415:37:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"20389:63:10"},{"assignments":[1504],"declarations":[{"constant":false,"id":1504,"mutability":"mutable","name":"computed","nameLocation":"20885:8:10","nodeType":"VariableDeclaration","scope":1521,"src":"20877:16:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1503,"name":"address","nodeType":"ElementaryTypeName","src":"20877:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1516,"initialValue":{"arguments":[{"id":1506,"name":"pseudoHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1476,"src":"20906:10:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1507,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1462,"src":"20918:1:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"arguments":[{"baseExpression":{"id":1510,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1442,"src":"20929:1:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"id":1512,"indexExpression":{"hexValue":"30","id":1511,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20931:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"20929:4:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1509,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"20921:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1508,"name":"bytes32","nodeType":"ElementaryTypeName","src":"20921:7:10","typeDescriptions":{}}},"id":1513,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20921:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1514,"name":"pseudoSignature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1491,"src":"20936:15:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1505,"name":"ecrecover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-6,"src":"20896:9:10","typeDescriptions":{"typeIdentifier":"t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":1515,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20896:56:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"20877:75:10"},{"expression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1519,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1517,"name":"computed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1504,"src":"20967:8:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1518,"name":"lcWitness","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1446,"src":"20979:9:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"20967:21:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1450,"id":1520,"nodeType":"Return","src":"20960:28:10"}]}]},"id":1523,"implemented":true,"kind":"function","modifiers":[],"name":"_verifyLinearCombinationWithGenerator","nameLocation":"19794:37:10","nodeType":"FunctionDefinition","parameters":{"id":1447,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1438,"mutability":"mutable","name":"c","nameLocation":"19845:1:10","nodeType":"VariableDeclaration","scope":1523,"src":"19837:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1437,"name":"uint256","nodeType":"ElementaryTypeName","src":"19837:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1442,"mutability":"mutable","name":"p","nameLocation":"19870:1:10","nodeType":"VariableDeclaration","scope":1523,"src":"19852:19:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2]"},"typeName":{"baseType":{"id":1439,"name":"uint256","nodeType":"ElementaryTypeName","src":"19852:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1441,"length":{"hexValue":"32","id":1440,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19860:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"19852:10:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"visibility":"internal"},{"constant":false,"id":1444,"mutability":"mutable","name":"s","nameLocation":"19885:1:10","nodeType":"VariableDeclaration","scope":1523,"src":"19877:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1443,"name":"uint256","nodeType":"ElementaryTypeName","src":"19877:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1446,"mutability":"mutable","name":"lcWitness","nameLocation":"19900:9:10","nodeType":"VariableDeclaration","scope":1523,"src":"19892:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1445,"name":"address","nodeType":"ElementaryTypeName","src":"19892:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"19831:82:10"},"returnParameters":{"id":1450,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1449,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1523,"src":"19937:4:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1448,"name":"bool","nodeType":"ElementaryTypeName","src":"19937:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"19936:6:10"},"scope":1828,"src":"19785:1214:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1594,"nodeType":"Block","src":"21725:556:10","statements":[{"id":1593,"nodeType":"UncheckedBlock","src":"21731:546:10","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1565,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1557,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1553,"name":"cp1Witness","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1533,"src":"21864:10:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"id":1555,"indexExpression":{"hexValue":"30","id":1554,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21875:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"21864:13:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":1556,"name":"FIELD_SIZE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":718,"src":"21880:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"21864:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1558,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"21863:28:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1563,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1559,"name":"sp2Witness","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1543,"src":"21896:10:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"id":1561,"indexExpression":{"hexValue":"30","id":1560,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21907:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"21896:13:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":1562,"name":"FIELD_SIZE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":718,"src":"21912:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"21896:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1564,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"21895:28:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"21863:60:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"706f696e747320696e2073756d206d7573742062652064697374696e6374","id":1566,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"21925:32:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_2ce93c410880bb13bca91831655ee36bc7ab052e7c8cb24dd914165b1030eeca","typeString":"literal_string \"points in sum must be distinct\""},"value":"points in sum must be distinct"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2ce93c410880bb13bca91831655ee36bc7ab052e7c8cb24dd914165b1030eeca","typeString":"literal_string \"points in sum must be distinct\""}],"id":1552,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"21855:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1567,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21855:103:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1568,"nodeType":"ExpressionStatement","src":"21855:103:10"},{"expression":{"arguments":[{"arguments":[{"id":1571,"name":"p1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1529,"src":"22040:2:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},{"id":1572,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1525,"src":"22044:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1573,"name":"cp1Witness","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1533,"src":"22047:10:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}],"id":1570,"name":"_ecmulVerify","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1116,"src":"22027:12:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_uint256_$2_memory_ptr_$_t_uint256_$_t_array$_t_uint256_$2_memory_ptr_$returns$_t_bool_$","typeString":"function (uint256[2] memory,uint256,uint256[2] memory) pure returns (bool)"}},"id":1574,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22027:31:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4669727374206d756c20636865636b206661696c6564","id":1575,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"22060:24:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_d9cf4c09fcc6ead19e539ee3210816df98f1219b8b47e830620ffd543bfea51f","typeString":"literal_string \"First mul check failed\""},"value":"First mul check failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d9cf4c09fcc6ead19e539ee3210816df98f1219b8b47e830620ffd543bfea51f","typeString":"literal_string \"First mul check failed\""}],"id":1569,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"22019:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1576,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22019:66:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1577,"nodeType":"ExpressionStatement","src":"22019:66:10"},{"expression":{"arguments":[{"arguments":[{"id":1580,"name":"p2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1539,"src":"22167:2:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},{"id":1581,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1535,"src":"22171:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1582,"name":"sp2Witness","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1543,"src":"22174:10:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}],"id":1579,"name":"_ecmulVerify","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1116,"src":"22154:12:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_uint256_$2_memory_ptr_$_t_uint256_$_t_array$_t_uint256_$2_memory_ptr_$returns$_t_bool_$","typeString":"function (uint256[2] memory,uint256,uint256[2] memory) pure returns (bool)"}},"id":1583,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22154:31:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5365636f6e64206d756c20636865636b206661696c6564","id":1584,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"22187:25:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_13447e9fa8630e4bb2fa50f1493aa790167933f55263568ac4ad74cb4d138234","typeString":"literal_string \"Second mul check failed\""},"value":"Second mul check failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_13447e9fa8630e4bb2fa50f1493aa790167933f55263568ac4ad74cb4d138234","typeString":"literal_string \"Second mul check failed\""}],"id":1578,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"22146:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1585,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22146:67:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1586,"nodeType":"ExpressionStatement","src":"22146:67:10"},{"expression":{"arguments":[{"id":1588,"name":"cp1Witness","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1533,"src":"22241:10:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},{"id":1589,"name":"sp2Witness","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1543,"src":"22253:10:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},{"id":1590,"name":"zInv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1545,"src":"22265:4:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"},{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1587,"name":"_affineECAdd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1436,"src":"22228:12:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_uint256_$2_memory_ptr_$_t_array$_t_uint256_$2_memory_ptr_$_t_uint256_$returns$_t_array$_t_uint256_$2_memory_ptr_$","typeString":"function (uint256[2] memory,uint256[2] memory,uint256) pure returns (uint256[2] memory)"}},"id":1591,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22228:42:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"functionReturnParameters":1551,"id":1592,"nodeType":"Return","src":"22221:49:10"}]}]},"id":1595,"implemented":true,"kind":"function","modifiers":[],"name":"_linearCombination","nameLocation":"21492:18:10","nodeType":"FunctionDefinition","parameters":{"id":1546,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1525,"mutability":"mutable","name":"c","nameLocation":"21524:1:10","nodeType":"VariableDeclaration","scope":1595,"src":"21516:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1524,"name":"uint256","nodeType":"ElementaryTypeName","src":"21516:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1529,"mutability":"mutable","name":"p1","nameLocation":"21549:2:10","nodeType":"VariableDeclaration","scope":1595,"src":"21531:20:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2]"},"typeName":{"baseType":{"id":1526,"name":"uint256","nodeType":"ElementaryTypeName","src":"21531:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1528,"length":{"hexValue":"32","id":1527,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21539:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"21531:10:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"visibility":"internal"},{"constant":false,"id":1533,"mutability":"mutable","name":"cp1Witness","nameLocation":"21575:10:10","nodeType":"VariableDeclaration","scope":1595,"src":"21557:28:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2]"},"typeName":{"baseType":{"id":1530,"name":"uint256","nodeType":"ElementaryTypeName","src":"21557:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1532,"length":{"hexValue":"32","id":1531,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21565:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"21557:10:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"visibility":"internal"},{"constant":false,"id":1535,"mutability":"mutable","name":"s","nameLocation":"21599:1:10","nodeType":"VariableDeclaration","scope":1595,"src":"21591:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1534,"name":"uint256","nodeType":"ElementaryTypeName","src":"21591:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1539,"mutability":"mutable","name":"p2","nameLocation":"21624:2:10","nodeType":"VariableDeclaration","scope":1595,"src":"21606:20:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2]"},"typeName":{"baseType":{"id":1536,"name":"uint256","nodeType":"ElementaryTypeName","src":"21606:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1538,"length":{"hexValue":"32","id":1537,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21614:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"21606:10:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"visibility":"internal"},{"constant":false,"id":1543,"mutability":"mutable","name":"sp2Witness","nameLocation":"21650:10:10","nodeType":"VariableDeclaration","scope":1595,"src":"21632:28:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2]"},"typeName":{"baseType":{"id":1540,"name":"uint256","nodeType":"ElementaryTypeName","src":"21632:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1542,"length":{"hexValue":"32","id":1541,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21640:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"21632:10:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"visibility":"internal"},{"constant":false,"id":1545,"mutability":"mutable","name":"zInv","nameLocation":"21674:4:10","nodeType":"VariableDeclaration","scope":1595,"src":"21666:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1544,"name":"uint256","nodeType":"ElementaryTypeName","src":"21666:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"21510:172:10"},"returnParameters":{"id":1551,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1550,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1595,"src":"21706:17:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2]"},"typeName":{"baseType":{"id":1547,"name":"uint256","nodeType":"ElementaryTypeName","src":"21706:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1549,"length":{"hexValue":"32","id":1548,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21714:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"21706:10:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"visibility":"internal"}],"src":"21705:19:10"},"scope":1828,"src":"21483:798:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"constant":true,"id":1598,"mutability":"constant","name":"SCALAR_FROM_CURVE_POINTS_HASH_PREFIX","nameLocation":"22440:36:10","nodeType":"VariableDeclaration","scope":1828,"src":"22414:66:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1596,"name":"uint256","nodeType":"ElementaryTypeName","src":"22414:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"32","id":1597,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22479:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"internal"},{"body":{"id":1636,"nodeType":"Block","src":"23399:122:10","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":1626,"name":"SCALAR_FROM_CURVE_POINTS_HASH_PREFIX","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1598,"src":"23447:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1627,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1602,"src":"23485:4:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},{"id":1628,"name":"pk","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1606,"src":"23491:2:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},{"id":1629,"name":"gamma","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1610,"src":"23495:5:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},{"id":1630,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1616,"src":"23502:1:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},{"id":1631,"name":"uWitness","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1612,"src":"23505:8:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"},{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"},{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"},{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1624,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"23430:3:10","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1625,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"23434:12:10","memberName":"encodePacked","nodeType":"MemberAccess","src":"23430:16:10","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1632,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23430:84:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1623,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"23420:9:10","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1633,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23420:95:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1622,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"23412:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1621,"name":"uint256","nodeType":"ElementaryTypeName","src":"23412:7:10","typeDescriptions":{}}},"id":1634,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23412:104:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1620,"id":1635,"nodeType":"Return","src":"23405:111:10"}]},"id":1637,"implemented":true,"kind":"function","modifiers":[],"name":"_scalarFromCurvePoints","nameLocation":"23208:22:10","nodeType":"FunctionDefinition","parameters":{"id":1617,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1602,"mutability":"mutable","name":"hash","nameLocation":"23254:4:10","nodeType":"VariableDeclaration","scope":1637,"src":"23236:22:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2]"},"typeName":{"baseType":{"id":1599,"name":"uint256","nodeType":"ElementaryTypeName","src":"23236:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1601,"length":{"hexValue":"32","id":1600,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23244:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"23236:10:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"visibility":"internal"},{"constant":false,"id":1606,"mutability":"mutable","name":"pk","nameLocation":"23282:2:10","nodeType":"VariableDeclaration","scope":1637,"src":"23264:20:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2]"},"typeName":{"baseType":{"id":1603,"name":"uint256","nodeType":"ElementaryTypeName","src":"23264:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1605,"length":{"hexValue":"32","id":1604,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23272:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"23264:10:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"visibility":"internal"},{"constant":false,"id":1610,"mutability":"mutable","name":"gamma","nameLocation":"23308:5:10","nodeType":"VariableDeclaration","scope":1637,"src":"23290:23:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2]"},"typeName":{"baseType":{"id":1607,"name":"uint256","nodeType":"ElementaryTypeName","src":"23290:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1609,"length":{"hexValue":"32","id":1608,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23298:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"23290:10:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"visibility":"internal"},{"constant":false,"id":1612,"mutability":"mutable","name":"uWitness","nameLocation":"23327:8:10","nodeType":"VariableDeclaration","scope":1637,"src":"23319:16:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1611,"name":"address","nodeType":"ElementaryTypeName","src":"23319:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1616,"mutability":"mutable","name":"v","nameLocation":"23359:1:10","nodeType":"VariableDeclaration","scope":1637,"src":"23341:19:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2]"},"typeName":{"baseType":{"id":1613,"name":"uint256","nodeType":"ElementaryTypeName","src":"23341:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1615,"length":{"hexValue":"32","id":1614,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23349:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"23341:10:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"visibility":"internal"}],"src":"23230:134:10"},"returnParameters":{"id":1620,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1619,"mutability":"mutable","name":"s","nameLocation":"23396:1:10","nodeType":"VariableDeclaration","scope":1637,"src":"23388:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1618,"name":"uint256","nodeType":"ElementaryTypeName","src":"23388:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"23387:11:10"},"scope":1828,"src":"23199:322:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1749,"nodeType":"Block","src":"24364:1599:10","statements":[{"id":1748,"nodeType":"UncheckedBlock","src":"24370:1589:10","statements":[{"expression":{"arguments":[{"arguments":[{"id":1668,"name":"pk","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1641,"src":"24460:2:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}],"id":1667,"name":"_isOnCurve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":889,"src":"24449:10:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_uint256_$2_memory_ptr_$returns$_t_bool_$","typeString":"function (uint256[2] memory) pure returns (bool)"}},"id":1669,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24449:14:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"7075626c6963206b6579206973206e6f74206f6e206375727665","id":1670,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"24465:28:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_ae4825d6ed8aab0513e68c27d2710aa68bcf110761c187d047951a5ec2580d8c","typeString":"literal_string \"public key is not on curve\""},"value":"public key is not on curve"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ae4825d6ed8aab0513e68c27d2710aa68bcf110761c187d047951a5ec2580d8c","typeString":"literal_string \"public key is not on curve\""}],"id":1666,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"24441:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1671,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24441:53:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1672,"nodeType":"ExpressionStatement","src":"24441:53:10"},{"expression":{"arguments":[{"arguments":[{"id":1675,"name":"gamma","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1645,"src":"24574:5:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}],"id":1674,"name":"_isOnCurve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":889,"src":"24563:10:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_uint256_$2_memory_ptr_$returns$_t_bool_$","typeString":"function (uint256[2] memory) pure returns (bool)"}},"id":1676,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24563:17:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"67616d6d61206973206e6f74206f6e206375727665","id":1677,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"24582:23:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_c6038a70864418dbffbd772a49c391c3536f6b633b3f2ccbcd6a6e15dbadd34c","typeString":"literal_string \"gamma is not on curve\""},"value":"gamma is not on curve"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c6038a70864418dbffbd772a49c391c3536f6b633b3f2ccbcd6a6e15dbadd34c","typeString":"literal_string \"gamma is not on curve\""}],"id":1673,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"24555:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1678,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24555:51:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1679,"nodeType":"ExpressionStatement","src":"24555:51:10"},{"expression":{"arguments":[{"arguments":[{"id":1682,"name":"cGammaWitness","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1657,"src":"24686:13:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}],"id":1681,"name":"_isOnCurve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":889,"src":"24675:10:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_uint256_$2_memory_ptr_$returns$_t_bool_$","typeString":"function (uint256[2] memory) pure returns (bool)"}},"id":1683,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24675:25:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"6347616d6d615769746e657373206973206e6f74206f6e206375727665","id":1684,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"24702:31:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_9f90959a5b25997fe56cdafc2f72d300e298468f5ac5e847db7890be22108d2b","typeString":"literal_string \"cGammaWitness is not on curve\""},"value":"cGammaWitness is not on curve"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9f90959a5b25997fe56cdafc2f72d300e298468f5ac5e847db7890be22108d2b","typeString":"literal_string \"cGammaWitness is not on curve\""}],"id":1680,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"24667:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1685,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24667:67:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1686,"nodeType":"ExpressionStatement","src":"24667:67:10"},{"expression":{"arguments":[{"arguments":[{"id":1689,"name":"sHashWitness","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1661,"src":"24814:12:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}],"id":1688,"name":"_isOnCurve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":889,"src":"24803:10:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_uint256_$2_memory_ptr_$returns$_t_bool_$","typeString":"function (uint256[2] memory) pure returns (bool)"}},"id":1690,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24803:24:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"73486173685769746e657373206973206e6f74206f6e206375727665","id":1691,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"24829:30:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_ff425c3ce65530e49c0c35a5fdd7a61b00545f1fcc6482c28903cdcf48ac624f","typeString":"literal_string \"sHashWitness is not on curve\""},"value":"sHashWitness is not on curve"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ff425c3ce65530e49c0c35a5fdd7a61b00545f1fcc6482c28903cdcf48ac624f","typeString":"literal_string \"sHashWitness is not on curve\""}],"id":1687,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"24795:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1692,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24795:65:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1693,"nodeType":"ExpressionStatement","src":"24795:65:10"},{"expression":{"arguments":[{"arguments":[{"id":1696,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1647,"src":"25345:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1697,"name":"pk","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1641,"src":"25348:2:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},{"id":1698,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1649,"src":"25352:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1699,"name":"uWitness","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1653,"src":"25355:8:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1695,"name":"_verifyLinearCombinationWithGenerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1523,"src":"25307:37:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_array$_t_uint256_$2_memory_ptr_$_t_uint256_$_t_address_$returns$_t_bool_$","typeString":"function (uint256,uint256[2] memory,uint256,address) pure returns (bool)"}},"id":1700,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25307:57:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"6164647228632a706b2b732a6729213d5f755769746e657373","id":1701,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"25366:27:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_897d9ab785e875f3b83c51a39f09c2f6a852e06c26e3faf90359e5ad589f8cf1","typeString":"literal_string \"addr(c*pk+s*g)!=_uWitness\""},"value":"addr(c*pk+s*g)!=_uWitness"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_897d9ab785e875f3b83c51a39f09c2f6a852e06c26e3faf90359e5ad589f8cf1","typeString":"literal_string \"addr(c*pk+s*g)!=_uWitness\""}],"id":1694,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"25299:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1702,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25299:95:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1703,"nodeType":"ExpressionStatement","src":"25299:95:10"},{"assignments":[1709],"declarations":[{"constant":false,"id":1709,"mutability":"mutable","name":"hash","nameLocation":"25507:4:10","nodeType":"VariableDeclaration","scope":1748,"src":"25489:22:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2]"},"typeName":{"baseType":{"id":1707,"name":"uint256","nodeType":"ElementaryTypeName","src":"25489:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1708,"length":{"hexValue":"32","id":1706,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25497:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"25489:10:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"visibility":"internal"}],"id":1714,"initialValue":{"arguments":[{"id":1711,"name":"pk","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1641,"src":"25527:2:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},{"id":1712,"name":"seed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1651,"src":"25531:4:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1710,"name":"_hashToCurve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1024,"src":"25514:12:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_array$_t_uint256_$2_memory_ptr_$_t_uint256_$returns$_t_array$_t_uint256_$2_memory_ptr_$","typeString":"function (uint256[2] memory,uint256) view returns (uint256[2] memory)"}},"id":1713,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25514:22:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"nodeType":"VariableDeclarationStatement","src":"25489:47:10"},{"assignments":[1720],"declarations":[{"constant":false,"id":1720,"mutability":"mutable","name":"v","nameLocation":"25646:1:10","nodeType":"VariableDeclaration","scope":1748,"src":"25628:19:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2]"},"typeName":{"baseType":{"id":1718,"name":"uint256","nodeType":"ElementaryTypeName","src":"25628:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1719,"length":{"hexValue":"32","id":1717,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25636:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"25628:10:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"visibility":"internal"}],"id":1730,"initialValue":{"arguments":[{"id":1722,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1647,"src":"25669:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1723,"name":"gamma","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1645,"src":"25672:5:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},{"id":1724,"name":"cGammaWitness","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1657,"src":"25679:13:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},{"id":1725,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1649,"src":"25694:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1726,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1709,"src":"25697:4:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},{"id":1727,"name":"sHashWitness","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1661,"src":"25703:12:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},{"id":1728,"name":"zInv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1663,"src":"25717:4:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"},{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"},{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1721,"name":"_linearCombination","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1595,"src":"25650:18:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_array$_t_uint256_$2_memory_ptr_$_t_array$_t_uint256_$2_memory_ptr_$_t_uint256_$_t_array$_t_uint256_$2_memory_ptr_$_t_array$_t_uint256_$2_memory_ptr_$_t_uint256_$returns$_t_array$_t_uint256_$2_memory_ptr_$","typeString":"function (uint256,uint256[2] memory,uint256[2] memory,uint256,uint256[2] memory,uint256[2] memory,uint256) pure returns (uint256[2] memory)"}},"id":1729,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25650:72:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"nodeType":"VariableDeclarationStatement","src":"25628:94:10"},{"assignments":[1732],"declarations":[{"constant":false,"id":1732,"mutability":"mutable","name":"derivedC","nameLocation":"25789:8:10","nodeType":"VariableDeclaration","scope":1748,"src":"25781:16:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1731,"name":"uint256","nodeType":"ElementaryTypeName","src":"25781:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1740,"initialValue":{"arguments":[{"id":1734,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1709,"src":"25823:4:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},{"id":1735,"name":"pk","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1641,"src":"25829:2:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},{"id":1736,"name":"gamma","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1645,"src":"25833:5:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},{"id":1737,"name":"uWitness","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1653,"src":"25840:8:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1738,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1720,"src":"25850:1:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"},{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"},{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}],"id":1733,"name":"_scalarFromCurvePoints","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1637,"src":"25800:22:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_uint256_$2_memory_ptr_$_t_array$_t_uint256_$2_memory_ptr_$_t_array$_t_uint256_$2_memory_ptr_$_t_address_$_t_array$_t_uint256_$2_memory_ptr_$returns$_t_uint256_$","typeString":"function (uint256[2] memory,uint256[2] memory,uint256[2] memory,address,uint256[2] memory) pure returns (uint256)"}},"id":1739,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25800:52:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"25781:71:10"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1744,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1742,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1647,"src":"25921:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1743,"name":"derivedC","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1732,"src":"25926:8:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"25921:13:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"696e76616c69642070726f6f66","id":1745,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"25936:15:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_cfa179d50ad7851ac140a84fb212f48699dbd00170b3afe087b0d09f632d1624","typeString":"literal_string \"invalid proof\""},"value":"invalid proof"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cfa179d50ad7851ac140a84fb212f48699dbd00170b3afe087b0d09f632d1624","typeString":"literal_string \"invalid proof\""}],"id":1741,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"25913:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1746,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25913:39:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1747,"nodeType":"ExpressionStatement","src":"25913:39:10"}]}]},"id":1750,"implemented":true,"kind":"function","modifiers":[],"name":"_verifyVRFProof","nameLocation":"24114:15:10","nodeType":"FunctionDefinition","parameters":{"id":1664,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1641,"mutability":"mutable","name":"pk","nameLocation":"24153:2:10","nodeType":"VariableDeclaration","scope":1750,"src":"24135:20:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2]"},"typeName":{"baseType":{"id":1638,"name":"uint256","nodeType":"ElementaryTypeName","src":"24135:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1640,"length":{"hexValue":"32","id":1639,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24143:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"24135:10:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"visibility":"internal"},{"constant":false,"id":1645,"mutability":"mutable","name":"gamma","nameLocation":"24179:5:10","nodeType":"VariableDeclaration","scope":1750,"src":"24161:23:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2]"},"typeName":{"baseType":{"id":1642,"name":"uint256","nodeType":"ElementaryTypeName","src":"24161:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1644,"length":{"hexValue":"32","id":1643,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24169:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"24161:10:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"visibility":"internal"},{"constant":false,"id":1647,"mutability":"mutable","name":"c","nameLocation":"24198:1:10","nodeType":"VariableDeclaration","scope":1750,"src":"24190:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1646,"name":"uint256","nodeType":"ElementaryTypeName","src":"24190:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1649,"mutability":"mutable","name":"s","nameLocation":"24213:1:10","nodeType":"VariableDeclaration","scope":1750,"src":"24205:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1648,"name":"uint256","nodeType":"ElementaryTypeName","src":"24205:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1651,"mutability":"mutable","name":"seed","nameLocation":"24228:4:10","nodeType":"VariableDeclaration","scope":1750,"src":"24220:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1650,"name":"uint256","nodeType":"ElementaryTypeName","src":"24220:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1653,"mutability":"mutable","name":"uWitness","nameLocation":"24246:8:10","nodeType":"VariableDeclaration","scope":1750,"src":"24238:16:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1652,"name":"address","nodeType":"ElementaryTypeName","src":"24238:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1657,"mutability":"mutable","name":"cGammaWitness","nameLocation":"24278:13:10","nodeType":"VariableDeclaration","scope":1750,"src":"24260:31:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2]"},"typeName":{"baseType":{"id":1654,"name":"uint256","nodeType":"ElementaryTypeName","src":"24260:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1656,"length":{"hexValue":"32","id":1655,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24268:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"24260:10:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"visibility":"internal"},{"constant":false,"id":1661,"mutability":"mutable","name":"sHashWitness","nameLocation":"24315:12:10","nodeType":"VariableDeclaration","scope":1750,"src":"24297:30:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2]"},"typeName":{"baseType":{"id":1658,"name":"uint256","nodeType":"ElementaryTypeName","src":"24297:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1660,"length":{"hexValue":"32","id":1659,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24305:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"24297:10:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"visibility":"internal"},{"constant":false,"id":1663,"mutability":"mutable","name":"zInv","nameLocation":"24341:4:10","nodeType":"VariableDeclaration","scope":1750,"src":"24333:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1662,"name":"uint256","nodeType":"ElementaryTypeName","src":"24333:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"24129:220:10"},"returnParameters":{"id":1665,"nodeType":"ParameterList","parameters":[],"src":"24364:0:10"},"scope":1828,"src":"24105:1858:10","stateMutability":"view","virtual":false,"visibility":"internal"},{"constant":true,"id":1753,"mutability":"constant","name":"VRF_RANDOM_OUTPUT_HASH_PREFIX","nameLocation":"26119:29:10","nodeType":"VariableDeclaration","scope":1828,"src":"26093:59:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1751,"name":"uint256","nodeType":"ElementaryTypeName","src":"26093:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"33","id":1752,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26151:1:10","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"visibility":"internal"},{"canonicalName":"VRF.Proof","id":1780,"members":[{"constant":false,"id":1757,"mutability":"mutable","name":"pk","nameLocation":"26187:2:10","nodeType":"VariableDeclaration","scope":1780,"src":"26176:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"},"typeName":{"baseType":{"id":1754,"name":"uint256","nodeType":"ElementaryTypeName","src":"26176:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1756,"length":{"hexValue":"32","id":1755,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26184:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"26176:10:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"visibility":"internal"},{"constant":false,"id":1761,"mutability":"mutable","name":"gamma","nameLocation":"26206:5:10","nodeType":"VariableDeclaration","scope":1780,"src":"26195:16:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"},"typeName":{"baseType":{"id":1758,"name":"uint256","nodeType":"ElementaryTypeName","src":"26195:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1760,"length":{"hexValue":"32","id":1759,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26203:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"26195:10:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"visibility":"internal"},{"constant":false,"id":1763,"mutability":"mutable","name":"c","nameLocation":"26225:1:10","nodeType":"VariableDeclaration","scope":1780,"src":"26217:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1762,"name":"uint256","nodeType":"ElementaryTypeName","src":"26217:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1765,"mutability":"mutable","name":"s","nameLocation":"26240:1:10","nodeType":"VariableDeclaration","scope":1780,"src":"26232:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1764,"name":"uint256","nodeType":"ElementaryTypeName","src":"26232:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1767,"mutability":"mutable","name":"seed","nameLocation":"26255:4:10","nodeType":"VariableDeclaration","scope":1780,"src":"26247:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1766,"name":"uint256","nodeType":"ElementaryTypeName","src":"26247:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1769,"mutability":"mutable","name":"uWitness","nameLocation":"26273:8:10","nodeType":"VariableDeclaration","scope":1780,"src":"26265:16:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1768,"name":"address","nodeType":"ElementaryTypeName","src":"26265:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1773,"mutability":"mutable","name":"cGammaWitness","nameLocation":"26298:13:10","nodeType":"VariableDeclaration","scope":1780,"src":"26287:24:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"},"typeName":{"baseType":{"id":1770,"name":"uint256","nodeType":"ElementaryTypeName","src":"26287:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1772,"length":{"hexValue":"32","id":1771,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26295:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"26287:10:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"visibility":"internal"},{"constant":false,"id":1777,"mutability":"mutable","name":"sHashWitness","nameLocation":"26328:12:10","nodeType":"VariableDeclaration","scope":1780,"src":"26317:23:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"},"typeName":{"baseType":{"id":1774,"name":"uint256","nodeType":"ElementaryTypeName","src":"26317:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1776,"length":{"hexValue":"32","id":1775,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26325:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"26317:10:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"visibility":"internal"},{"constant":false,"id":1779,"mutability":"mutable","name":"zInv","nameLocation":"26354:4:10","nodeType":"VariableDeclaration","scope":1780,"src":"26346:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1778,"name":"uint256","nodeType":"ElementaryTypeName","src":"26346:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Proof","nameLocation":"26164:5:10","nodeType":"StructDefinition","scope":1828,"src":"26157:206:10","visibility":"public"},{"body":{"id":1826,"nodeType":"Block","src":"26941:310:10","statements":[{"expression":{"arguments":[{"expression":{"id":1791,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1783,"src":"26970:5:10","typeDescriptions":{"typeIdentifier":"t_struct$_Proof_$1780_memory_ptr","typeString":"struct VRF.Proof memory"}},"id":1792,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"26976:2:10","memberName":"pk","nodeType":"MemberAccess","referencedDeclaration":1757,"src":"26970:8:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},{"expression":{"id":1793,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1783,"src":"26986:5:10","typeDescriptions":{"typeIdentifier":"t_struct$_Proof_$1780_memory_ptr","typeString":"struct VRF.Proof memory"}},"id":1794,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"26992:5:10","memberName":"gamma","nodeType":"MemberAccess","referencedDeclaration":1761,"src":"26986:11:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},{"expression":{"id":1795,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1783,"src":"27005:5:10","typeDescriptions":{"typeIdentifier":"t_struct$_Proof_$1780_memory_ptr","typeString":"struct VRF.Proof memory"}},"id":1796,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"27011:1:10","memberName":"c","nodeType":"MemberAccess","referencedDeclaration":1763,"src":"27005:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":1797,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1783,"src":"27020:5:10","typeDescriptions":{"typeIdentifier":"t_struct$_Proof_$1780_memory_ptr","typeString":"struct VRF.Proof memory"}},"id":1798,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"27026:1:10","memberName":"s","nodeType":"MemberAccess","referencedDeclaration":1765,"src":"27020:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1799,"name":"seed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1785,"src":"27035:4:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":1800,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1783,"src":"27047:5:10","typeDescriptions":{"typeIdentifier":"t_struct$_Proof_$1780_memory_ptr","typeString":"struct VRF.Proof memory"}},"id":1801,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"27053:8:10","memberName":"uWitness","nodeType":"MemberAccess","referencedDeclaration":1769,"src":"27047:14:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":1802,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1783,"src":"27069:5:10","typeDescriptions":{"typeIdentifier":"t_struct$_Proof_$1780_memory_ptr","typeString":"struct VRF.Proof memory"}},"id":1803,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"27075:13:10","memberName":"cGammaWitness","nodeType":"MemberAccess","referencedDeclaration":1773,"src":"27069:19:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},{"expression":{"id":1804,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1783,"src":"27096:5:10","typeDescriptions":{"typeIdentifier":"t_struct$_Proof_$1780_memory_ptr","typeString":"struct VRF.Proof memory"}},"id":1805,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"27102:12:10","memberName":"sHashWitness","nodeType":"MemberAccess","referencedDeclaration":1777,"src":"27096:18:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},{"expression":{"id":1806,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1783,"src":"27122:5:10","typeDescriptions":{"typeIdentifier":"t_struct$_Proof_$1780_memory_ptr","typeString":"struct VRF.Proof memory"}},"id":1807,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"27128:4:10","memberName":"zInv","nodeType":"MemberAccess","referencedDeclaration":1779,"src":"27122:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"},{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"},{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1790,"name":"_verifyVRFProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1750,"src":"26947:15:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_array$_t_uint256_$2_memory_ptr_$_t_array$_t_uint256_$2_memory_ptr_$_t_uint256_$_t_uint256_$_t_uint256_$_t_address_$_t_array$_t_uint256_$2_memory_ptr_$_t_array$_t_uint256_$2_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (uint256[2] memory,uint256[2] memory,uint256,uint256,uint256,address,uint256[2] memory,uint256[2] memory,uint256) view"}},"id":1808,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26947:191:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1809,"nodeType":"ExpressionStatement","src":"26947:191:10"},{"expression":{"id":1822,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1810,"name":"output","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1788,"src":"27144:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"arguments":[{"id":1816,"name":"VRF_RANDOM_OUTPUT_HASH_PREFIX","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1753,"src":"27182:29:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":1817,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1783,"src":"27213:5:10","typeDescriptions":{"typeIdentifier":"t_struct$_Proof_$1780_memory_ptr","typeString":"struct VRF.Proof memory"}},"id":1818,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"27219:5:10","memberName":"gamma","nodeType":"MemberAccess","referencedDeclaration":1761,"src":"27213:11:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}],"expression":{"id":1814,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"27171:3:10","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1815,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"27175:6:10","memberName":"encode","nodeType":"MemberAccess","src":"27171:10:10","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1819,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27171:54:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1813,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"27161:9:10","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1820,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27161:65:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1812,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"27153:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1811,"name":"uint256","nodeType":"ElementaryTypeName","src":"27153:7:10","typeDescriptions":{}}},"id":1821,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27153:74:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"27144:83:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1823,"nodeType":"ExpressionStatement","src":"27144:83:10"},{"expression":{"id":1824,"name":"output","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1788,"src":"27240:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1789,"id":1825,"nodeType":"Return","src":"27233:13:10"}]},"id":1827,"implemented":true,"kind":"function","modifiers":[],"name":"_randomValueFromVRFProof","nameLocation":"26843:24:10","nodeType":"FunctionDefinition","parameters":{"id":1786,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1783,"mutability":"mutable","name":"proof","nameLocation":"26881:5:10","nodeType":"VariableDeclaration","scope":1827,"src":"26868:18:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Proof_$1780_memory_ptr","typeString":"struct VRF.Proof"},"typeName":{"id":1782,"nodeType":"UserDefinedTypeName","pathNode":{"id":1781,"name":"Proof","nameLocations":["26868:5:10"],"nodeType":"IdentifierPath","referencedDeclaration":1780,"src":"26868:5:10"},"referencedDeclaration":1780,"src":"26868:5:10","typeDescriptions":{"typeIdentifier":"t_struct$_Proof_$1780_storage_ptr","typeString":"struct VRF.Proof"}},"visibility":"internal"},{"constant":false,"id":1785,"mutability":"mutable","name":"seed","nameLocation":"26896:4:10","nodeType":"VariableDeclaration","scope":1827,"src":"26888:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1784,"name":"uint256","nodeType":"ElementaryTypeName","src":"26888:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"26867:34:10"},"returnParameters":{"id":1789,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1788,"mutability":"mutable","name":"output","nameLocation":"26933:6:10","nodeType":"VariableDeclaration","scope":1827,"src":"26925:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1787,"name":"uint256","nodeType":"ElementaryTypeName","src":"26925:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"26924:16:10"},"scope":1828,"src":"26834:417:10","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":1829,"src":"7182:20071:10","usedErrors":[],"usedEvents":[]}],"src":"32:27222:10"},"id":10},"@chainlink/contracts/src/v0.8/vrf/interfaces/BlockhashStoreInterface.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/vrf/interfaces/BlockhashStoreInterface.sol","exportedSymbols":{"BlockhashStoreInterface":[1838]},"id":1839,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1830,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:11"},{"abstract":false,"baseContracts":[],"canonicalName":"BlockhashStoreInterface","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":1838,"linearizedBaseContracts":[1838],"name":"BlockhashStoreInterface","nameLocation":"67:23:11","nodeType":"ContractDefinition","nodes":[{"functionSelector":"e9413d38","id":1837,"implemented":false,"kind":"function","modifiers":[],"name":"getBlockhash","nameLocation":"104:12:11","nodeType":"FunctionDefinition","parameters":{"id":1833,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1832,"mutability":"mutable","name":"number","nameLocation":"125:6:11","nodeType":"VariableDeclaration","scope":1837,"src":"117:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1831,"name":"uint256","nodeType":"ElementaryTypeName","src":"117:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"116:16:11"},"returnParameters":{"id":1836,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1835,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1837,"src":"156:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1834,"name":"bytes32","nodeType":"ElementaryTypeName","src":"156:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"155:9:11"},"scope":1838,"src":"95:70:11","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1839,"src":"57:110:11","usedErrors":[],"usedEvents":[]}],"src":"32:136:11"},"id":11},"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol","exportedSymbols":{"VRFCoordinatorV2Interface":[1934]},"id":1935,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1840,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:12"},{"abstract":false,"baseContracts":[],"canonicalName":"VRFCoordinatorV2Interface","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":1934,"linearizedBaseContracts":[1934],"name":"VRFCoordinatorV2Interface","nameLocation":"67:25:12","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1841,"nodeType":"StructuredDocumentation","src":"97:267:12","text":" @notice Get configuration relevant for making requests\n @return minimumRequestConfirmations global min for request confirmations\n @return maxGasLimit global max for request gas limit\n @return s_provingKeyHashes list of registered key hashes"},"functionSelector":"00012291","id":1851,"implemented":false,"kind":"function","modifiers":[],"name":"getRequestConfig","nameLocation":"376:16:12","nodeType":"FunctionDefinition","parameters":{"id":1842,"nodeType":"ParameterList","parameters":[],"src":"392:2:12"},"returnParameters":{"id":1850,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1844,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1851,"src":"418:6:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":1843,"name":"uint16","nodeType":"ElementaryTypeName","src":"418:6:12","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":1846,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1851,"src":"426:6:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1845,"name":"uint32","nodeType":"ElementaryTypeName","src":"426:6:12","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":1849,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1851,"src":"434:16:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1847,"name":"bytes32","nodeType":"ElementaryTypeName","src":"434:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1848,"nodeType":"ArrayTypeName","src":"434:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"417:34:12"},"scope":1934,"src":"367:85:12","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1852,"nodeType":"StructuredDocumentation","src":"456:1511:12","text":" @notice Request a set of random words.\n @param keyHash - Corresponds to a particular oracle job which uses\n that key for generating the VRF proof. Different keyHash's have different gas price\n ceilings, so you can select a specific one to bound your maximum per request cost.\n @param subId  - The ID of the VRF subscription. Must be funded\n with the minimum subscription balance required for the selected keyHash.\n @param minimumRequestConfirmations - How many blocks you'd like the\n oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n for why you may want to request more. The acceptable range is\n [minimumRequestBlockConfirmations, 200].\n @param callbackGasLimit - How much gas you'd like to receive in your\n fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n may be slightly less than this amount because of gas used calling the function\n (argument decoding etc.), so you may need to request slightly more than you expect\n to have inside fulfillRandomWords. The acceptable range is\n [0, maxGasLimit]\n @param numWords - The number of uint256 random values you'd like to receive\n in your fulfillRandomWords callback. Note these numbers are expanded in a\n secure way by the VRFCoordinator from a single random value supplied by the oracle.\n @return requestId - A unique identifier of the request. Can be used to match\n a request to a response in fulfillRandomWords."},"functionSelector":"5d3b1d30","id":1867,"implemented":false,"kind":"function","modifiers":[],"name":"requestRandomWords","nameLocation":"1979:18:12","nodeType":"FunctionDefinition","parameters":{"id":1863,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1854,"mutability":"mutable","name":"keyHash","nameLocation":"2011:7:12","nodeType":"VariableDeclaration","scope":1867,"src":"2003:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1853,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2003:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1856,"mutability":"mutable","name":"subId","nameLocation":"2031:5:12","nodeType":"VariableDeclaration","scope":1867,"src":"2024:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1855,"name":"uint64","nodeType":"ElementaryTypeName","src":"2024:6:12","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":1858,"mutability":"mutable","name":"minimumRequestConfirmations","nameLocation":"2049:27:12","nodeType":"VariableDeclaration","scope":1867,"src":"2042:34:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":1857,"name":"uint16","nodeType":"ElementaryTypeName","src":"2042:6:12","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":1860,"mutability":"mutable","name":"callbackGasLimit","nameLocation":"2089:16:12","nodeType":"VariableDeclaration","scope":1867,"src":"2082:23:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1859,"name":"uint32","nodeType":"ElementaryTypeName","src":"2082:6:12","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":1862,"mutability":"mutable","name":"numWords","nameLocation":"2118:8:12","nodeType":"VariableDeclaration","scope":1867,"src":"2111:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1861,"name":"uint32","nodeType":"ElementaryTypeName","src":"2111:6:12","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"1997:133:12"},"returnParameters":{"id":1866,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1865,"mutability":"mutable","name":"requestId","nameLocation":"2157:9:12","nodeType":"VariableDeclaration","scope":1867,"src":"2149:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1864,"name":"uint256","nodeType":"ElementaryTypeName","src":"2149:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2148:19:12"},"scope":1934,"src":"1970:198:12","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1868,"nodeType":"StructuredDocumentation","src":"2172:384:12","text":" @notice Create a VRF subscription.\n @return subId - A unique subscription id.\n @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n @dev Note to fund the subscription, use transferAndCall. For example\n @dev  LINKTOKEN.transferAndCall(\n @dev    address(COORDINATOR),\n @dev    amount,\n @dev    abi.encode(subId));"},"functionSelector":"a21a23e4","id":1873,"implemented":false,"kind":"function","modifiers":[],"name":"createSubscription","nameLocation":"2568:18:12","nodeType":"FunctionDefinition","parameters":{"id":1869,"nodeType":"ParameterList","parameters":[],"src":"2586:2:12"},"returnParameters":{"id":1872,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1871,"mutability":"mutable","name":"subId","nameLocation":"2614:5:12","nodeType":"VariableDeclaration","scope":1873,"src":"2607:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1870,"name":"uint64","nodeType":"ElementaryTypeName","src":"2607:6:12","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"2606:14:12"},"scope":1934,"src":"2559:62:12","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1874,"nodeType":"StructuredDocumentation","src":"2625:381:12","text":" @notice Get a VRF subscription.\n @param subId - ID of the subscription\n @return balance - LINK balance of the subscription in juels.\n @return reqCount - number of requests for this subscription, determines fee tier.\n @return owner - owner of the subscription.\n @return consumers - list of consumer address which are able to use this subscription."},"functionSelector":"a47c7696","id":1888,"implemented":false,"kind":"function","modifiers":[],"name":"getSubscription","nameLocation":"3018:15:12","nodeType":"FunctionDefinition","parameters":{"id":1877,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1876,"mutability":"mutable","name":"subId","nameLocation":"3046:5:12","nodeType":"VariableDeclaration","scope":1888,"src":"3039:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1875,"name":"uint64","nodeType":"ElementaryTypeName","src":"3039:6:12","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"3033:22:12"},"returnParameters":{"id":1887,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1879,"mutability":"mutable","name":"balance","nameLocation":"3086:7:12","nodeType":"VariableDeclaration","scope":1888,"src":"3079:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":1878,"name":"uint96","nodeType":"ElementaryTypeName","src":"3079:6:12","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":1881,"mutability":"mutable","name":"reqCount","nameLocation":"3102:8:12","nodeType":"VariableDeclaration","scope":1888,"src":"3095:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1880,"name":"uint64","nodeType":"ElementaryTypeName","src":"3095:6:12","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":1883,"mutability":"mutable","name":"owner","nameLocation":"3120:5:12","nodeType":"VariableDeclaration","scope":1888,"src":"3112:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1882,"name":"address","nodeType":"ElementaryTypeName","src":"3112:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1886,"mutability":"mutable","name":"consumers","nameLocation":"3144:9:12","nodeType":"VariableDeclaration","scope":1888,"src":"3127:26:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":1884,"name":"address","nodeType":"ElementaryTypeName","src":"3127:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1885,"nodeType":"ArrayTypeName","src":"3127:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"3078:76:12"},"scope":1934,"src":"3009:146:12","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1889,"nodeType":"StructuredDocumentation","src":"3159:164:12","text":" @notice Request subscription owner transfer.\n @param subId - ID of the subscription\n @param newOwner - proposed new owner of the subscription"},"functionSelector":"04c357cb","id":1896,"implemented":false,"kind":"function","modifiers":[],"name":"requestSubscriptionOwnerTransfer","nameLocation":"3335:32:12","nodeType":"FunctionDefinition","parameters":{"id":1894,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1891,"mutability":"mutable","name":"subId","nameLocation":"3375:5:12","nodeType":"VariableDeclaration","scope":1896,"src":"3368:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1890,"name":"uint64","nodeType":"ElementaryTypeName","src":"3368:6:12","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":1893,"mutability":"mutable","name":"newOwner","nameLocation":"3390:8:12","nodeType":"VariableDeclaration","scope":1896,"src":"3382:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1892,"name":"address","nodeType":"ElementaryTypeName","src":"3382:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3367:32:12"},"returnParameters":{"id":1895,"nodeType":"ParameterList","parameters":[],"src":"3408:0:12"},"scope":1934,"src":"3326:83:12","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1897,"nodeType":"StructuredDocumentation","src":"3413:212:12","text":" @notice Request subscription owner transfer.\n @param subId - ID of the subscription\n @dev will revert if original owner of subId has\n not requested that msg.sender become the new owner."},"functionSelector":"82359740","id":1902,"implemented":false,"kind":"function","modifiers":[],"name":"acceptSubscriptionOwnerTransfer","nameLocation":"3637:31:12","nodeType":"FunctionDefinition","parameters":{"id":1900,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1899,"mutability":"mutable","name":"subId","nameLocation":"3676:5:12","nodeType":"VariableDeclaration","scope":1902,"src":"3669:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1898,"name":"uint64","nodeType":"ElementaryTypeName","src":"3669:6:12","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"3668:14:12"},"returnParameters":{"id":1901,"nodeType":"ParameterList","parameters":[],"src":"3691:0:12"},"scope":1934,"src":"3628:64:12","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1903,"nodeType":"StructuredDocumentation","src":"3696:170:12","text":" @notice Add a consumer to a VRF subscription.\n @param subId - ID of the subscription\n @param consumer - New consumer which can use the subscription"},"functionSelector":"7341c10c","id":1910,"implemented":false,"kind":"function","modifiers":[],"name":"addConsumer","nameLocation":"3878:11:12","nodeType":"FunctionDefinition","parameters":{"id":1908,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1905,"mutability":"mutable","name":"subId","nameLocation":"3897:5:12","nodeType":"VariableDeclaration","scope":1910,"src":"3890:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1904,"name":"uint64","nodeType":"ElementaryTypeName","src":"3890:6:12","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":1907,"mutability":"mutable","name":"consumer","nameLocation":"3912:8:12","nodeType":"VariableDeclaration","scope":1910,"src":"3904:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1906,"name":"address","nodeType":"ElementaryTypeName","src":"3904:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3889:32:12"},"returnParameters":{"id":1909,"nodeType":"ParameterList","parameters":[],"src":"3930:0:12"},"scope":1934,"src":"3869:62:12","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1911,"nodeType":"StructuredDocumentation","src":"3935:172:12","text":" @notice Remove a consumer from a VRF subscription.\n @param subId - ID of the subscription\n @param consumer - Consumer to remove from the subscription"},"functionSelector":"9f87fad7","id":1918,"implemented":false,"kind":"function","modifiers":[],"name":"removeConsumer","nameLocation":"4119:14:12","nodeType":"FunctionDefinition","parameters":{"id":1916,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1913,"mutability":"mutable","name":"subId","nameLocation":"4141:5:12","nodeType":"VariableDeclaration","scope":1918,"src":"4134:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1912,"name":"uint64","nodeType":"ElementaryTypeName","src":"4134:6:12","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":1915,"mutability":"mutable","name":"consumer","nameLocation":"4156:8:12","nodeType":"VariableDeclaration","scope":1918,"src":"4148:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1914,"name":"address","nodeType":"ElementaryTypeName","src":"4148:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4133:32:12"},"returnParameters":{"id":1917,"nodeType":"ParameterList","parameters":[],"src":"4174:0:12"},"scope":1934,"src":"4110:65:12","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1919,"nodeType":"StructuredDocumentation","src":"4179:140:12","text":" @notice Cancel a subscription\n @param subId - ID of the subscription\n @param to - Where to send the remaining LINK to"},"functionSelector":"d7ae1d30","id":1926,"implemented":false,"kind":"function","modifiers":[],"name":"cancelSubscription","nameLocation":"4331:18:12","nodeType":"FunctionDefinition","parameters":{"id":1924,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1921,"mutability":"mutable","name":"subId","nameLocation":"4357:5:12","nodeType":"VariableDeclaration","scope":1926,"src":"4350:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1920,"name":"uint64","nodeType":"ElementaryTypeName","src":"4350:6:12","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":1923,"mutability":"mutable","name":"to","nameLocation":"4372:2:12","nodeType":"VariableDeclaration","scope":1926,"src":"4364:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1922,"name":"address","nodeType":"ElementaryTypeName","src":"4364:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4349:26:12"},"returnParameters":{"id":1925,"nodeType":"ParameterList","parameters":[],"src":"4384:0:12"},"scope":1934,"src":"4322:63:12","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"e82ad7d4","id":1933,"implemented":false,"kind":"function","modifiers":[],"name":"pendingRequestExists","nameLocation":"4690:20:12","nodeType":"FunctionDefinition","parameters":{"id":1929,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1928,"mutability":"mutable","name":"subId","nameLocation":"4718:5:12","nodeType":"VariableDeclaration","scope":1933,"src":"4711:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1927,"name":"uint64","nodeType":"ElementaryTypeName","src":"4711:6:12","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"4710:14:12"},"returnParameters":{"id":1932,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1931,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1933,"src":"4748:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1930,"name":"bool","nodeType":"ElementaryTypeName","src":"4748:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4747:6:12"},"scope":1934,"src":"4681:73:12","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1935,"src":"57:4699:12","usedErrors":[],"usedEvents":[]}],"src":"32:4725:12"},"id":12},"@openzeppelin/contracts/access/Ownable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","exportedSymbols":{"Context":[2077],"Ownable":[2047]},"id":2048,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1936,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"102:23:13"},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":1937,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2048,"sourceUnit":2078,"src":"127:30:13","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1939,"name":"Context","nameLocations":["683:7:13"],"nodeType":"IdentifierPath","referencedDeclaration":2077,"src":"683:7:13"},"id":1940,"nodeType":"InheritanceSpecifier","src":"683:7:13"}],"canonicalName":"Ownable","contractDependencies":[],"contractKind":"contract","documentation":{"id":1938,"nodeType":"StructuredDocumentation","src":"159:494:13","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":2047,"linearizedBaseContracts":[2047,2077],"name":"Ownable","nameLocation":"672:7:13","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":1942,"mutability":"mutable","name":"_owner","nameLocation":"713:6:13","nodeType":"VariableDeclaration","scope":2047,"src":"697:22:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1941,"name":"address","nodeType":"ElementaryTypeName","src":"697:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":1948,"name":"OwnershipTransferred","nameLocation":"732:20:13","nodeType":"EventDefinition","parameters":{"id":1947,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1944,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"769:13:13","nodeType":"VariableDeclaration","scope":1948,"src":"753:29:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1943,"name":"address","nodeType":"ElementaryTypeName","src":"753:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1946,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"800:8:13","nodeType":"VariableDeclaration","scope":1948,"src":"784:24:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1945,"name":"address","nodeType":"ElementaryTypeName","src":"784:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"752:57:13"},"src":"726:84:13"},{"body":{"id":1957,"nodeType":"Block","src":"926:49:13","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1953,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2059,"src":"955:10:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1954,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"955:12:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1952,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2046,"src":"936:18:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1955,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"936:32:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1956,"nodeType":"ExpressionStatement","src":"936:32:13"}]},"documentation":{"id":1949,"nodeType":"StructuredDocumentation","src":"816:91:13","text":" @dev Initializes the contract setting the deployer as the initial owner."},"id":1958,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1950,"nodeType":"ParameterList","parameters":[],"src":"923:2:13"},"returnParameters":{"id":1951,"nodeType":"ParameterList","parameters":[],"src":"926:0:13"},"scope":2047,"src":"912:63:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1965,"nodeType":"Block","src":"1084:41:13","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1961,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1989,"src":"1094:11:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":1962,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1094:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1963,"nodeType":"ExpressionStatement","src":"1094:13:13"},{"id":1964,"nodeType":"PlaceholderStatement","src":"1117:1:13"}]},"documentation":{"id":1959,"nodeType":"StructuredDocumentation","src":"981:77:13","text":" @dev Throws if called by any account other than the owner."},"id":1966,"name":"onlyOwner","nameLocation":"1072:9:13","nodeType":"ModifierDefinition","parameters":{"id":1960,"nodeType":"ParameterList","parameters":[],"src":"1081:2:13"},"src":"1063:62:13","virtual":false,"visibility":"internal"},{"body":{"id":1974,"nodeType":"Block","src":"1256:30:13","statements":[{"expression":{"id":1972,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1942,"src":"1273:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1971,"id":1973,"nodeType":"Return","src":"1266:13:13"}]},"documentation":{"id":1967,"nodeType":"StructuredDocumentation","src":"1131:65:13","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":1975,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1210:5:13","nodeType":"FunctionDefinition","parameters":{"id":1968,"nodeType":"ParameterList","parameters":[],"src":"1215:2:13"},"returnParameters":{"id":1971,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1970,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1975,"src":"1247:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1969,"name":"address","nodeType":"ElementaryTypeName","src":"1247:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1246:9:13"},"scope":2047,"src":"1201:85:13","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":1988,"nodeType":"Block","src":"1404:85:13","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1984,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":1980,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1975,"src":"1422:5:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1981,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1422:7:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":1982,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2059,"src":"1433:10:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1983,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1433:12:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1422:23:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","id":1985,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1447:34:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""},"value":"Ownable: caller is not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""}],"id":1979,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1414:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1986,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1414:68:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1987,"nodeType":"ExpressionStatement","src":"1414:68:13"}]},"documentation":{"id":1976,"nodeType":"StructuredDocumentation","src":"1292:62:13","text":" @dev Throws if the sender is not the owner."},"id":1989,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"1368:11:13","nodeType":"FunctionDefinition","parameters":{"id":1977,"nodeType":"ParameterList","parameters":[],"src":"1379:2:13"},"returnParameters":{"id":1978,"nodeType":"ParameterList","parameters":[],"src":"1404:0:13"},"scope":2047,"src":"1359:130:13","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2002,"nodeType":"Block","src":"1878:47:13","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":1998,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1915:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1997,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1907:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1996,"name":"address","nodeType":"ElementaryTypeName","src":"1907:7:13","typeDescriptions":{}}},"id":1999,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1907:10:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1995,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2046,"src":"1888:18:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2000,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1888:30:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2001,"nodeType":"ExpressionStatement","src":"1888:30:13"}]},"documentation":{"id":1990,"nodeType":"StructuredDocumentation","src":"1495:324:13","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."},"functionSelector":"715018a6","id":2003,"implemented":true,"kind":"function","modifiers":[{"id":1993,"kind":"modifierInvocation","modifierName":{"id":1992,"name":"onlyOwner","nameLocations":["1868:9:13"],"nodeType":"IdentifierPath","referencedDeclaration":1966,"src":"1868:9:13"},"nodeType":"ModifierInvocation","src":"1868:9:13"}],"name":"renounceOwnership","nameLocation":"1833:17:13","nodeType":"FunctionDefinition","parameters":{"id":1991,"nodeType":"ParameterList","parameters":[],"src":"1850:2:13"},"returnParameters":{"id":1994,"nodeType":"ParameterList","parameters":[],"src":"1878:0:13"},"scope":2047,"src":"1824:101:13","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":2025,"nodeType":"Block","src":"2144:128:13","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2017,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2012,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2006,"src":"2162:8:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2015,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2182:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2014,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2174:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2013,"name":"address","nodeType":"ElementaryTypeName","src":"2174:7:13","typeDescriptions":{}}},"id":2016,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2174:10:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2162:22:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373","id":2018,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2186:40:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""},"value":"Ownable: new owner is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""}],"id":2011,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2154:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2019,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2154:73:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2020,"nodeType":"ExpressionStatement","src":"2154:73:13"},{"expression":{"arguments":[{"id":2022,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2006,"src":"2256:8:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2021,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2046,"src":"2237:18:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2023,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2237:28:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2024,"nodeType":"ExpressionStatement","src":"2237:28:13"}]},"documentation":{"id":2004,"nodeType":"StructuredDocumentation","src":"1931:138:13","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":2026,"implemented":true,"kind":"function","modifiers":[{"id":2009,"kind":"modifierInvocation","modifierName":{"id":2008,"name":"onlyOwner","nameLocations":["2134:9:13"],"nodeType":"IdentifierPath","referencedDeclaration":1966,"src":"2134:9:13"},"nodeType":"ModifierInvocation","src":"2134:9:13"}],"name":"transferOwnership","nameLocation":"2083:17:13","nodeType":"FunctionDefinition","parameters":{"id":2007,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2006,"mutability":"mutable","name":"newOwner","nameLocation":"2109:8:13","nodeType":"VariableDeclaration","scope":2026,"src":"2101:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2005,"name":"address","nodeType":"ElementaryTypeName","src":"2101:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2100:18:13"},"returnParameters":{"id":2010,"nodeType":"ParameterList","parameters":[],"src":"2144:0:13"},"scope":2047,"src":"2074:198:13","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":2045,"nodeType":"Block","src":"2489:124:13","statements":[{"assignments":[2033],"declarations":[{"constant":false,"id":2033,"mutability":"mutable","name":"oldOwner","nameLocation":"2507:8:13","nodeType":"VariableDeclaration","scope":2045,"src":"2499:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2032,"name":"address","nodeType":"ElementaryTypeName","src":"2499:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2035,"initialValue":{"id":2034,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1942,"src":"2518:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2499:25:13"},{"expression":{"id":2038,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2036,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1942,"src":"2534:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2037,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2029,"src":"2543:8:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2534:17:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2039,"nodeType":"ExpressionStatement","src":"2534:17:13"},{"eventCall":{"arguments":[{"id":2041,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2033,"src":"2587:8:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2042,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2029,"src":"2597:8:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2040,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1948,"src":"2566:20:13","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":2043,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2566:40:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2044,"nodeType":"EmitStatement","src":"2561:45:13"}]},"documentation":{"id":2027,"nodeType":"StructuredDocumentation","src":"2278:143:13","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":2046,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"2435:18:13","nodeType":"FunctionDefinition","parameters":{"id":2030,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2029,"mutability":"mutable","name":"newOwner","nameLocation":"2462:8:13","nodeType":"VariableDeclaration","scope":2046,"src":"2454:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2028,"name":"address","nodeType":"ElementaryTypeName","src":"2454:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2453:18:13"},"returnParameters":{"id":2031,"nodeType":"ParameterList","parameters":[],"src":"2489:0:13"},"scope":2047,"src":"2426:187:13","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":2048,"src":"654:1961:13","usedErrors":[],"usedEvents":[1948]}],"src":"102:2514:13"},"id":13},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[2077]},"id":2078,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2049,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:14"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":2050,"nodeType":"StructuredDocumentation","src":"126:496:14","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":2077,"linearizedBaseContracts":[2077],"name":"Context","nameLocation":"641:7:14","nodeType":"ContractDefinition","nodes":[{"body":{"id":2058,"nodeType":"Block","src":"717:34:14","statements":[{"expression":{"expression":{"id":2055,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"734:3:14","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2056,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"738:6:14","memberName":"sender","nodeType":"MemberAccess","src":"734:10:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2054,"id":2057,"nodeType":"Return","src":"727:17:14"}]},"id":2059,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"664:10:14","nodeType":"FunctionDefinition","parameters":{"id":2051,"nodeType":"ParameterList","parameters":[],"src":"674:2:14"},"returnParameters":{"id":2054,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2053,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2059,"src":"708:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2052,"name":"address","nodeType":"ElementaryTypeName","src":"708:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"707:9:14"},"scope":2077,"src":"655:96:14","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2067,"nodeType":"Block","src":"824:32:14","statements":[{"expression":{"expression":{"id":2064,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"841:3:14","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2065,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"845:4:14","memberName":"data","nodeType":"MemberAccess","src":"841:8:14","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":2063,"id":2066,"nodeType":"Return","src":"834:15:14"}]},"id":2068,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"766:8:14","nodeType":"FunctionDefinition","parameters":{"id":2060,"nodeType":"ParameterList","parameters":[],"src":"774:2:14"},"returnParameters":{"id":2063,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2062,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2068,"src":"808:14:14","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2061,"name":"bytes","nodeType":"ElementaryTypeName","src":"808:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"807:16:14"},"scope":2077,"src":"757:99:14","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2075,"nodeType":"Block","src":"934:25:14","statements":[{"expression":{"hexValue":"30","id":2073,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"951:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":2072,"id":2074,"nodeType":"Return","src":"944:8:14"}]},"id":2076,"implemented":true,"kind":"function","modifiers":[],"name":"_contextSuffixLength","nameLocation":"871:20:14","nodeType":"FunctionDefinition","parameters":{"id":2069,"nodeType":"ParameterList","parameters":[],"src":"891:2:14"},"returnParameters":{"id":2072,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2071,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2076,"src":"925:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2070,"name":"uint256","nodeType":"ElementaryTypeName","src":"925:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"924:9:14"},"scope":2077,"src":"862:97:14","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":2078,"src":"623:338:14","usedErrors":[],"usedEvents":[]}],"src":"101:861:14"},"id":14}},"contracts":{"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol":{"AutomationCompatibleInterface":{"abi":[{"inputs":[{"internalType":"bytes","name":"checkData","type":"bytes"}],"name":"checkUpkeep","outputs":[{"internalType":"bool","name":"upkeepNeeded","type":"bool"},{"internalType":"bytes","name":"performData","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"performData","type":"bytes"}],"name":"performUpkeep","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"checkUpkeep(bytes)":{"details":"To ensure that it is never called, you may want to add the cannotExecute modifier from KeeperBase to your implementation of this method.","params":{"checkData":"specified in the upkeep registration so it is always the same for a registered upkeep. This can easily be broken down into specific arguments using `abi.decode`, so multiple upkeeps can be registered on the same contract and easily differentiated by the contract."},"returns":{"performData":"bytes that the keeper should call performUpkeep with, if upkeep is needed. If you would like to encode data to decode later, try `abi.encode`.","upkeepNeeded":"boolean to indicate whether the keeper should call performUpkeep or not."}},"performUpkeep(bytes)":{"details":"The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.","params":{"performData":"is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"checkUpkeep(bytes)":"6e04ff0d","performUpkeep(bytes)":"4585e33b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"checkData\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"To ensure that it is never called, you may want to add the cannotExecute modifier from KeeperBase to your implementation of this method.\",\"params\":{\"checkData\":\"specified in the upkeep registration so it is always the same for a registered upkeep. This can easily be broken down into specific arguments using `abi.decode`, so multiple upkeeps can be registered on the same contract and easily differentiated by the contract.\"},\"returns\":{\"performData\":\"bytes that the keeper should call performUpkeep with, if upkeep is needed. If you would like to encode data to decode later, try `abi.encode`.\",\"upkeepNeeded\":\"boolean to indicate whether the keeper should call performUpkeep or not.\"}},\"performUpkeep(bytes)\":{\"details\":\"The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.\",\"params\":{\"performData\":\"is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkUpkeep(bytes)\":{\"notice\":\"method that is simulated by the keepers to see if any work actually needs to be performed. This method does does not actually need to be executable, and since it is only ever simulated it can consume lots of gas.\"},\"performUpkeep(bytes)\":{\"notice\":\"method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\":\"AutomationCompatibleInterface\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"checkUpkeep(bytes)":{"notice":"method that is simulated by the keepers to see if any work actually needs to be performed. This method does does not actually need to be executable, and since it is only ever simulated it can consume lots of gas."},"performUpkeep(bytes)":{"notice":"method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed."}},"version":1}}},"@chainlink/contracts/src/v0.8/interfaces/TypeAndVersionInterface.sol":{"TypeAndVersionInterface":{"abi":[{"inputs":[],"name":"typeAndVersion","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"pure","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"typeAndVersion()":"181f5a77"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"typeAndVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/interfaces/TypeAndVersionInterface.sol\":\"TypeAndVersionInterface\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/TypeAndVersionInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract TypeAndVersionInterface {\\n  function typeAndVersion() external pure virtual returns (string memory);\\n}\\n\",\"keccak256\":\"0x805cc9a91d54db1bea60cb19f38364f1eac2735bddb3476294fb803c2f6b7097\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol":{"ConfirmedOwner":{"abi":[{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"OwnershipTransferRequested","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"acceptOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"title":"The ConfirmedOwner contract","version":1},"evm":{"bytecode":{"functionDebugData":{"@_104":{"entryPoint":null,"id":104,"parameterSlots":2,"returnSlots":0},"@_46":{"entryPoint":null,"id":46,"parameterSlots":1,"returnSlots":0},"@_transferOwnership_188":{"entryPoint":303,"id":188,"parameterSlots":1,"returnSlots":0},"abi_decode_t_address_fromMemory":{"entryPoint":681,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address_fromMemory":{"entryPoint":702,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2_to_t_string_memory_ptr_fromStack":{"entryPoint":805,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack":{"entryPoint":913,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":840,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":948,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":747,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":640,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":608,"id":null,"parameterSlots":1,"returnSlots":1},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":603,"id":null,"parameterSlots":0,"returnSlots":0},"store_literal_in_memory_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2":{"entryPoint":764,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2":{"entryPoint":872,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":658,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:3327:15","nodeType":"YulBlock","src":"0:3327:15","statements":[{"body":{"nativeSrc":"47:35:15","nodeType":"YulBlock","src":"47:35:15","statements":[{"nativeSrc":"57:19:15","nodeType":"YulAssignment","src":"57:19:15","value":{"arguments":[{"kind":"number","nativeSrc":"73:2:15","nodeType":"YulLiteral","src":"73:2:15","type":"","value":"64"}],"functionName":{"name":"mload","nativeSrc":"67:5:15","nodeType":"YulIdentifier","src":"67:5:15"},"nativeSrc":"67:9:15","nodeType":"YulFunctionCall","src":"67:9:15"},"variableNames":[{"name":"memPtr","nativeSrc":"57:6:15","nodeType":"YulIdentifier","src":"57:6:15"}]}]},"name":"allocate_unbounded","nativeSrc":"7:75:15","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nativeSrc":"40:6:15","nodeType":"YulTypedName","src":"40:6:15","type":""}],"src":"7:75:15"},{"body":{"nativeSrc":"177:28:15","nodeType":"YulBlock","src":"177:28:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"194:1:15","nodeType":"YulLiteral","src":"194:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"197:1:15","nodeType":"YulLiteral","src":"197:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"187:6:15","nodeType":"YulIdentifier","src":"187:6:15"},"nativeSrc":"187:12:15","nodeType":"YulFunctionCall","src":"187:12:15"},"nativeSrc":"187:12:15","nodeType":"YulExpressionStatement","src":"187:12:15"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"88:117:15","nodeType":"YulFunctionDefinition","src":"88:117:15"},{"body":{"nativeSrc":"300:28:15","nodeType":"YulBlock","src":"300:28:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"317:1:15","nodeType":"YulLiteral","src":"317:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"320:1:15","nodeType":"YulLiteral","src":"320:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"310:6:15","nodeType":"YulIdentifier","src":"310:6:15"},"nativeSrc":"310:12:15","nodeType":"YulFunctionCall","src":"310:12:15"},"nativeSrc":"310:12:15","nodeType":"YulExpressionStatement","src":"310:12:15"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"211:117:15","nodeType":"YulFunctionDefinition","src":"211:117:15"},{"body":{"nativeSrc":"379:81:15","nodeType":"YulBlock","src":"379:81:15","statements":[{"nativeSrc":"389:65:15","nodeType":"YulAssignment","src":"389:65:15","value":{"arguments":[{"name":"value","nativeSrc":"404:5:15","nodeType":"YulIdentifier","src":"404:5:15"},{"kind":"number","nativeSrc":"411:42:15","nodeType":"YulLiteral","src":"411:42:15","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"400:3:15","nodeType":"YulIdentifier","src":"400:3:15"},"nativeSrc":"400:54:15","nodeType":"YulFunctionCall","src":"400:54:15"},"variableNames":[{"name":"cleaned","nativeSrc":"389:7:15","nodeType":"YulIdentifier","src":"389:7:15"}]}]},"name":"cleanup_t_uint160","nativeSrc":"334:126:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"361:5:15","nodeType":"YulTypedName","src":"361:5:15","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"371:7:15","nodeType":"YulTypedName","src":"371:7:15","type":""}],"src":"334:126:15"},{"body":{"nativeSrc":"511:51:15","nodeType":"YulBlock","src":"511:51:15","statements":[{"nativeSrc":"521:35:15","nodeType":"YulAssignment","src":"521:35:15","value":{"arguments":[{"name":"value","nativeSrc":"550:5:15","nodeType":"YulIdentifier","src":"550:5:15"}],"functionName":{"name":"cleanup_t_uint160","nativeSrc":"532:17:15","nodeType":"YulIdentifier","src":"532:17:15"},"nativeSrc":"532:24:15","nodeType":"YulFunctionCall","src":"532:24:15"},"variableNames":[{"name":"cleaned","nativeSrc":"521:7:15","nodeType":"YulIdentifier","src":"521:7:15"}]}]},"name":"cleanup_t_address","nativeSrc":"466:96:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"493:5:15","nodeType":"YulTypedName","src":"493:5:15","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"503:7:15","nodeType":"YulTypedName","src":"503:7:15","type":""}],"src":"466:96:15"},{"body":{"nativeSrc":"611:79:15","nodeType":"YulBlock","src":"611:79:15","statements":[{"body":{"nativeSrc":"668:16:15","nodeType":"YulBlock","src":"668:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"677:1:15","nodeType":"YulLiteral","src":"677:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"680:1:15","nodeType":"YulLiteral","src":"680:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"670:6:15","nodeType":"YulIdentifier","src":"670:6:15"},"nativeSrc":"670:12:15","nodeType":"YulFunctionCall","src":"670:12:15"},"nativeSrc":"670:12:15","nodeType":"YulExpressionStatement","src":"670:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"634:5:15","nodeType":"YulIdentifier","src":"634:5:15"},{"arguments":[{"name":"value","nativeSrc":"659:5:15","nodeType":"YulIdentifier","src":"659:5:15"}],"functionName":{"name":"cleanup_t_address","nativeSrc":"641:17:15","nodeType":"YulIdentifier","src":"641:17:15"},"nativeSrc":"641:24:15","nodeType":"YulFunctionCall","src":"641:24:15"}],"functionName":{"name":"eq","nativeSrc":"631:2:15","nodeType":"YulIdentifier","src":"631:2:15"},"nativeSrc":"631:35:15","nodeType":"YulFunctionCall","src":"631:35:15"}],"functionName":{"name":"iszero","nativeSrc":"624:6:15","nodeType":"YulIdentifier","src":"624:6:15"},"nativeSrc":"624:43:15","nodeType":"YulFunctionCall","src":"624:43:15"},"nativeSrc":"621:63:15","nodeType":"YulIf","src":"621:63:15"}]},"name":"validator_revert_t_address","nativeSrc":"568:122:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"604:5:15","nodeType":"YulTypedName","src":"604:5:15","type":""}],"src":"568:122:15"},{"body":{"nativeSrc":"759:80:15","nodeType":"YulBlock","src":"759:80:15","statements":[{"nativeSrc":"769:22:15","nodeType":"YulAssignment","src":"769:22:15","value":{"arguments":[{"name":"offset","nativeSrc":"784:6:15","nodeType":"YulIdentifier","src":"784:6:15"}],"functionName":{"name":"mload","nativeSrc":"778:5:15","nodeType":"YulIdentifier","src":"778:5:15"},"nativeSrc":"778:13:15","nodeType":"YulFunctionCall","src":"778:13:15"},"variableNames":[{"name":"value","nativeSrc":"769:5:15","nodeType":"YulIdentifier","src":"769:5:15"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"827:5:15","nodeType":"YulIdentifier","src":"827:5:15"}],"functionName":{"name":"validator_revert_t_address","nativeSrc":"800:26:15","nodeType":"YulIdentifier","src":"800:26:15"},"nativeSrc":"800:33:15","nodeType":"YulFunctionCall","src":"800:33:15"},"nativeSrc":"800:33:15","nodeType":"YulExpressionStatement","src":"800:33:15"}]},"name":"abi_decode_t_address_fromMemory","nativeSrc":"696:143:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"737:6:15","nodeType":"YulTypedName","src":"737:6:15","type":""},{"name":"end","nativeSrc":"745:3:15","nodeType":"YulTypedName","src":"745:3:15","type":""}],"returnVariables":[{"name":"value","nativeSrc":"753:5:15","nodeType":"YulTypedName","src":"753:5:15","type":""}],"src":"696:143:15"},{"body":{"nativeSrc":"922:274:15","nodeType":"YulBlock","src":"922:274:15","statements":[{"body":{"nativeSrc":"968:83:15","nodeType":"YulBlock","src":"968:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"970:77:15","nodeType":"YulIdentifier","src":"970:77:15"},"nativeSrc":"970:79:15","nodeType":"YulFunctionCall","src":"970:79:15"},"nativeSrc":"970:79:15","nodeType":"YulExpressionStatement","src":"970:79:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"943:7:15","nodeType":"YulIdentifier","src":"943:7:15"},{"name":"headStart","nativeSrc":"952:9:15","nodeType":"YulIdentifier","src":"952:9:15"}],"functionName":{"name":"sub","nativeSrc":"939:3:15","nodeType":"YulIdentifier","src":"939:3:15"},"nativeSrc":"939:23:15","nodeType":"YulFunctionCall","src":"939:23:15"},{"kind":"number","nativeSrc":"964:2:15","nodeType":"YulLiteral","src":"964:2:15","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"935:3:15","nodeType":"YulIdentifier","src":"935:3:15"},"nativeSrc":"935:32:15","nodeType":"YulFunctionCall","src":"935:32:15"},"nativeSrc":"932:119:15","nodeType":"YulIf","src":"932:119:15"},{"nativeSrc":"1061:128:15","nodeType":"YulBlock","src":"1061:128:15","statements":[{"nativeSrc":"1076:15:15","nodeType":"YulVariableDeclaration","src":"1076:15:15","value":{"kind":"number","nativeSrc":"1090:1:15","nodeType":"YulLiteral","src":"1090:1:15","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"1080:6:15","nodeType":"YulTypedName","src":"1080:6:15","type":""}]},{"nativeSrc":"1105:74:15","nodeType":"YulAssignment","src":"1105:74:15","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1151:9:15","nodeType":"YulIdentifier","src":"1151:9:15"},{"name":"offset","nativeSrc":"1162:6:15","nodeType":"YulIdentifier","src":"1162:6:15"}],"functionName":{"name":"add","nativeSrc":"1147:3:15","nodeType":"YulIdentifier","src":"1147:3:15"},"nativeSrc":"1147:22:15","nodeType":"YulFunctionCall","src":"1147:22:15"},{"name":"dataEnd","nativeSrc":"1171:7:15","nodeType":"YulIdentifier","src":"1171:7:15"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nativeSrc":"1115:31:15","nodeType":"YulIdentifier","src":"1115:31:15"},"nativeSrc":"1115:64:15","nodeType":"YulFunctionCall","src":"1115:64:15"},"variableNames":[{"name":"value0","nativeSrc":"1105:6:15","nodeType":"YulIdentifier","src":"1105:6:15"}]}]}]},"name":"abi_decode_tuple_t_address_fromMemory","nativeSrc":"845:351:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"892:9:15","nodeType":"YulTypedName","src":"892:9:15","type":""},{"name":"dataEnd","nativeSrc":"903:7:15","nodeType":"YulTypedName","src":"903:7:15","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"915:6:15","nodeType":"YulTypedName","src":"915:6:15","type":""}],"src":"845:351:15"},{"body":{"nativeSrc":"1298:73:15","nodeType":"YulBlock","src":"1298:73:15","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"1315:3:15","nodeType":"YulIdentifier","src":"1315:3:15"},{"name":"length","nativeSrc":"1320:6:15","nodeType":"YulIdentifier","src":"1320:6:15"}],"functionName":{"name":"mstore","nativeSrc":"1308:6:15","nodeType":"YulIdentifier","src":"1308:6:15"},"nativeSrc":"1308:19:15","nodeType":"YulFunctionCall","src":"1308:19:15"},"nativeSrc":"1308:19:15","nodeType":"YulExpressionStatement","src":"1308:19:15"},{"nativeSrc":"1336:29:15","nodeType":"YulAssignment","src":"1336:29:15","value":{"arguments":[{"name":"pos","nativeSrc":"1355:3:15","nodeType":"YulIdentifier","src":"1355:3:15"},{"kind":"number","nativeSrc":"1360:4:15","nodeType":"YulLiteral","src":"1360:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1351:3:15","nodeType":"YulIdentifier","src":"1351:3:15"},"nativeSrc":"1351:14:15","nodeType":"YulFunctionCall","src":"1351:14:15"},"variableNames":[{"name":"updated_pos","nativeSrc":"1336:11:15","nodeType":"YulIdentifier","src":"1336:11:15"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"1202:169:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"1270:3:15","nodeType":"YulTypedName","src":"1270:3:15","type":""},{"name":"length","nativeSrc":"1275:6:15","nodeType":"YulTypedName","src":"1275:6:15","type":""}],"returnVariables":[{"name":"updated_pos","nativeSrc":"1286:11:15","nodeType":"YulTypedName","src":"1286:11:15","type":""}],"src":"1202:169:15"},{"body":{"nativeSrc":"1483:68:15","nodeType":"YulBlock","src":"1483:68:15","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"1505:6:15","nodeType":"YulIdentifier","src":"1505:6:15"},{"kind":"number","nativeSrc":"1513:1:15","nodeType":"YulLiteral","src":"1513:1:15","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"1501:3:15","nodeType":"YulIdentifier","src":"1501:3:15"},"nativeSrc":"1501:14:15","nodeType":"YulFunctionCall","src":"1501:14:15"},{"hexValue":"43616e6e6f7420736574206f776e657220746f207a65726f","kind":"string","nativeSrc":"1517:26:15","nodeType":"YulLiteral","src":"1517:26:15","type":"","value":"Cannot set owner to zero"}],"functionName":{"name":"mstore","nativeSrc":"1494:6:15","nodeType":"YulIdentifier","src":"1494:6:15"},"nativeSrc":"1494:50:15","nodeType":"YulFunctionCall","src":"1494:50:15"},"nativeSrc":"1494:50:15","nodeType":"YulExpressionStatement","src":"1494:50:15"}]},"name":"store_literal_in_memory_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2","nativeSrc":"1377:174:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"1475:6:15","nodeType":"YulTypedName","src":"1475:6:15","type":""}],"src":"1377:174:15"},{"body":{"nativeSrc":"1703:220:15","nodeType":"YulBlock","src":"1703:220:15","statements":[{"nativeSrc":"1713:74:15","nodeType":"YulAssignment","src":"1713:74:15","value":{"arguments":[{"name":"pos","nativeSrc":"1779:3:15","nodeType":"YulIdentifier","src":"1779:3:15"},{"kind":"number","nativeSrc":"1784:2:15","nodeType":"YulLiteral","src":"1784:2:15","type":"","value":"24"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"1720:58:15","nodeType":"YulIdentifier","src":"1720:58:15"},"nativeSrc":"1720:67:15","nodeType":"YulFunctionCall","src":"1720:67:15"},"variableNames":[{"name":"pos","nativeSrc":"1713:3:15","nodeType":"YulIdentifier","src":"1713:3:15"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"1885:3:15","nodeType":"YulIdentifier","src":"1885:3:15"}],"functionName":{"name":"store_literal_in_memory_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2","nativeSrc":"1796:88:15","nodeType":"YulIdentifier","src":"1796:88:15"},"nativeSrc":"1796:93:15","nodeType":"YulFunctionCall","src":"1796:93:15"},"nativeSrc":"1796:93:15","nodeType":"YulExpressionStatement","src":"1796:93:15"},{"nativeSrc":"1898:19:15","nodeType":"YulAssignment","src":"1898:19:15","value":{"arguments":[{"name":"pos","nativeSrc":"1909:3:15","nodeType":"YulIdentifier","src":"1909:3:15"},{"kind":"number","nativeSrc":"1914:2:15","nodeType":"YulLiteral","src":"1914:2:15","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1905:3:15","nodeType":"YulIdentifier","src":"1905:3:15"},"nativeSrc":"1905:12:15","nodeType":"YulFunctionCall","src":"1905:12:15"},"variableNames":[{"name":"end","nativeSrc":"1898:3:15","nodeType":"YulIdentifier","src":"1898:3:15"}]}]},"name":"abi_encode_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2_to_t_string_memory_ptr_fromStack","nativeSrc":"1557:366:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"1691:3:15","nodeType":"YulTypedName","src":"1691:3:15","type":""}],"returnVariables":[{"name":"end","nativeSrc":"1699:3:15","nodeType":"YulTypedName","src":"1699:3:15","type":""}],"src":"1557:366:15"},{"body":{"nativeSrc":"2100:248:15","nodeType":"YulBlock","src":"2100:248:15","statements":[{"nativeSrc":"2110:26:15","nodeType":"YulAssignment","src":"2110:26:15","value":{"arguments":[{"name":"headStart","nativeSrc":"2122:9:15","nodeType":"YulIdentifier","src":"2122:9:15"},{"kind":"number","nativeSrc":"2133:2:15","nodeType":"YulLiteral","src":"2133:2:15","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2118:3:15","nodeType":"YulIdentifier","src":"2118:3:15"},"nativeSrc":"2118:18:15","nodeType":"YulFunctionCall","src":"2118:18:15"},"variableNames":[{"name":"tail","nativeSrc":"2110:4:15","nodeType":"YulIdentifier","src":"2110:4:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2157:9:15","nodeType":"YulIdentifier","src":"2157:9:15"},{"kind":"number","nativeSrc":"2168:1:15","nodeType":"YulLiteral","src":"2168:1:15","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"2153:3:15","nodeType":"YulIdentifier","src":"2153:3:15"},"nativeSrc":"2153:17:15","nodeType":"YulFunctionCall","src":"2153:17:15"},{"arguments":[{"name":"tail","nativeSrc":"2176:4:15","nodeType":"YulIdentifier","src":"2176:4:15"},{"name":"headStart","nativeSrc":"2182:9:15","nodeType":"YulIdentifier","src":"2182:9:15"}],"functionName":{"name":"sub","nativeSrc":"2172:3:15","nodeType":"YulIdentifier","src":"2172:3:15"},"nativeSrc":"2172:20:15","nodeType":"YulFunctionCall","src":"2172:20:15"}],"functionName":{"name":"mstore","nativeSrc":"2146:6:15","nodeType":"YulIdentifier","src":"2146:6:15"},"nativeSrc":"2146:47:15","nodeType":"YulFunctionCall","src":"2146:47:15"},"nativeSrc":"2146:47:15","nodeType":"YulExpressionStatement","src":"2146:47:15"},{"nativeSrc":"2202:139:15","nodeType":"YulAssignment","src":"2202:139:15","value":{"arguments":[{"name":"tail","nativeSrc":"2336:4:15","nodeType":"YulIdentifier","src":"2336:4:15"}],"functionName":{"name":"abi_encode_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2_to_t_string_memory_ptr_fromStack","nativeSrc":"2210:124:15","nodeType":"YulIdentifier","src":"2210:124:15"},"nativeSrc":"2210:131:15","nodeType":"YulFunctionCall","src":"2210:131:15"},"variableNames":[{"name":"tail","nativeSrc":"2202:4:15","nodeType":"YulIdentifier","src":"2202:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"1929:419:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2080:9:15","nodeType":"YulTypedName","src":"2080:9:15","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2095:4:15","nodeType":"YulTypedName","src":"2095:4:15","type":""}],"src":"1929:419:15"},{"body":{"nativeSrc":"2460:67:15","nodeType":"YulBlock","src":"2460:67:15","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"2482:6:15","nodeType":"YulIdentifier","src":"2482:6:15"},{"kind":"number","nativeSrc":"2490:1:15","nodeType":"YulLiteral","src":"2490:1:15","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"2478:3:15","nodeType":"YulIdentifier","src":"2478:3:15"},"nativeSrc":"2478:14:15","nodeType":"YulFunctionCall","src":"2478:14:15"},{"hexValue":"43616e6e6f74207472616e7366657220746f2073656c66","kind":"string","nativeSrc":"2494:25:15","nodeType":"YulLiteral","src":"2494:25:15","type":"","value":"Cannot transfer to self"}],"functionName":{"name":"mstore","nativeSrc":"2471:6:15","nodeType":"YulIdentifier","src":"2471:6:15"},"nativeSrc":"2471:49:15","nodeType":"YulFunctionCall","src":"2471:49:15"},"nativeSrc":"2471:49:15","nodeType":"YulExpressionStatement","src":"2471:49:15"}]},"name":"store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2","nativeSrc":"2354:173:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"2452:6:15","nodeType":"YulTypedName","src":"2452:6:15","type":""}],"src":"2354:173:15"},{"body":{"nativeSrc":"2679:220:15","nodeType":"YulBlock","src":"2679:220:15","statements":[{"nativeSrc":"2689:74:15","nodeType":"YulAssignment","src":"2689:74:15","value":{"arguments":[{"name":"pos","nativeSrc":"2755:3:15","nodeType":"YulIdentifier","src":"2755:3:15"},{"kind":"number","nativeSrc":"2760:2:15","nodeType":"YulLiteral","src":"2760:2:15","type":"","value":"23"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"2696:58:15","nodeType":"YulIdentifier","src":"2696:58:15"},"nativeSrc":"2696:67:15","nodeType":"YulFunctionCall","src":"2696:67:15"},"variableNames":[{"name":"pos","nativeSrc":"2689:3:15","nodeType":"YulIdentifier","src":"2689:3:15"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"2861:3:15","nodeType":"YulIdentifier","src":"2861:3:15"}],"functionName":{"name":"store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2","nativeSrc":"2772:88:15","nodeType":"YulIdentifier","src":"2772:88:15"},"nativeSrc":"2772:93:15","nodeType":"YulFunctionCall","src":"2772:93:15"},"nativeSrc":"2772:93:15","nodeType":"YulExpressionStatement","src":"2772:93:15"},{"nativeSrc":"2874:19:15","nodeType":"YulAssignment","src":"2874:19:15","value":{"arguments":[{"name":"pos","nativeSrc":"2885:3:15","nodeType":"YulIdentifier","src":"2885:3:15"},{"kind":"number","nativeSrc":"2890:2:15","nodeType":"YulLiteral","src":"2890:2:15","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2881:3:15","nodeType":"YulIdentifier","src":"2881:3:15"},"nativeSrc":"2881:12:15","nodeType":"YulFunctionCall","src":"2881:12:15"},"variableNames":[{"name":"end","nativeSrc":"2874:3:15","nodeType":"YulIdentifier","src":"2874:3:15"}]}]},"name":"abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack","nativeSrc":"2533:366:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"2667:3:15","nodeType":"YulTypedName","src":"2667:3:15","type":""}],"returnVariables":[{"name":"end","nativeSrc":"2675:3:15","nodeType":"YulTypedName","src":"2675:3:15","type":""}],"src":"2533:366:15"},{"body":{"nativeSrc":"3076:248:15","nodeType":"YulBlock","src":"3076:248:15","statements":[{"nativeSrc":"3086:26:15","nodeType":"YulAssignment","src":"3086:26:15","value":{"arguments":[{"name":"headStart","nativeSrc":"3098:9:15","nodeType":"YulIdentifier","src":"3098:9:15"},{"kind":"number","nativeSrc":"3109:2:15","nodeType":"YulLiteral","src":"3109:2:15","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3094:3:15","nodeType":"YulIdentifier","src":"3094:3:15"},"nativeSrc":"3094:18:15","nodeType":"YulFunctionCall","src":"3094:18:15"},"variableNames":[{"name":"tail","nativeSrc":"3086:4:15","nodeType":"YulIdentifier","src":"3086:4:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3133:9:15","nodeType":"YulIdentifier","src":"3133:9:15"},{"kind":"number","nativeSrc":"3144:1:15","nodeType":"YulLiteral","src":"3144:1:15","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"3129:3:15","nodeType":"YulIdentifier","src":"3129:3:15"},"nativeSrc":"3129:17:15","nodeType":"YulFunctionCall","src":"3129:17:15"},{"arguments":[{"name":"tail","nativeSrc":"3152:4:15","nodeType":"YulIdentifier","src":"3152:4:15"},{"name":"headStart","nativeSrc":"3158:9:15","nodeType":"YulIdentifier","src":"3158:9:15"}],"functionName":{"name":"sub","nativeSrc":"3148:3:15","nodeType":"YulIdentifier","src":"3148:3:15"},"nativeSrc":"3148:20:15","nodeType":"YulFunctionCall","src":"3148:20:15"}],"functionName":{"name":"mstore","nativeSrc":"3122:6:15","nodeType":"YulIdentifier","src":"3122:6:15"},"nativeSrc":"3122:47:15","nodeType":"YulFunctionCall","src":"3122:47:15"},"nativeSrc":"3122:47:15","nodeType":"YulExpressionStatement","src":"3122:47:15"},{"nativeSrc":"3178:139:15","nodeType":"YulAssignment","src":"3178:139:15","value":{"arguments":[{"name":"tail","nativeSrc":"3312:4:15","nodeType":"YulIdentifier","src":"3312:4:15"}],"functionName":{"name":"abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack","nativeSrc":"3186:124:15","nodeType":"YulIdentifier","src":"3186:124:15"},"nativeSrc":"3186:131:15","nodeType":"YulFunctionCall","src":"3186:131:15"},"variableNames":[{"name":"tail","nativeSrc":"3178:4:15","nodeType":"YulIdentifier","src":"3178:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"2905:419:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3056:9:15","nodeType":"YulTypedName","src":"3056:9:15","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"3071:4:15","nodeType":"YulTypedName","src":"3071:4:15","type":""}],"src":"2905:419:15"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2(memPtr) {\n\n        mstore(add(memPtr, 0), \"Cannot set owner to zero\")\n\n    }\n\n    function abi_encode_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 24)\n        store_literal_in_memory_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2(memPtr) {\n\n        mstore(add(memPtr, 0), \"Cannot transfer to self\")\n\n    }\n\n    function abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 23)\n        store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n}\n","id":15,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"608060405234801561001057600080fd5b50604051610a40380380610a40833981810160405281019061003291906102be565b8060008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036100a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161009a90610348565b60405180910390fd5b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610127576101268161012f60201b60201c565b5b5050506103d4565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361019d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610194906103b4565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061028b82610260565b9050919050565b61029b81610280565b81146102a657600080fd5b50565b6000815190506102b881610292565b92915050565b6000602082840312156102d4576102d361025b565b5b60006102e2848285016102a9565b91505092915050565b600082825260208201905092915050565b7f43616e6e6f7420736574206f776e657220746f207a65726f0000000000000000600082015250565b60006103326018836102eb565b915061033d826102fc565b602082019050919050565b6000602082019050818103600083015261036181610325565b9050919050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b600061039e6017836102eb565b91506103a982610368565b602082019050919050565b600060208201905081810360008301526103cd81610391565b9050919050565b61065d806103e36000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806379ba5097146100465780638da5cb5b14610050578063f2fde38b1461006e575b600080fd5b61004e61008a565b005b61005861021f565b6040516100659190610459565b60405180910390f35b610088600480360381019061008391906104a5565b610248565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461011a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101119061052f565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61025061025c565b610259816102ec565b50565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102e19061059b565b60405180910390fd5b565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361035a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035190610607565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061044382610418565b9050919050565b61045381610438565b82525050565b600060208201905061046e600083018461044a565b92915050565b600080fd5b61048281610438565b811461048d57600080fd5b50565b60008135905061049f81610479565b92915050565b6000602082840312156104bb576104ba610474565b5b60006104c984828501610490565b91505092915050565b600082825260208201905092915050565b7f4d7573742062652070726f706f736564206f776e657200000000000000000000600082015250565b60006105196016836104d2565b9150610524826104e3565b602082019050919050565b600060208201905081810360008301526105488161050c565b9050919050565b7f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000600082015250565b60006105856016836104d2565b91506105908261054f565b602082019050919050565b600060208201905081810360008301526105b481610578565b9050919050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b60006105f16017836104d2565b91506105fc826105bb565b602082019050919050565b60006020820190508181036000830152610620816105e4565b905091905056fea264697066735822122096a9b26ff68ebee96d178d08bb91561745cbede2f881906336a024605ef7a2c464736f6c63430008180033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0xA40 CODESIZE SUB DUP1 PUSH2 0xA40 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH2 0x32 SWAP2 SWAP1 PUSH2 0x2BE JUMP JUMPDEST DUP1 PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xA3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9A SWAP1 PUSH2 0x348 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x127 JUMPI PUSH2 0x126 DUP2 PUSH2 0x12F PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST JUMPDEST POP POP POP PUSH2 0x3D4 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x19D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x194 SWAP1 PUSH2 0x3B4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xED8889F560326EB138920D842192F0EB3DD22B4F139C87A2C57538E05BAE1278 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x28B DUP3 PUSH2 0x260 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x29B DUP2 PUSH2 0x280 JUMP JUMPDEST DUP2 EQ PUSH2 0x2A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x2B8 DUP2 PUSH2 0x292 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2D4 JUMPI PUSH2 0x2D3 PUSH2 0x25B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2E2 DUP5 DUP3 DUP6 ADD PUSH2 0x2A9 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x43616E6E6F7420736574206F776E657220746F207A65726F0000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x332 PUSH1 0x18 DUP4 PUSH2 0x2EB JUMP JUMPDEST SWAP2 POP PUSH2 0x33D DUP3 PUSH2 0x2FC JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x361 DUP2 PUSH2 0x325 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x43616E6E6F74207472616E7366657220746F2073656C66000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x39E PUSH1 0x17 DUP4 PUSH2 0x2EB JUMP JUMPDEST SWAP2 POP PUSH2 0x3A9 DUP3 PUSH2 0x368 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3CD DUP2 PUSH2 0x391 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x65D DUP1 PUSH2 0x3E3 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x79BA5097 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x50 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x6E JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0x8A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x58 PUSH2 0x21F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x65 SWAP2 SWAP1 PUSH2 0x459 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x88 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x83 SWAP2 SWAP1 PUSH2 0x4A5 JUMP JUMPDEST PUSH2 0x248 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x11A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x111 SWAP1 PUSH2 0x52F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP CALLER PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x250 PUSH2 0x25C JUMP JUMPDEST PUSH2 0x259 DUP2 PUSH2 0x2EC JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2EA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2E1 SWAP1 PUSH2 0x59B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x35A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x351 SWAP1 PUSH2 0x607 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xED8889F560326EB138920D842192F0EB3DD22B4F139C87A2C57538E05BAE1278 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x443 DUP3 PUSH2 0x418 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x453 DUP2 PUSH2 0x438 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x46E PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x44A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x482 DUP2 PUSH2 0x438 JUMP JUMPDEST DUP2 EQ PUSH2 0x48D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x49F DUP2 PUSH2 0x479 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4BB JUMPI PUSH2 0x4BA PUSH2 0x474 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x4C9 DUP5 DUP3 DUP6 ADD PUSH2 0x490 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4D7573742062652070726F706F736564206F776E657200000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x519 PUSH1 0x16 DUP4 PUSH2 0x4D2 JUMP JUMPDEST SWAP2 POP PUSH2 0x524 DUP3 PUSH2 0x4E3 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x548 DUP2 PUSH2 0x50C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F6E6C792063616C6C61626C65206279206F776E657200000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x585 PUSH1 0x16 DUP4 PUSH2 0x4D2 JUMP JUMPDEST SWAP2 POP PUSH2 0x590 DUP3 PUSH2 0x54F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x5B4 DUP2 PUSH2 0x578 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x43616E6E6F74207472616E7366657220746F2073656C66000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5F1 PUSH1 0x17 DUP4 PUSH2 0x4D2 JUMP JUMPDEST SWAP2 POP PUSH2 0x5FC DUP3 PUSH2 0x5BB JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x620 DUP2 PUSH2 0x5E4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP7 0xA9 0xB2 PUSH16 0xF68EBEE96D178D08BB91561745CBEDE2 0xF8 DUP2 SWAP1 PUSH4 0x36A02460 MCOPY 0xF7 LOG2 0xC4 PUSH5 0x736F6C6343 STOP ADDMOD XOR STOP CALLER ","sourceMap":"240:141:2:-:0;;;298:81;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;355:8;373:1;618::3;598:22;;:8;:22;;;590:59;;;;;;;;;;;;:::i;:::-;;;;;;;;;666:8;656:7;;:18;;;;;;;;;;;;;;;;;;708:1;684:26;;:12;:26;;;680:79;;720:32;739:12;720:18;;;:32;;:::i;:::-;680:79;481:282;;298:81:2;240:141;;1536:239:3;1655:10;1649:16;;:2;:16;;;1641:52;;;;;;;;;;;;:::i;:::-;;;;;;;;;1717:2;1700:14;;:19;;;;;;;;;;;;;;;;;;1767:2;1731:39;;1758:7;;;;;;;;;;1731:39;;;;;;;;;;;;1536:239;:::o;88:117:15:-;197:1;194;187:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:143::-;753:5;784:6;778:13;769:22;;800:33;827:5;800:33;:::i;:::-;696:143;;;;:::o;845:351::-;915:6;964:2;952:9;943:7;939:23;935:32;932:119;;;970:79;;:::i;:::-;932:119;1090:1;1115:64;1171:7;1162:6;1151:9;1147:22;1115:64;:::i;:::-;1105:74;;1061:128;845:351;;;;:::o;1202:169::-;1286:11;1320:6;1315:3;1308:19;1360:4;1355:3;1351:14;1336:29;;1202:169;;;;:::o;1377:174::-;1517:26;1513:1;1505:6;1501:14;1494:50;1377:174;:::o;1557:366::-;1699:3;1720:67;1784:2;1779:3;1720:67;:::i;:::-;1713:74;;1796:93;1885:3;1796:93;:::i;:::-;1914:2;1909:3;1905:12;1898:19;;1557:366;;;:::o;1929:419::-;2095:4;2133:2;2122:9;2118:18;2110:26;;2182:9;2176:4;2172:20;2168:1;2157:9;2153:17;2146:47;2210:131;2336:4;2210:131;:::i;:::-;2202:139;;1929:419;;;:::o;2354:173::-;2494:25;2490:1;2482:6;2478:14;2471:49;2354:173;:::o;2533:366::-;2675:3;2696:67;2760:2;2755:3;2696:67;:::i;:::-;2689:74;;2772:93;2861:3;2772:93;:::i;:::-;2890:2;2885:3;2881:12;2874:19;;2533:366;;;:::o;2905:419::-;3071:4;3109:2;3098:9;3094:18;3086:26;;3158:9;3152:4;3148:20;3144:1;3133:9;3129:17;3122:47;3186:131;3312:4;3186:131;:::i;:::-;3178:139;;2905:419;;;:::o;240:141:2:-;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_transferOwnership_188":{"entryPoint":748,"id":188,"parameterSlots":1,"returnSlots":0},"@_validateOwnership_201":{"entryPoint":604,"id":201,"parameterSlots":0,"returnSlots":0},"@acceptOwnership_154":{"entryPoint":138,"id":154,"parameterSlots":0,"returnSlots":0},"@owner_164":{"entryPoint":543,"id":164,"parameterSlots":0,"returnSlots":1},"@transferOwnership_118":{"entryPoint":584,"id":118,"parameterSlots":1,"returnSlots":0},"abi_decode_t_address":{"entryPoint":1168,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":1189,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":1098,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c_to_t_string_memory_ptr_fromStack":{"entryPoint":1292,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3_to_t_string_memory_ptr_fromStack":{"entryPoint":1400,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack":{"entryPoint":1508,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":1113,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":1327,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":1435,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":1543,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":1234,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":1080,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":1048,"id":null,"parameterSlots":1,"returnSlots":1},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":1140,"id":null,"parameterSlots":0,"returnSlots":0},"store_literal_in_memory_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c":{"entryPoint":1251,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3":{"entryPoint":1359,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2":{"entryPoint":1467,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":1145,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:4626:15","nodeType":"YulBlock","src":"0:4626:15","statements":[{"body":{"nativeSrc":"52:81:15","nodeType":"YulBlock","src":"52:81:15","statements":[{"nativeSrc":"62:65:15","nodeType":"YulAssignment","src":"62:65:15","value":{"arguments":[{"name":"value","nativeSrc":"77:5:15","nodeType":"YulIdentifier","src":"77:5:15"},{"kind":"number","nativeSrc":"84:42:15","nodeType":"YulLiteral","src":"84:42:15","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"73:3:15","nodeType":"YulIdentifier","src":"73:3:15"},"nativeSrc":"73:54:15","nodeType":"YulFunctionCall","src":"73:54:15"},"variableNames":[{"name":"cleaned","nativeSrc":"62:7:15","nodeType":"YulIdentifier","src":"62:7:15"}]}]},"name":"cleanup_t_uint160","nativeSrc":"7:126:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"34:5:15","nodeType":"YulTypedName","src":"34:5:15","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"44:7:15","nodeType":"YulTypedName","src":"44:7:15","type":""}],"src":"7:126:15"},{"body":{"nativeSrc":"184:51:15","nodeType":"YulBlock","src":"184:51:15","statements":[{"nativeSrc":"194:35:15","nodeType":"YulAssignment","src":"194:35:15","value":{"arguments":[{"name":"value","nativeSrc":"223:5:15","nodeType":"YulIdentifier","src":"223:5:15"}],"functionName":{"name":"cleanup_t_uint160","nativeSrc":"205:17:15","nodeType":"YulIdentifier","src":"205:17:15"},"nativeSrc":"205:24:15","nodeType":"YulFunctionCall","src":"205:24:15"},"variableNames":[{"name":"cleaned","nativeSrc":"194:7:15","nodeType":"YulIdentifier","src":"194:7:15"}]}]},"name":"cleanup_t_address","nativeSrc":"139:96:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"166:5:15","nodeType":"YulTypedName","src":"166:5:15","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"176:7:15","nodeType":"YulTypedName","src":"176:7:15","type":""}],"src":"139:96:15"},{"body":{"nativeSrc":"306:53:15","nodeType":"YulBlock","src":"306:53:15","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"323:3:15","nodeType":"YulIdentifier","src":"323:3:15"},{"arguments":[{"name":"value","nativeSrc":"346:5:15","nodeType":"YulIdentifier","src":"346:5:15"}],"functionName":{"name":"cleanup_t_address","nativeSrc":"328:17:15","nodeType":"YulIdentifier","src":"328:17:15"},"nativeSrc":"328:24:15","nodeType":"YulFunctionCall","src":"328:24:15"}],"functionName":{"name":"mstore","nativeSrc":"316:6:15","nodeType":"YulIdentifier","src":"316:6:15"},"nativeSrc":"316:37:15","nodeType":"YulFunctionCall","src":"316:37:15"},"nativeSrc":"316:37:15","nodeType":"YulExpressionStatement","src":"316:37:15"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"241:118:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"294:5:15","nodeType":"YulTypedName","src":"294:5:15","type":""},{"name":"pos","nativeSrc":"301:3:15","nodeType":"YulTypedName","src":"301:3:15","type":""}],"src":"241:118:15"},{"body":{"nativeSrc":"463:124:15","nodeType":"YulBlock","src":"463:124:15","statements":[{"nativeSrc":"473:26:15","nodeType":"YulAssignment","src":"473:26:15","value":{"arguments":[{"name":"headStart","nativeSrc":"485:9:15","nodeType":"YulIdentifier","src":"485:9:15"},{"kind":"number","nativeSrc":"496:2:15","nodeType":"YulLiteral","src":"496:2:15","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"481:3:15","nodeType":"YulIdentifier","src":"481:3:15"},"nativeSrc":"481:18:15","nodeType":"YulFunctionCall","src":"481:18:15"},"variableNames":[{"name":"tail","nativeSrc":"473:4:15","nodeType":"YulIdentifier","src":"473:4:15"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"553:6:15","nodeType":"YulIdentifier","src":"553:6:15"},{"arguments":[{"name":"headStart","nativeSrc":"566:9:15","nodeType":"YulIdentifier","src":"566:9:15"},{"kind":"number","nativeSrc":"577:1:15","nodeType":"YulLiteral","src":"577:1:15","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"562:3:15","nodeType":"YulIdentifier","src":"562:3:15"},"nativeSrc":"562:17:15","nodeType":"YulFunctionCall","src":"562:17:15"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"509:43:15","nodeType":"YulIdentifier","src":"509:43:15"},"nativeSrc":"509:71:15","nodeType":"YulFunctionCall","src":"509:71:15"},"nativeSrc":"509:71:15","nodeType":"YulExpressionStatement","src":"509:71:15"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"365:222:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"435:9:15","nodeType":"YulTypedName","src":"435:9:15","type":""},{"name":"value0","nativeSrc":"447:6:15","nodeType":"YulTypedName","src":"447:6:15","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"458:4:15","nodeType":"YulTypedName","src":"458:4:15","type":""}],"src":"365:222:15"},{"body":{"nativeSrc":"633:35:15","nodeType":"YulBlock","src":"633:35:15","statements":[{"nativeSrc":"643:19:15","nodeType":"YulAssignment","src":"643:19:15","value":{"arguments":[{"kind":"number","nativeSrc":"659:2:15","nodeType":"YulLiteral","src":"659:2:15","type":"","value":"64"}],"functionName":{"name":"mload","nativeSrc":"653:5:15","nodeType":"YulIdentifier","src":"653:5:15"},"nativeSrc":"653:9:15","nodeType":"YulFunctionCall","src":"653:9:15"},"variableNames":[{"name":"memPtr","nativeSrc":"643:6:15","nodeType":"YulIdentifier","src":"643:6:15"}]}]},"name":"allocate_unbounded","nativeSrc":"593:75:15","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nativeSrc":"626:6:15","nodeType":"YulTypedName","src":"626:6:15","type":""}],"src":"593:75:15"},{"body":{"nativeSrc":"763:28:15","nodeType":"YulBlock","src":"763:28:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"780:1:15","nodeType":"YulLiteral","src":"780:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"783:1:15","nodeType":"YulLiteral","src":"783:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"773:6:15","nodeType":"YulIdentifier","src":"773:6:15"},"nativeSrc":"773:12:15","nodeType":"YulFunctionCall","src":"773:12:15"},"nativeSrc":"773:12:15","nodeType":"YulExpressionStatement","src":"773:12:15"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"674:117:15","nodeType":"YulFunctionDefinition","src":"674:117:15"},{"body":{"nativeSrc":"886:28:15","nodeType":"YulBlock","src":"886:28:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"903:1:15","nodeType":"YulLiteral","src":"903:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"906:1:15","nodeType":"YulLiteral","src":"906:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"896:6:15","nodeType":"YulIdentifier","src":"896:6:15"},"nativeSrc":"896:12:15","nodeType":"YulFunctionCall","src":"896:12:15"},"nativeSrc":"896:12:15","nodeType":"YulExpressionStatement","src":"896:12:15"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"797:117:15","nodeType":"YulFunctionDefinition","src":"797:117:15"},{"body":{"nativeSrc":"963:79:15","nodeType":"YulBlock","src":"963:79:15","statements":[{"body":{"nativeSrc":"1020:16:15","nodeType":"YulBlock","src":"1020:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1029:1:15","nodeType":"YulLiteral","src":"1029:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"1032:1:15","nodeType":"YulLiteral","src":"1032:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1022:6:15","nodeType":"YulIdentifier","src":"1022:6:15"},"nativeSrc":"1022:12:15","nodeType":"YulFunctionCall","src":"1022:12:15"},"nativeSrc":"1022:12:15","nodeType":"YulExpressionStatement","src":"1022:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"986:5:15","nodeType":"YulIdentifier","src":"986:5:15"},{"arguments":[{"name":"value","nativeSrc":"1011:5:15","nodeType":"YulIdentifier","src":"1011:5:15"}],"functionName":{"name":"cleanup_t_address","nativeSrc":"993:17:15","nodeType":"YulIdentifier","src":"993:17:15"},"nativeSrc":"993:24:15","nodeType":"YulFunctionCall","src":"993:24:15"}],"functionName":{"name":"eq","nativeSrc":"983:2:15","nodeType":"YulIdentifier","src":"983:2:15"},"nativeSrc":"983:35:15","nodeType":"YulFunctionCall","src":"983:35:15"}],"functionName":{"name":"iszero","nativeSrc":"976:6:15","nodeType":"YulIdentifier","src":"976:6:15"},"nativeSrc":"976:43:15","nodeType":"YulFunctionCall","src":"976:43:15"},"nativeSrc":"973:63:15","nodeType":"YulIf","src":"973:63:15"}]},"name":"validator_revert_t_address","nativeSrc":"920:122:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"956:5:15","nodeType":"YulTypedName","src":"956:5:15","type":""}],"src":"920:122:15"},{"body":{"nativeSrc":"1100:87:15","nodeType":"YulBlock","src":"1100:87:15","statements":[{"nativeSrc":"1110:29:15","nodeType":"YulAssignment","src":"1110:29:15","value":{"arguments":[{"name":"offset","nativeSrc":"1132:6:15","nodeType":"YulIdentifier","src":"1132:6:15"}],"functionName":{"name":"calldataload","nativeSrc":"1119:12:15","nodeType":"YulIdentifier","src":"1119:12:15"},"nativeSrc":"1119:20:15","nodeType":"YulFunctionCall","src":"1119:20:15"},"variableNames":[{"name":"value","nativeSrc":"1110:5:15","nodeType":"YulIdentifier","src":"1110:5:15"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"1175:5:15","nodeType":"YulIdentifier","src":"1175:5:15"}],"functionName":{"name":"validator_revert_t_address","nativeSrc":"1148:26:15","nodeType":"YulIdentifier","src":"1148:26:15"},"nativeSrc":"1148:33:15","nodeType":"YulFunctionCall","src":"1148:33:15"},"nativeSrc":"1148:33:15","nodeType":"YulExpressionStatement","src":"1148:33:15"}]},"name":"abi_decode_t_address","nativeSrc":"1048:139:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"1078:6:15","nodeType":"YulTypedName","src":"1078:6:15","type":""},{"name":"end","nativeSrc":"1086:3:15","nodeType":"YulTypedName","src":"1086:3:15","type":""}],"returnVariables":[{"name":"value","nativeSrc":"1094:5:15","nodeType":"YulTypedName","src":"1094:5:15","type":""}],"src":"1048:139:15"},{"body":{"nativeSrc":"1259:263:15","nodeType":"YulBlock","src":"1259:263:15","statements":[{"body":{"nativeSrc":"1305:83:15","nodeType":"YulBlock","src":"1305:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"1307:77:15","nodeType":"YulIdentifier","src":"1307:77:15"},"nativeSrc":"1307:79:15","nodeType":"YulFunctionCall","src":"1307:79:15"},"nativeSrc":"1307:79:15","nodeType":"YulExpressionStatement","src":"1307:79:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1280:7:15","nodeType":"YulIdentifier","src":"1280:7:15"},{"name":"headStart","nativeSrc":"1289:9:15","nodeType":"YulIdentifier","src":"1289:9:15"}],"functionName":{"name":"sub","nativeSrc":"1276:3:15","nodeType":"YulIdentifier","src":"1276:3:15"},"nativeSrc":"1276:23:15","nodeType":"YulFunctionCall","src":"1276:23:15"},{"kind":"number","nativeSrc":"1301:2:15","nodeType":"YulLiteral","src":"1301:2:15","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"1272:3:15","nodeType":"YulIdentifier","src":"1272:3:15"},"nativeSrc":"1272:32:15","nodeType":"YulFunctionCall","src":"1272:32:15"},"nativeSrc":"1269:119:15","nodeType":"YulIf","src":"1269:119:15"},{"nativeSrc":"1398:117:15","nodeType":"YulBlock","src":"1398:117:15","statements":[{"nativeSrc":"1413:15:15","nodeType":"YulVariableDeclaration","src":"1413:15:15","value":{"kind":"number","nativeSrc":"1427:1:15","nodeType":"YulLiteral","src":"1427:1:15","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"1417:6:15","nodeType":"YulTypedName","src":"1417:6:15","type":""}]},{"nativeSrc":"1442:63:15","nodeType":"YulAssignment","src":"1442:63:15","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1477:9:15","nodeType":"YulIdentifier","src":"1477:9:15"},{"name":"offset","nativeSrc":"1488:6:15","nodeType":"YulIdentifier","src":"1488:6:15"}],"functionName":{"name":"add","nativeSrc":"1473:3:15","nodeType":"YulIdentifier","src":"1473:3:15"},"nativeSrc":"1473:22:15","nodeType":"YulFunctionCall","src":"1473:22:15"},{"name":"dataEnd","nativeSrc":"1497:7:15","nodeType":"YulIdentifier","src":"1497:7:15"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"1452:20:15","nodeType":"YulIdentifier","src":"1452:20:15"},"nativeSrc":"1452:53:15","nodeType":"YulFunctionCall","src":"1452:53:15"},"variableNames":[{"name":"value0","nativeSrc":"1442:6:15","nodeType":"YulIdentifier","src":"1442:6:15"}]}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"1193:329:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1229:9:15","nodeType":"YulTypedName","src":"1229:9:15","type":""},{"name":"dataEnd","nativeSrc":"1240:7:15","nodeType":"YulTypedName","src":"1240:7:15","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1252:6:15","nodeType":"YulTypedName","src":"1252:6:15","type":""}],"src":"1193:329:15"},{"body":{"nativeSrc":"1624:73:15","nodeType":"YulBlock","src":"1624:73:15","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"1641:3:15","nodeType":"YulIdentifier","src":"1641:3:15"},{"name":"length","nativeSrc":"1646:6:15","nodeType":"YulIdentifier","src":"1646:6:15"}],"functionName":{"name":"mstore","nativeSrc":"1634:6:15","nodeType":"YulIdentifier","src":"1634:6:15"},"nativeSrc":"1634:19:15","nodeType":"YulFunctionCall","src":"1634:19:15"},"nativeSrc":"1634:19:15","nodeType":"YulExpressionStatement","src":"1634:19:15"},{"nativeSrc":"1662:29:15","nodeType":"YulAssignment","src":"1662:29:15","value":{"arguments":[{"name":"pos","nativeSrc":"1681:3:15","nodeType":"YulIdentifier","src":"1681:3:15"},{"kind":"number","nativeSrc":"1686:4:15","nodeType":"YulLiteral","src":"1686:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1677:3:15","nodeType":"YulIdentifier","src":"1677:3:15"},"nativeSrc":"1677:14:15","nodeType":"YulFunctionCall","src":"1677:14:15"},"variableNames":[{"name":"updated_pos","nativeSrc":"1662:11:15","nodeType":"YulIdentifier","src":"1662:11:15"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"1528:169:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"1596:3:15","nodeType":"YulTypedName","src":"1596:3:15","type":""},{"name":"length","nativeSrc":"1601:6:15","nodeType":"YulTypedName","src":"1601:6:15","type":""}],"returnVariables":[{"name":"updated_pos","nativeSrc":"1612:11:15","nodeType":"YulTypedName","src":"1612:11:15","type":""}],"src":"1528:169:15"},{"body":{"nativeSrc":"1809:66:15","nodeType":"YulBlock","src":"1809:66:15","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"1831:6:15","nodeType":"YulIdentifier","src":"1831:6:15"},{"kind":"number","nativeSrc":"1839:1:15","nodeType":"YulLiteral","src":"1839:1:15","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"1827:3:15","nodeType":"YulIdentifier","src":"1827:3:15"},"nativeSrc":"1827:14:15","nodeType":"YulFunctionCall","src":"1827:14:15"},{"hexValue":"4d7573742062652070726f706f736564206f776e6572","kind":"string","nativeSrc":"1843:24:15","nodeType":"YulLiteral","src":"1843:24:15","type":"","value":"Must be proposed owner"}],"functionName":{"name":"mstore","nativeSrc":"1820:6:15","nodeType":"YulIdentifier","src":"1820:6:15"},"nativeSrc":"1820:48:15","nodeType":"YulFunctionCall","src":"1820:48:15"},"nativeSrc":"1820:48:15","nodeType":"YulExpressionStatement","src":"1820:48:15"}]},"name":"store_literal_in_memory_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c","nativeSrc":"1703:172:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"1801:6:15","nodeType":"YulTypedName","src":"1801:6:15","type":""}],"src":"1703:172:15"},{"body":{"nativeSrc":"2027:220:15","nodeType":"YulBlock","src":"2027:220:15","statements":[{"nativeSrc":"2037:74:15","nodeType":"YulAssignment","src":"2037:74:15","value":{"arguments":[{"name":"pos","nativeSrc":"2103:3:15","nodeType":"YulIdentifier","src":"2103:3:15"},{"kind":"number","nativeSrc":"2108:2:15","nodeType":"YulLiteral","src":"2108:2:15","type":"","value":"22"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"2044:58:15","nodeType":"YulIdentifier","src":"2044:58:15"},"nativeSrc":"2044:67:15","nodeType":"YulFunctionCall","src":"2044:67:15"},"variableNames":[{"name":"pos","nativeSrc":"2037:3:15","nodeType":"YulIdentifier","src":"2037:3:15"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"2209:3:15","nodeType":"YulIdentifier","src":"2209:3:15"}],"functionName":{"name":"store_literal_in_memory_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c","nativeSrc":"2120:88:15","nodeType":"YulIdentifier","src":"2120:88:15"},"nativeSrc":"2120:93:15","nodeType":"YulFunctionCall","src":"2120:93:15"},"nativeSrc":"2120:93:15","nodeType":"YulExpressionStatement","src":"2120:93:15"},{"nativeSrc":"2222:19:15","nodeType":"YulAssignment","src":"2222:19:15","value":{"arguments":[{"name":"pos","nativeSrc":"2233:3:15","nodeType":"YulIdentifier","src":"2233:3:15"},{"kind":"number","nativeSrc":"2238:2:15","nodeType":"YulLiteral","src":"2238:2:15","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2229:3:15","nodeType":"YulIdentifier","src":"2229:3:15"},"nativeSrc":"2229:12:15","nodeType":"YulFunctionCall","src":"2229:12:15"},"variableNames":[{"name":"end","nativeSrc":"2222:3:15","nodeType":"YulIdentifier","src":"2222:3:15"}]}]},"name":"abi_encode_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c_to_t_string_memory_ptr_fromStack","nativeSrc":"1881:366:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"2015:3:15","nodeType":"YulTypedName","src":"2015:3:15","type":""}],"returnVariables":[{"name":"end","nativeSrc":"2023:3:15","nodeType":"YulTypedName","src":"2023:3:15","type":""}],"src":"1881:366:15"},{"body":{"nativeSrc":"2424:248:15","nodeType":"YulBlock","src":"2424:248:15","statements":[{"nativeSrc":"2434:26:15","nodeType":"YulAssignment","src":"2434:26:15","value":{"arguments":[{"name":"headStart","nativeSrc":"2446:9:15","nodeType":"YulIdentifier","src":"2446:9:15"},{"kind":"number","nativeSrc":"2457:2:15","nodeType":"YulLiteral","src":"2457:2:15","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2442:3:15","nodeType":"YulIdentifier","src":"2442:3:15"},"nativeSrc":"2442:18:15","nodeType":"YulFunctionCall","src":"2442:18:15"},"variableNames":[{"name":"tail","nativeSrc":"2434:4:15","nodeType":"YulIdentifier","src":"2434:4:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2481:9:15","nodeType":"YulIdentifier","src":"2481:9:15"},{"kind":"number","nativeSrc":"2492:1:15","nodeType":"YulLiteral","src":"2492:1:15","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"2477:3:15","nodeType":"YulIdentifier","src":"2477:3:15"},"nativeSrc":"2477:17:15","nodeType":"YulFunctionCall","src":"2477:17:15"},{"arguments":[{"name":"tail","nativeSrc":"2500:4:15","nodeType":"YulIdentifier","src":"2500:4:15"},{"name":"headStart","nativeSrc":"2506:9:15","nodeType":"YulIdentifier","src":"2506:9:15"}],"functionName":{"name":"sub","nativeSrc":"2496:3:15","nodeType":"YulIdentifier","src":"2496:3:15"},"nativeSrc":"2496:20:15","nodeType":"YulFunctionCall","src":"2496:20:15"}],"functionName":{"name":"mstore","nativeSrc":"2470:6:15","nodeType":"YulIdentifier","src":"2470:6:15"},"nativeSrc":"2470:47:15","nodeType":"YulFunctionCall","src":"2470:47:15"},"nativeSrc":"2470:47:15","nodeType":"YulExpressionStatement","src":"2470:47:15"},{"nativeSrc":"2526:139:15","nodeType":"YulAssignment","src":"2526:139:15","value":{"arguments":[{"name":"tail","nativeSrc":"2660:4:15","nodeType":"YulIdentifier","src":"2660:4:15"}],"functionName":{"name":"abi_encode_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c_to_t_string_memory_ptr_fromStack","nativeSrc":"2534:124:15","nodeType":"YulIdentifier","src":"2534:124:15"},"nativeSrc":"2534:131:15","nodeType":"YulFunctionCall","src":"2534:131:15"},"variableNames":[{"name":"tail","nativeSrc":"2526:4:15","nodeType":"YulIdentifier","src":"2526:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"2253:419:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2404:9:15","nodeType":"YulTypedName","src":"2404:9:15","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2419:4:15","nodeType":"YulTypedName","src":"2419:4:15","type":""}],"src":"2253:419:15"},{"body":{"nativeSrc":"2784:66:15","nodeType":"YulBlock","src":"2784:66:15","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"2806:6:15","nodeType":"YulIdentifier","src":"2806:6:15"},{"kind":"number","nativeSrc":"2814:1:15","nodeType":"YulLiteral","src":"2814:1:15","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"2802:3:15","nodeType":"YulIdentifier","src":"2802:3:15"},"nativeSrc":"2802:14:15","nodeType":"YulFunctionCall","src":"2802:14:15"},{"hexValue":"4f6e6c792063616c6c61626c65206279206f776e6572","kind":"string","nativeSrc":"2818:24:15","nodeType":"YulLiteral","src":"2818:24:15","type":"","value":"Only callable by owner"}],"functionName":{"name":"mstore","nativeSrc":"2795:6:15","nodeType":"YulIdentifier","src":"2795:6:15"},"nativeSrc":"2795:48:15","nodeType":"YulFunctionCall","src":"2795:48:15"},"nativeSrc":"2795:48:15","nodeType":"YulExpressionStatement","src":"2795:48:15"}]},"name":"store_literal_in_memory_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3","nativeSrc":"2678:172:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"2776:6:15","nodeType":"YulTypedName","src":"2776:6:15","type":""}],"src":"2678:172:15"},{"body":{"nativeSrc":"3002:220:15","nodeType":"YulBlock","src":"3002:220:15","statements":[{"nativeSrc":"3012:74:15","nodeType":"YulAssignment","src":"3012:74:15","value":{"arguments":[{"name":"pos","nativeSrc":"3078:3:15","nodeType":"YulIdentifier","src":"3078:3:15"},{"kind":"number","nativeSrc":"3083:2:15","nodeType":"YulLiteral","src":"3083:2:15","type":"","value":"22"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"3019:58:15","nodeType":"YulIdentifier","src":"3019:58:15"},"nativeSrc":"3019:67:15","nodeType":"YulFunctionCall","src":"3019:67:15"},"variableNames":[{"name":"pos","nativeSrc":"3012:3:15","nodeType":"YulIdentifier","src":"3012:3:15"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"3184:3:15","nodeType":"YulIdentifier","src":"3184:3:15"}],"functionName":{"name":"store_literal_in_memory_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3","nativeSrc":"3095:88:15","nodeType":"YulIdentifier","src":"3095:88:15"},"nativeSrc":"3095:93:15","nodeType":"YulFunctionCall","src":"3095:93:15"},"nativeSrc":"3095:93:15","nodeType":"YulExpressionStatement","src":"3095:93:15"},{"nativeSrc":"3197:19:15","nodeType":"YulAssignment","src":"3197:19:15","value":{"arguments":[{"name":"pos","nativeSrc":"3208:3:15","nodeType":"YulIdentifier","src":"3208:3:15"},{"kind":"number","nativeSrc":"3213:2:15","nodeType":"YulLiteral","src":"3213:2:15","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3204:3:15","nodeType":"YulIdentifier","src":"3204:3:15"},"nativeSrc":"3204:12:15","nodeType":"YulFunctionCall","src":"3204:12:15"},"variableNames":[{"name":"end","nativeSrc":"3197:3:15","nodeType":"YulIdentifier","src":"3197:3:15"}]}]},"name":"abi_encode_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3_to_t_string_memory_ptr_fromStack","nativeSrc":"2856:366:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"2990:3:15","nodeType":"YulTypedName","src":"2990:3:15","type":""}],"returnVariables":[{"name":"end","nativeSrc":"2998:3:15","nodeType":"YulTypedName","src":"2998:3:15","type":""}],"src":"2856:366:15"},{"body":{"nativeSrc":"3399:248:15","nodeType":"YulBlock","src":"3399:248:15","statements":[{"nativeSrc":"3409:26:15","nodeType":"YulAssignment","src":"3409:26:15","value":{"arguments":[{"name":"headStart","nativeSrc":"3421:9:15","nodeType":"YulIdentifier","src":"3421:9:15"},{"kind":"number","nativeSrc":"3432:2:15","nodeType":"YulLiteral","src":"3432:2:15","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3417:3:15","nodeType":"YulIdentifier","src":"3417:3:15"},"nativeSrc":"3417:18:15","nodeType":"YulFunctionCall","src":"3417:18:15"},"variableNames":[{"name":"tail","nativeSrc":"3409:4:15","nodeType":"YulIdentifier","src":"3409:4:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3456:9:15","nodeType":"YulIdentifier","src":"3456:9:15"},{"kind":"number","nativeSrc":"3467:1:15","nodeType":"YulLiteral","src":"3467:1:15","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"3452:3:15","nodeType":"YulIdentifier","src":"3452:3:15"},"nativeSrc":"3452:17:15","nodeType":"YulFunctionCall","src":"3452:17:15"},{"arguments":[{"name":"tail","nativeSrc":"3475:4:15","nodeType":"YulIdentifier","src":"3475:4:15"},{"name":"headStart","nativeSrc":"3481:9:15","nodeType":"YulIdentifier","src":"3481:9:15"}],"functionName":{"name":"sub","nativeSrc":"3471:3:15","nodeType":"YulIdentifier","src":"3471:3:15"},"nativeSrc":"3471:20:15","nodeType":"YulFunctionCall","src":"3471:20:15"}],"functionName":{"name":"mstore","nativeSrc":"3445:6:15","nodeType":"YulIdentifier","src":"3445:6:15"},"nativeSrc":"3445:47:15","nodeType":"YulFunctionCall","src":"3445:47:15"},"nativeSrc":"3445:47:15","nodeType":"YulExpressionStatement","src":"3445:47:15"},{"nativeSrc":"3501:139:15","nodeType":"YulAssignment","src":"3501:139:15","value":{"arguments":[{"name":"tail","nativeSrc":"3635:4:15","nodeType":"YulIdentifier","src":"3635:4:15"}],"functionName":{"name":"abi_encode_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3_to_t_string_memory_ptr_fromStack","nativeSrc":"3509:124:15","nodeType":"YulIdentifier","src":"3509:124:15"},"nativeSrc":"3509:131:15","nodeType":"YulFunctionCall","src":"3509:131:15"},"variableNames":[{"name":"tail","nativeSrc":"3501:4:15","nodeType":"YulIdentifier","src":"3501:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"3228:419:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3379:9:15","nodeType":"YulTypedName","src":"3379:9:15","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"3394:4:15","nodeType":"YulTypedName","src":"3394:4:15","type":""}],"src":"3228:419:15"},{"body":{"nativeSrc":"3759:67:15","nodeType":"YulBlock","src":"3759:67:15","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"3781:6:15","nodeType":"YulIdentifier","src":"3781:6:15"},{"kind":"number","nativeSrc":"3789:1:15","nodeType":"YulLiteral","src":"3789:1:15","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"3777:3:15","nodeType":"YulIdentifier","src":"3777:3:15"},"nativeSrc":"3777:14:15","nodeType":"YulFunctionCall","src":"3777:14:15"},{"hexValue":"43616e6e6f74207472616e7366657220746f2073656c66","kind":"string","nativeSrc":"3793:25:15","nodeType":"YulLiteral","src":"3793:25:15","type":"","value":"Cannot transfer to self"}],"functionName":{"name":"mstore","nativeSrc":"3770:6:15","nodeType":"YulIdentifier","src":"3770:6:15"},"nativeSrc":"3770:49:15","nodeType":"YulFunctionCall","src":"3770:49:15"},"nativeSrc":"3770:49:15","nodeType":"YulExpressionStatement","src":"3770:49:15"}]},"name":"store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2","nativeSrc":"3653:173:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"3751:6:15","nodeType":"YulTypedName","src":"3751:6:15","type":""}],"src":"3653:173:15"},{"body":{"nativeSrc":"3978:220:15","nodeType":"YulBlock","src":"3978:220:15","statements":[{"nativeSrc":"3988:74:15","nodeType":"YulAssignment","src":"3988:74:15","value":{"arguments":[{"name":"pos","nativeSrc":"4054:3:15","nodeType":"YulIdentifier","src":"4054:3:15"},{"kind":"number","nativeSrc":"4059:2:15","nodeType":"YulLiteral","src":"4059:2:15","type":"","value":"23"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"3995:58:15","nodeType":"YulIdentifier","src":"3995:58:15"},"nativeSrc":"3995:67:15","nodeType":"YulFunctionCall","src":"3995:67:15"},"variableNames":[{"name":"pos","nativeSrc":"3988:3:15","nodeType":"YulIdentifier","src":"3988:3:15"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"4160:3:15","nodeType":"YulIdentifier","src":"4160:3:15"}],"functionName":{"name":"store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2","nativeSrc":"4071:88:15","nodeType":"YulIdentifier","src":"4071:88:15"},"nativeSrc":"4071:93:15","nodeType":"YulFunctionCall","src":"4071:93:15"},"nativeSrc":"4071:93:15","nodeType":"YulExpressionStatement","src":"4071:93:15"},{"nativeSrc":"4173:19:15","nodeType":"YulAssignment","src":"4173:19:15","value":{"arguments":[{"name":"pos","nativeSrc":"4184:3:15","nodeType":"YulIdentifier","src":"4184:3:15"},{"kind":"number","nativeSrc":"4189:2:15","nodeType":"YulLiteral","src":"4189:2:15","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4180:3:15","nodeType":"YulIdentifier","src":"4180:3:15"},"nativeSrc":"4180:12:15","nodeType":"YulFunctionCall","src":"4180:12:15"},"variableNames":[{"name":"end","nativeSrc":"4173:3:15","nodeType":"YulIdentifier","src":"4173:3:15"}]}]},"name":"abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack","nativeSrc":"3832:366:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"3966:3:15","nodeType":"YulTypedName","src":"3966:3:15","type":""}],"returnVariables":[{"name":"end","nativeSrc":"3974:3:15","nodeType":"YulTypedName","src":"3974:3:15","type":""}],"src":"3832:366:15"},{"body":{"nativeSrc":"4375:248:15","nodeType":"YulBlock","src":"4375:248:15","statements":[{"nativeSrc":"4385:26:15","nodeType":"YulAssignment","src":"4385:26:15","value":{"arguments":[{"name":"headStart","nativeSrc":"4397:9:15","nodeType":"YulIdentifier","src":"4397:9:15"},{"kind":"number","nativeSrc":"4408:2:15","nodeType":"YulLiteral","src":"4408:2:15","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4393:3:15","nodeType":"YulIdentifier","src":"4393:3:15"},"nativeSrc":"4393:18:15","nodeType":"YulFunctionCall","src":"4393:18:15"},"variableNames":[{"name":"tail","nativeSrc":"4385:4:15","nodeType":"YulIdentifier","src":"4385:4:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4432:9:15","nodeType":"YulIdentifier","src":"4432:9:15"},{"kind":"number","nativeSrc":"4443:1:15","nodeType":"YulLiteral","src":"4443:1:15","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"4428:3:15","nodeType":"YulIdentifier","src":"4428:3:15"},"nativeSrc":"4428:17:15","nodeType":"YulFunctionCall","src":"4428:17:15"},{"arguments":[{"name":"tail","nativeSrc":"4451:4:15","nodeType":"YulIdentifier","src":"4451:4:15"},{"name":"headStart","nativeSrc":"4457:9:15","nodeType":"YulIdentifier","src":"4457:9:15"}],"functionName":{"name":"sub","nativeSrc":"4447:3:15","nodeType":"YulIdentifier","src":"4447:3:15"},"nativeSrc":"4447:20:15","nodeType":"YulFunctionCall","src":"4447:20:15"}],"functionName":{"name":"mstore","nativeSrc":"4421:6:15","nodeType":"YulIdentifier","src":"4421:6:15"},"nativeSrc":"4421:47:15","nodeType":"YulFunctionCall","src":"4421:47:15"},"nativeSrc":"4421:47:15","nodeType":"YulExpressionStatement","src":"4421:47:15"},{"nativeSrc":"4477:139:15","nodeType":"YulAssignment","src":"4477:139:15","value":{"arguments":[{"name":"tail","nativeSrc":"4611:4:15","nodeType":"YulIdentifier","src":"4611:4:15"}],"functionName":{"name":"abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack","nativeSrc":"4485:124:15","nodeType":"YulIdentifier","src":"4485:124:15"},"nativeSrc":"4485:131:15","nodeType":"YulFunctionCall","src":"4485:131:15"},"variableNames":[{"name":"tail","nativeSrc":"4477:4:15","nodeType":"YulIdentifier","src":"4477:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"4204:419:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4355:9:15","nodeType":"YulTypedName","src":"4355:9:15","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4370:4:15","nodeType":"YulTypedName","src":"4370:4:15","type":""}],"src":"4204:419:15"}]},"contents":"{\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c(memPtr) {\n\n        mstore(add(memPtr, 0), \"Must be proposed owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 22)\n        store_literal_in_memory_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3(memPtr) {\n\n        mstore(add(memPtr, 0), \"Only callable by owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 22)\n        store_literal_in_memory_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2(memPtr) {\n\n        mstore(add(memPtr, 0), \"Cannot transfer to self\")\n\n    }\n\n    function abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 23)\n        store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n}\n","id":15,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100415760003560e01c806379ba5097146100465780638da5cb5b14610050578063f2fde38b1461006e575b600080fd5b61004e61008a565b005b61005861021f565b6040516100659190610459565b60405180910390f35b610088600480360381019061008391906104a5565b610248565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461011a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101119061052f565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61025061025c565b610259816102ec565b50565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102e19061059b565b60405180910390fd5b565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361035a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035190610607565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061044382610418565b9050919050565b61045381610438565b82525050565b600060208201905061046e600083018461044a565b92915050565b600080fd5b61048281610438565b811461048d57600080fd5b50565b60008135905061049f81610479565b92915050565b6000602082840312156104bb576104ba610474565b5b60006104c984828501610490565b91505092915050565b600082825260208201905092915050565b7f4d7573742062652070726f706f736564206f776e657200000000000000000000600082015250565b60006105196016836104d2565b9150610524826104e3565b602082019050919050565b600060208201905081810360008301526105488161050c565b9050919050565b7f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000600082015250565b60006105856016836104d2565b91506105908261054f565b602082019050919050565b600060208201905081810360008301526105b481610578565b9050919050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b60006105f16017836104d2565b91506105fc826105bb565b602082019050919050565b60006020820190508181036000830152610620816105e4565b905091905056fea264697066735822122096a9b26ff68ebee96d178d08bb91561745cbede2f881906336a024605ef7a2c464736f6c63430008180033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x79BA5097 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x50 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x6E JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0x8A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x58 PUSH2 0x21F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x65 SWAP2 SWAP1 PUSH2 0x459 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x88 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x83 SWAP2 SWAP1 PUSH2 0x4A5 JUMP JUMPDEST PUSH2 0x248 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x11A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x111 SWAP1 PUSH2 0x52F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP CALLER PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x250 PUSH2 0x25C JUMP JUMPDEST PUSH2 0x259 DUP2 PUSH2 0x2EC JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2EA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2E1 SWAP1 PUSH2 0x59B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x35A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x351 SWAP1 PUSH2 0x607 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xED8889F560326EB138920D842192F0EB3DD22B4F139C87A2C57538E05BAE1278 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x443 DUP3 PUSH2 0x418 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x453 DUP2 PUSH2 0x438 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x46E PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x44A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x482 DUP2 PUSH2 0x438 JUMP JUMPDEST DUP2 EQ PUSH2 0x48D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x49F DUP2 PUSH2 0x479 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4BB JUMPI PUSH2 0x4BA PUSH2 0x474 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x4C9 DUP5 DUP3 DUP6 ADD PUSH2 0x490 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4D7573742062652070726F706F736564206F776E657200000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x519 PUSH1 0x16 DUP4 PUSH2 0x4D2 JUMP JUMPDEST SWAP2 POP PUSH2 0x524 DUP3 PUSH2 0x4E3 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x548 DUP2 PUSH2 0x50C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F6E6C792063616C6C61626C65206279206F776E657200000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x585 PUSH1 0x16 DUP4 PUSH2 0x4D2 JUMP JUMPDEST SWAP2 POP PUSH2 0x590 DUP3 PUSH2 0x54F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x5B4 DUP2 PUSH2 0x578 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x43616E6E6F74207472616E7366657220746F2073656C66000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5F1 PUSH1 0x17 DUP4 PUSH2 0x4D2 JUMP JUMPDEST SWAP2 POP PUSH2 0x5FC DUP3 PUSH2 0x5BB JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x620 DUP2 PUSH2 0x5E4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP7 0xA9 0xB2 PUSH16 0xF68EBEE96D178D08BB91561745CBEDE2 0xF8 DUP2 SWAP1 PUSH4 0x36A02460 MCOPY 0xF7 LOG2 0xC4 PUSH5 0x736F6C6343 STOP ADDMOD XOR STOP CALLER ","sourceMap":"240:141:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1026:316:3;;;:::i;:::-;;1382:81;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;847:98;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1026:316;1150:14;;;;;;;;;;;1136:28;;:10;:28;;;1128:63;;;;;;;;;;;;:::i;:::-;;;;;;;;;1198:16;1217:7;;;;;;;;;;;1198:26;;1240:10;1230:7;;:20;;;;;;;;;;;;;;;;;;1281:1;1256:14;;:27;;;;;;;;;;;;;;;;;;1326:10;1295:42;;1316:8;1295:42;;;;;;;;;;;;1071:271;1026:316::o;1382:81::-;1429:7;1451;;;;;;;;;;;1444:14;;1382:81;:::o;847:98::-;2075:20;:18;:20::i;:::-;918:22:::1;937:2;918:18;:22::i;:::-;847:98:::0;:::o;1809:162::-;1932:7;;;;;;;;;;1918:21;;:10;:21;;;1910:56;;;;;;;;;;;;:::i;:::-;;;;;;;;;1809:162::o;1536:239::-;1655:10;1649:16;;:2;:16;;;1641:52;;;;;;;;;;;;:::i;:::-;;;;;;;;;1717:2;1700:14;;:19;;;;;;;;;;;;;;;;;;1767:2;1731:39;;1758:7;;;;;;;;;;1731:39;;;;;;;;;;;;1536:239;:::o;7:126:15:-;44:7;84:42;77:5;73:54;62:65;;7:126;;;:::o;139:96::-;176:7;205:24;223:5;205:24;:::i;:::-;194:35;;139:96;;;:::o;241:118::-;328:24;346:5;328:24;:::i;:::-;323:3;316:37;241:118;;:::o;365:222::-;458:4;496:2;485:9;481:18;473:26;;509:71;577:1;566:9;562:17;553:6;509:71;:::i;:::-;365:222;;;;:::o;674:117::-;783:1;780;773:12;920:122;993:24;1011:5;993:24;:::i;:::-;986:5;983:35;973:63;;1032:1;1029;1022:12;973:63;920:122;:::o;1048:139::-;1094:5;1132:6;1119:20;1110:29;;1148:33;1175:5;1148:33;:::i;:::-;1048:139;;;;:::o;1193:329::-;1252:6;1301:2;1289:9;1280:7;1276:23;1272:32;1269:119;;;1307:79;;:::i;:::-;1269:119;1427:1;1452:53;1497:7;1488:6;1477:9;1473:22;1452:53;:::i;:::-;1442:63;;1398:117;1193:329;;;;:::o;1528:169::-;1612:11;1646:6;1641:3;1634:19;1686:4;1681:3;1677:14;1662:29;;1528:169;;;;:::o;1703:172::-;1843:24;1839:1;1831:6;1827:14;1820:48;1703:172;:::o;1881:366::-;2023:3;2044:67;2108:2;2103:3;2044:67;:::i;:::-;2037:74;;2120:93;2209:3;2120:93;:::i;:::-;2238:2;2233:3;2229:12;2222:19;;1881:366;;;:::o;2253:419::-;2419:4;2457:2;2446:9;2442:18;2434:26;;2506:9;2500:4;2496:20;2492:1;2481:9;2477:17;2470:47;2534:131;2660:4;2534:131;:::i;:::-;2526:139;;2253:419;;;:::o;2678:172::-;2818:24;2814:1;2806:6;2802:14;2795:48;2678:172;:::o;2856:366::-;2998:3;3019:67;3083:2;3078:3;3019:67;:::i;:::-;3012:74;;3095:93;3184:3;3095:93;:::i;:::-;3213:2;3208:3;3204:12;3197:19;;2856:366;;;:::o;3228:419::-;3394:4;3432:2;3421:9;3417:18;3409:26;;3481:9;3475:4;3471:20;3467:1;3456:9;3452:17;3445:47;3509:131;3635:4;3509:131;:::i;:::-;3501:139;;3228:419;;;:::o;3653:173::-;3793:25;3789:1;3781:6;3777:14;3770:49;3653:173;:::o;3832:366::-;3974:3;3995:67;4059:2;4054:3;3995:67;:::i;:::-;3988:74;;4071:93;4160:3;4071:93;:::i;:::-;4189:2;4184:3;4180:12;4173:19;;3832:366;;;:::o;4204:419::-;4370:4;4408:2;4397:9;4393:18;4385:26;;4457:9;4451:4;4447:20;4443:1;4432:9;4428:17;4421:47;4485:131;4611:4;4485:131;:::i;:::-;4477:139;;4204:419;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"325800","executionCost":"infinite","totalCost":"infinite"},"external":{"acceptOwnership()":"54518","owner()":"2522","transferOwnership(address)":"30676"}},"methodIdentifiers":{"acceptOwnership()":"79ba5097","owner()":"8da5cb5b","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"The ConfirmedOwner contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Allows an ownership transfer to be completed by the recipient.\"},\"owner()\":{\"notice\":\"Get the current owner\"},\"transferOwnership(address)\":{\"notice\":\"Allows an owner to begin transferring ownership to a new address.\"}},\"notice\":\"A contract with helpers for basic contract ownership.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\":\"ConfirmedOwner\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {ConfirmedOwnerWithProposal} from \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/// @title The ConfirmedOwner contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"keccak256\":\"0xdcb0e9135ddbe71ee27ba99fa06656960c66c964cf2ecb29696da1c1427d9861\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IOwnable} from \\\"../interfaces/IOwnable.sol\\\";\\n\\n/// @title The ConfirmedOwner contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract ConfirmedOwnerWithProposal is IOwnable {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /// @notice Allows an owner to begin transferring ownership to a new address.\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /// @notice Allows an ownership transfer to be completed by the recipient.\\n  function acceptOwnership() external override {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /// @notice Get the current owner\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /// @notice validate, transfer ownership, and emit relevant events\\n  function _transferOwnership(address to) private {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /// @notice validate access\\n  function _validateOwnership() internal view {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /// @notice Reverts if called by anyone other than the contract owner.\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x2422a055657a87e98be61f8f31abb1824ec50fd0f73949f4e3c6ac877efb6da8\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOwnable {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0x885de72b7b4e4f1bf8ba817a3f2bcc37fd9022d342c4ce76782151c30122d767\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":56,"contract":"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol:ConfirmedOwner","label":"s_owner","offset":0,"slot":"0","type":"t_address"},{"astId":58,"contract":"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol:ConfirmedOwner","label":"s_pendingOwner","offset":0,"slot":"1","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{"acceptOwnership()":{"notice":"Allows an ownership transfer to be completed by the recipient."},"owner()":{"notice":"Get the current owner"},"transferOwnership(address)":{"notice":"Allows an owner to begin transferring ownership to a new address."}},"notice":"A contract with helpers for basic contract ownership.","version":1}}},"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol":{"ConfirmedOwnerWithProposal":{"abi":[{"inputs":[{"internalType":"address","name":"newOwner","type":"address"},{"internalType":"address","name":"pendingOwner","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"OwnershipTransferRequested","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"acceptOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"title":"The ConfirmedOwner contract","version":1},"evm":{"bytecode":{"functionDebugData":{"@_104":{"entryPoint":null,"id":104,"parameterSlots":2,"returnSlots":0},"@_transferOwnership_188":{"entryPoint":300,"id":188,"parameterSlots":1,"returnSlots":0},"abi_decode_t_address_fromMemory":{"entryPoint":678,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address_fromMemory":{"entryPoint":699,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2_to_t_string_memory_ptr_fromStack":{"entryPoint":821,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack":{"entryPoint":929,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":856,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":964,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":763,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":637,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":605,"id":null,"parameterSlots":1,"returnSlots":1},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":600,"id":null,"parameterSlots":0,"returnSlots":0},"store_literal_in_memory_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2":{"entryPoint":780,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2":{"entryPoint":888,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":655,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:3483:15","nodeType":"YulBlock","src":"0:3483:15","statements":[{"body":{"nativeSrc":"47:35:15","nodeType":"YulBlock","src":"47:35:15","statements":[{"nativeSrc":"57:19:15","nodeType":"YulAssignment","src":"57:19:15","value":{"arguments":[{"kind":"number","nativeSrc":"73:2:15","nodeType":"YulLiteral","src":"73:2:15","type":"","value":"64"}],"functionName":{"name":"mload","nativeSrc":"67:5:15","nodeType":"YulIdentifier","src":"67:5:15"},"nativeSrc":"67:9:15","nodeType":"YulFunctionCall","src":"67:9:15"},"variableNames":[{"name":"memPtr","nativeSrc":"57:6:15","nodeType":"YulIdentifier","src":"57:6:15"}]}]},"name":"allocate_unbounded","nativeSrc":"7:75:15","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nativeSrc":"40:6:15","nodeType":"YulTypedName","src":"40:6:15","type":""}],"src":"7:75:15"},{"body":{"nativeSrc":"177:28:15","nodeType":"YulBlock","src":"177:28:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"194:1:15","nodeType":"YulLiteral","src":"194:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"197:1:15","nodeType":"YulLiteral","src":"197:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"187:6:15","nodeType":"YulIdentifier","src":"187:6:15"},"nativeSrc":"187:12:15","nodeType":"YulFunctionCall","src":"187:12:15"},"nativeSrc":"187:12:15","nodeType":"YulExpressionStatement","src":"187:12:15"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"88:117:15","nodeType":"YulFunctionDefinition","src":"88:117:15"},{"body":{"nativeSrc":"300:28:15","nodeType":"YulBlock","src":"300:28:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"317:1:15","nodeType":"YulLiteral","src":"317:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"320:1:15","nodeType":"YulLiteral","src":"320:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"310:6:15","nodeType":"YulIdentifier","src":"310:6:15"},"nativeSrc":"310:12:15","nodeType":"YulFunctionCall","src":"310:12:15"},"nativeSrc":"310:12:15","nodeType":"YulExpressionStatement","src":"310:12:15"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"211:117:15","nodeType":"YulFunctionDefinition","src":"211:117:15"},{"body":{"nativeSrc":"379:81:15","nodeType":"YulBlock","src":"379:81:15","statements":[{"nativeSrc":"389:65:15","nodeType":"YulAssignment","src":"389:65:15","value":{"arguments":[{"name":"value","nativeSrc":"404:5:15","nodeType":"YulIdentifier","src":"404:5:15"},{"kind":"number","nativeSrc":"411:42:15","nodeType":"YulLiteral","src":"411:42:15","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"400:3:15","nodeType":"YulIdentifier","src":"400:3:15"},"nativeSrc":"400:54:15","nodeType":"YulFunctionCall","src":"400:54:15"},"variableNames":[{"name":"cleaned","nativeSrc":"389:7:15","nodeType":"YulIdentifier","src":"389:7:15"}]}]},"name":"cleanup_t_uint160","nativeSrc":"334:126:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"361:5:15","nodeType":"YulTypedName","src":"361:5:15","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"371:7:15","nodeType":"YulTypedName","src":"371:7:15","type":""}],"src":"334:126:15"},{"body":{"nativeSrc":"511:51:15","nodeType":"YulBlock","src":"511:51:15","statements":[{"nativeSrc":"521:35:15","nodeType":"YulAssignment","src":"521:35:15","value":{"arguments":[{"name":"value","nativeSrc":"550:5:15","nodeType":"YulIdentifier","src":"550:5:15"}],"functionName":{"name":"cleanup_t_uint160","nativeSrc":"532:17:15","nodeType":"YulIdentifier","src":"532:17:15"},"nativeSrc":"532:24:15","nodeType":"YulFunctionCall","src":"532:24:15"},"variableNames":[{"name":"cleaned","nativeSrc":"521:7:15","nodeType":"YulIdentifier","src":"521:7:15"}]}]},"name":"cleanup_t_address","nativeSrc":"466:96:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"493:5:15","nodeType":"YulTypedName","src":"493:5:15","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"503:7:15","nodeType":"YulTypedName","src":"503:7:15","type":""}],"src":"466:96:15"},{"body":{"nativeSrc":"611:79:15","nodeType":"YulBlock","src":"611:79:15","statements":[{"body":{"nativeSrc":"668:16:15","nodeType":"YulBlock","src":"668:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"677:1:15","nodeType":"YulLiteral","src":"677:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"680:1:15","nodeType":"YulLiteral","src":"680:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"670:6:15","nodeType":"YulIdentifier","src":"670:6:15"},"nativeSrc":"670:12:15","nodeType":"YulFunctionCall","src":"670:12:15"},"nativeSrc":"670:12:15","nodeType":"YulExpressionStatement","src":"670:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"634:5:15","nodeType":"YulIdentifier","src":"634:5:15"},{"arguments":[{"name":"value","nativeSrc":"659:5:15","nodeType":"YulIdentifier","src":"659:5:15"}],"functionName":{"name":"cleanup_t_address","nativeSrc":"641:17:15","nodeType":"YulIdentifier","src":"641:17:15"},"nativeSrc":"641:24:15","nodeType":"YulFunctionCall","src":"641:24:15"}],"functionName":{"name":"eq","nativeSrc":"631:2:15","nodeType":"YulIdentifier","src":"631:2:15"},"nativeSrc":"631:35:15","nodeType":"YulFunctionCall","src":"631:35:15"}],"functionName":{"name":"iszero","nativeSrc":"624:6:15","nodeType":"YulIdentifier","src":"624:6:15"},"nativeSrc":"624:43:15","nodeType":"YulFunctionCall","src":"624:43:15"},"nativeSrc":"621:63:15","nodeType":"YulIf","src":"621:63:15"}]},"name":"validator_revert_t_address","nativeSrc":"568:122:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"604:5:15","nodeType":"YulTypedName","src":"604:5:15","type":""}],"src":"568:122:15"},{"body":{"nativeSrc":"759:80:15","nodeType":"YulBlock","src":"759:80:15","statements":[{"nativeSrc":"769:22:15","nodeType":"YulAssignment","src":"769:22:15","value":{"arguments":[{"name":"offset","nativeSrc":"784:6:15","nodeType":"YulIdentifier","src":"784:6:15"}],"functionName":{"name":"mload","nativeSrc":"778:5:15","nodeType":"YulIdentifier","src":"778:5:15"},"nativeSrc":"778:13:15","nodeType":"YulFunctionCall","src":"778:13:15"},"variableNames":[{"name":"value","nativeSrc":"769:5:15","nodeType":"YulIdentifier","src":"769:5:15"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"827:5:15","nodeType":"YulIdentifier","src":"827:5:15"}],"functionName":{"name":"validator_revert_t_address","nativeSrc":"800:26:15","nodeType":"YulIdentifier","src":"800:26:15"},"nativeSrc":"800:33:15","nodeType":"YulFunctionCall","src":"800:33:15"},"nativeSrc":"800:33:15","nodeType":"YulExpressionStatement","src":"800:33:15"}]},"name":"abi_decode_t_address_fromMemory","nativeSrc":"696:143:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"737:6:15","nodeType":"YulTypedName","src":"737:6:15","type":""},{"name":"end","nativeSrc":"745:3:15","nodeType":"YulTypedName","src":"745:3:15","type":""}],"returnVariables":[{"name":"value","nativeSrc":"753:5:15","nodeType":"YulTypedName","src":"753:5:15","type":""}],"src":"696:143:15"},{"body":{"nativeSrc":"939:413:15","nodeType":"YulBlock","src":"939:413:15","statements":[{"body":{"nativeSrc":"985:83:15","nodeType":"YulBlock","src":"985:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"987:77:15","nodeType":"YulIdentifier","src":"987:77:15"},"nativeSrc":"987:79:15","nodeType":"YulFunctionCall","src":"987:79:15"},"nativeSrc":"987:79:15","nodeType":"YulExpressionStatement","src":"987:79:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"960:7:15","nodeType":"YulIdentifier","src":"960:7:15"},{"name":"headStart","nativeSrc":"969:9:15","nodeType":"YulIdentifier","src":"969:9:15"}],"functionName":{"name":"sub","nativeSrc":"956:3:15","nodeType":"YulIdentifier","src":"956:3:15"},"nativeSrc":"956:23:15","nodeType":"YulFunctionCall","src":"956:23:15"},{"kind":"number","nativeSrc":"981:2:15","nodeType":"YulLiteral","src":"981:2:15","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"952:3:15","nodeType":"YulIdentifier","src":"952:3:15"},"nativeSrc":"952:32:15","nodeType":"YulFunctionCall","src":"952:32:15"},"nativeSrc":"949:119:15","nodeType":"YulIf","src":"949:119:15"},{"nativeSrc":"1078:128:15","nodeType":"YulBlock","src":"1078:128:15","statements":[{"nativeSrc":"1093:15:15","nodeType":"YulVariableDeclaration","src":"1093:15:15","value":{"kind":"number","nativeSrc":"1107:1:15","nodeType":"YulLiteral","src":"1107:1:15","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"1097:6:15","nodeType":"YulTypedName","src":"1097:6:15","type":""}]},{"nativeSrc":"1122:74:15","nodeType":"YulAssignment","src":"1122:74:15","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1168:9:15","nodeType":"YulIdentifier","src":"1168:9:15"},{"name":"offset","nativeSrc":"1179:6:15","nodeType":"YulIdentifier","src":"1179:6:15"}],"functionName":{"name":"add","nativeSrc":"1164:3:15","nodeType":"YulIdentifier","src":"1164:3:15"},"nativeSrc":"1164:22:15","nodeType":"YulFunctionCall","src":"1164:22:15"},{"name":"dataEnd","nativeSrc":"1188:7:15","nodeType":"YulIdentifier","src":"1188:7:15"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nativeSrc":"1132:31:15","nodeType":"YulIdentifier","src":"1132:31:15"},"nativeSrc":"1132:64:15","nodeType":"YulFunctionCall","src":"1132:64:15"},"variableNames":[{"name":"value0","nativeSrc":"1122:6:15","nodeType":"YulIdentifier","src":"1122:6:15"}]}]},{"nativeSrc":"1216:129:15","nodeType":"YulBlock","src":"1216:129:15","statements":[{"nativeSrc":"1231:16:15","nodeType":"YulVariableDeclaration","src":"1231:16:15","value":{"kind":"number","nativeSrc":"1245:2:15","nodeType":"YulLiteral","src":"1245:2:15","type":"","value":"32"},"variables":[{"name":"offset","nativeSrc":"1235:6:15","nodeType":"YulTypedName","src":"1235:6:15","type":""}]},{"nativeSrc":"1261:74:15","nodeType":"YulAssignment","src":"1261:74:15","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1307:9:15","nodeType":"YulIdentifier","src":"1307:9:15"},{"name":"offset","nativeSrc":"1318:6:15","nodeType":"YulIdentifier","src":"1318:6:15"}],"functionName":{"name":"add","nativeSrc":"1303:3:15","nodeType":"YulIdentifier","src":"1303:3:15"},"nativeSrc":"1303:22:15","nodeType":"YulFunctionCall","src":"1303:22:15"},{"name":"dataEnd","nativeSrc":"1327:7:15","nodeType":"YulIdentifier","src":"1327:7:15"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nativeSrc":"1271:31:15","nodeType":"YulIdentifier","src":"1271:31:15"},"nativeSrc":"1271:64:15","nodeType":"YulFunctionCall","src":"1271:64:15"},"variableNames":[{"name":"value1","nativeSrc":"1261:6:15","nodeType":"YulIdentifier","src":"1261:6:15"}]}]}]},"name":"abi_decode_tuple_t_addresst_address_fromMemory","nativeSrc":"845:507:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"901:9:15","nodeType":"YulTypedName","src":"901:9:15","type":""},{"name":"dataEnd","nativeSrc":"912:7:15","nodeType":"YulTypedName","src":"912:7:15","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"924:6:15","nodeType":"YulTypedName","src":"924:6:15","type":""},{"name":"value1","nativeSrc":"932:6:15","nodeType":"YulTypedName","src":"932:6:15","type":""}],"src":"845:507:15"},{"body":{"nativeSrc":"1454:73:15","nodeType":"YulBlock","src":"1454:73:15","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"1471:3:15","nodeType":"YulIdentifier","src":"1471:3:15"},{"name":"length","nativeSrc":"1476:6:15","nodeType":"YulIdentifier","src":"1476:6:15"}],"functionName":{"name":"mstore","nativeSrc":"1464:6:15","nodeType":"YulIdentifier","src":"1464:6:15"},"nativeSrc":"1464:19:15","nodeType":"YulFunctionCall","src":"1464:19:15"},"nativeSrc":"1464:19:15","nodeType":"YulExpressionStatement","src":"1464:19:15"},{"nativeSrc":"1492:29:15","nodeType":"YulAssignment","src":"1492:29:15","value":{"arguments":[{"name":"pos","nativeSrc":"1511:3:15","nodeType":"YulIdentifier","src":"1511:3:15"},{"kind":"number","nativeSrc":"1516:4:15","nodeType":"YulLiteral","src":"1516:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1507:3:15","nodeType":"YulIdentifier","src":"1507:3:15"},"nativeSrc":"1507:14:15","nodeType":"YulFunctionCall","src":"1507:14:15"},"variableNames":[{"name":"updated_pos","nativeSrc":"1492:11:15","nodeType":"YulIdentifier","src":"1492:11:15"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"1358:169:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"1426:3:15","nodeType":"YulTypedName","src":"1426:3:15","type":""},{"name":"length","nativeSrc":"1431:6:15","nodeType":"YulTypedName","src":"1431:6:15","type":""}],"returnVariables":[{"name":"updated_pos","nativeSrc":"1442:11:15","nodeType":"YulTypedName","src":"1442:11:15","type":""}],"src":"1358:169:15"},{"body":{"nativeSrc":"1639:68:15","nodeType":"YulBlock","src":"1639:68:15","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"1661:6:15","nodeType":"YulIdentifier","src":"1661:6:15"},{"kind":"number","nativeSrc":"1669:1:15","nodeType":"YulLiteral","src":"1669:1:15","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"1657:3:15","nodeType":"YulIdentifier","src":"1657:3:15"},"nativeSrc":"1657:14:15","nodeType":"YulFunctionCall","src":"1657:14:15"},{"hexValue":"43616e6e6f7420736574206f776e657220746f207a65726f","kind":"string","nativeSrc":"1673:26:15","nodeType":"YulLiteral","src":"1673:26:15","type":"","value":"Cannot set owner to zero"}],"functionName":{"name":"mstore","nativeSrc":"1650:6:15","nodeType":"YulIdentifier","src":"1650:6:15"},"nativeSrc":"1650:50:15","nodeType":"YulFunctionCall","src":"1650:50:15"},"nativeSrc":"1650:50:15","nodeType":"YulExpressionStatement","src":"1650:50:15"}]},"name":"store_literal_in_memory_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2","nativeSrc":"1533:174:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"1631:6:15","nodeType":"YulTypedName","src":"1631:6:15","type":""}],"src":"1533:174:15"},{"body":{"nativeSrc":"1859:220:15","nodeType":"YulBlock","src":"1859:220:15","statements":[{"nativeSrc":"1869:74:15","nodeType":"YulAssignment","src":"1869:74:15","value":{"arguments":[{"name":"pos","nativeSrc":"1935:3:15","nodeType":"YulIdentifier","src":"1935:3:15"},{"kind":"number","nativeSrc":"1940:2:15","nodeType":"YulLiteral","src":"1940:2:15","type":"","value":"24"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"1876:58:15","nodeType":"YulIdentifier","src":"1876:58:15"},"nativeSrc":"1876:67:15","nodeType":"YulFunctionCall","src":"1876:67:15"},"variableNames":[{"name":"pos","nativeSrc":"1869:3:15","nodeType":"YulIdentifier","src":"1869:3:15"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"2041:3:15","nodeType":"YulIdentifier","src":"2041:3:15"}],"functionName":{"name":"store_literal_in_memory_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2","nativeSrc":"1952:88:15","nodeType":"YulIdentifier","src":"1952:88:15"},"nativeSrc":"1952:93:15","nodeType":"YulFunctionCall","src":"1952:93:15"},"nativeSrc":"1952:93:15","nodeType":"YulExpressionStatement","src":"1952:93:15"},{"nativeSrc":"2054:19:15","nodeType":"YulAssignment","src":"2054:19:15","value":{"arguments":[{"name":"pos","nativeSrc":"2065:3:15","nodeType":"YulIdentifier","src":"2065:3:15"},{"kind":"number","nativeSrc":"2070:2:15","nodeType":"YulLiteral","src":"2070:2:15","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2061:3:15","nodeType":"YulIdentifier","src":"2061:3:15"},"nativeSrc":"2061:12:15","nodeType":"YulFunctionCall","src":"2061:12:15"},"variableNames":[{"name":"end","nativeSrc":"2054:3:15","nodeType":"YulIdentifier","src":"2054:3:15"}]}]},"name":"abi_encode_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2_to_t_string_memory_ptr_fromStack","nativeSrc":"1713:366:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"1847:3:15","nodeType":"YulTypedName","src":"1847:3:15","type":""}],"returnVariables":[{"name":"end","nativeSrc":"1855:3:15","nodeType":"YulTypedName","src":"1855:3:15","type":""}],"src":"1713:366:15"},{"body":{"nativeSrc":"2256:248:15","nodeType":"YulBlock","src":"2256:248:15","statements":[{"nativeSrc":"2266:26:15","nodeType":"YulAssignment","src":"2266:26:15","value":{"arguments":[{"name":"headStart","nativeSrc":"2278:9:15","nodeType":"YulIdentifier","src":"2278:9:15"},{"kind":"number","nativeSrc":"2289:2:15","nodeType":"YulLiteral","src":"2289:2:15","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2274:3:15","nodeType":"YulIdentifier","src":"2274:3:15"},"nativeSrc":"2274:18:15","nodeType":"YulFunctionCall","src":"2274:18:15"},"variableNames":[{"name":"tail","nativeSrc":"2266:4:15","nodeType":"YulIdentifier","src":"2266:4:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2313:9:15","nodeType":"YulIdentifier","src":"2313:9:15"},{"kind":"number","nativeSrc":"2324:1:15","nodeType":"YulLiteral","src":"2324:1:15","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"2309:3:15","nodeType":"YulIdentifier","src":"2309:3:15"},"nativeSrc":"2309:17:15","nodeType":"YulFunctionCall","src":"2309:17:15"},{"arguments":[{"name":"tail","nativeSrc":"2332:4:15","nodeType":"YulIdentifier","src":"2332:4:15"},{"name":"headStart","nativeSrc":"2338:9:15","nodeType":"YulIdentifier","src":"2338:9:15"}],"functionName":{"name":"sub","nativeSrc":"2328:3:15","nodeType":"YulIdentifier","src":"2328:3:15"},"nativeSrc":"2328:20:15","nodeType":"YulFunctionCall","src":"2328:20:15"}],"functionName":{"name":"mstore","nativeSrc":"2302:6:15","nodeType":"YulIdentifier","src":"2302:6:15"},"nativeSrc":"2302:47:15","nodeType":"YulFunctionCall","src":"2302:47:15"},"nativeSrc":"2302:47:15","nodeType":"YulExpressionStatement","src":"2302:47:15"},{"nativeSrc":"2358:139:15","nodeType":"YulAssignment","src":"2358:139:15","value":{"arguments":[{"name":"tail","nativeSrc":"2492:4:15","nodeType":"YulIdentifier","src":"2492:4:15"}],"functionName":{"name":"abi_encode_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2_to_t_string_memory_ptr_fromStack","nativeSrc":"2366:124:15","nodeType":"YulIdentifier","src":"2366:124:15"},"nativeSrc":"2366:131:15","nodeType":"YulFunctionCall","src":"2366:131:15"},"variableNames":[{"name":"tail","nativeSrc":"2358:4:15","nodeType":"YulIdentifier","src":"2358:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"2085:419:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2236:9:15","nodeType":"YulTypedName","src":"2236:9:15","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2251:4:15","nodeType":"YulTypedName","src":"2251:4:15","type":""}],"src":"2085:419:15"},{"body":{"nativeSrc":"2616:67:15","nodeType":"YulBlock","src":"2616:67:15","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"2638:6:15","nodeType":"YulIdentifier","src":"2638:6:15"},{"kind":"number","nativeSrc":"2646:1:15","nodeType":"YulLiteral","src":"2646:1:15","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"2634:3:15","nodeType":"YulIdentifier","src":"2634:3:15"},"nativeSrc":"2634:14:15","nodeType":"YulFunctionCall","src":"2634:14:15"},{"hexValue":"43616e6e6f74207472616e7366657220746f2073656c66","kind":"string","nativeSrc":"2650:25:15","nodeType":"YulLiteral","src":"2650:25:15","type":"","value":"Cannot transfer to self"}],"functionName":{"name":"mstore","nativeSrc":"2627:6:15","nodeType":"YulIdentifier","src":"2627:6:15"},"nativeSrc":"2627:49:15","nodeType":"YulFunctionCall","src":"2627:49:15"},"nativeSrc":"2627:49:15","nodeType":"YulExpressionStatement","src":"2627:49:15"}]},"name":"store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2","nativeSrc":"2510:173:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"2608:6:15","nodeType":"YulTypedName","src":"2608:6:15","type":""}],"src":"2510:173:15"},{"body":{"nativeSrc":"2835:220:15","nodeType":"YulBlock","src":"2835:220:15","statements":[{"nativeSrc":"2845:74:15","nodeType":"YulAssignment","src":"2845:74:15","value":{"arguments":[{"name":"pos","nativeSrc":"2911:3:15","nodeType":"YulIdentifier","src":"2911:3:15"},{"kind":"number","nativeSrc":"2916:2:15","nodeType":"YulLiteral","src":"2916:2:15","type":"","value":"23"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"2852:58:15","nodeType":"YulIdentifier","src":"2852:58:15"},"nativeSrc":"2852:67:15","nodeType":"YulFunctionCall","src":"2852:67:15"},"variableNames":[{"name":"pos","nativeSrc":"2845:3:15","nodeType":"YulIdentifier","src":"2845:3:15"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"3017:3:15","nodeType":"YulIdentifier","src":"3017:3:15"}],"functionName":{"name":"store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2","nativeSrc":"2928:88:15","nodeType":"YulIdentifier","src":"2928:88:15"},"nativeSrc":"2928:93:15","nodeType":"YulFunctionCall","src":"2928:93:15"},"nativeSrc":"2928:93:15","nodeType":"YulExpressionStatement","src":"2928:93:15"},{"nativeSrc":"3030:19:15","nodeType":"YulAssignment","src":"3030:19:15","value":{"arguments":[{"name":"pos","nativeSrc":"3041:3:15","nodeType":"YulIdentifier","src":"3041:3:15"},{"kind":"number","nativeSrc":"3046:2:15","nodeType":"YulLiteral","src":"3046:2:15","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3037:3:15","nodeType":"YulIdentifier","src":"3037:3:15"},"nativeSrc":"3037:12:15","nodeType":"YulFunctionCall","src":"3037:12:15"},"variableNames":[{"name":"end","nativeSrc":"3030:3:15","nodeType":"YulIdentifier","src":"3030:3:15"}]}]},"name":"abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack","nativeSrc":"2689:366:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"2823:3:15","nodeType":"YulTypedName","src":"2823:3:15","type":""}],"returnVariables":[{"name":"end","nativeSrc":"2831:3:15","nodeType":"YulTypedName","src":"2831:3:15","type":""}],"src":"2689:366:15"},{"body":{"nativeSrc":"3232:248:15","nodeType":"YulBlock","src":"3232:248:15","statements":[{"nativeSrc":"3242:26:15","nodeType":"YulAssignment","src":"3242:26:15","value":{"arguments":[{"name":"headStart","nativeSrc":"3254:9:15","nodeType":"YulIdentifier","src":"3254:9:15"},{"kind":"number","nativeSrc":"3265:2:15","nodeType":"YulLiteral","src":"3265:2:15","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3250:3:15","nodeType":"YulIdentifier","src":"3250:3:15"},"nativeSrc":"3250:18:15","nodeType":"YulFunctionCall","src":"3250:18:15"},"variableNames":[{"name":"tail","nativeSrc":"3242:4:15","nodeType":"YulIdentifier","src":"3242:4:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3289:9:15","nodeType":"YulIdentifier","src":"3289:9:15"},{"kind":"number","nativeSrc":"3300:1:15","nodeType":"YulLiteral","src":"3300:1:15","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"3285:3:15","nodeType":"YulIdentifier","src":"3285:3:15"},"nativeSrc":"3285:17:15","nodeType":"YulFunctionCall","src":"3285:17:15"},{"arguments":[{"name":"tail","nativeSrc":"3308:4:15","nodeType":"YulIdentifier","src":"3308:4:15"},{"name":"headStart","nativeSrc":"3314:9:15","nodeType":"YulIdentifier","src":"3314:9:15"}],"functionName":{"name":"sub","nativeSrc":"3304:3:15","nodeType":"YulIdentifier","src":"3304:3:15"},"nativeSrc":"3304:20:15","nodeType":"YulFunctionCall","src":"3304:20:15"}],"functionName":{"name":"mstore","nativeSrc":"3278:6:15","nodeType":"YulIdentifier","src":"3278:6:15"},"nativeSrc":"3278:47:15","nodeType":"YulFunctionCall","src":"3278:47:15"},"nativeSrc":"3278:47:15","nodeType":"YulExpressionStatement","src":"3278:47:15"},{"nativeSrc":"3334:139:15","nodeType":"YulAssignment","src":"3334:139:15","value":{"arguments":[{"name":"tail","nativeSrc":"3468:4:15","nodeType":"YulIdentifier","src":"3468:4:15"}],"functionName":{"name":"abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack","nativeSrc":"3342:124:15","nodeType":"YulIdentifier","src":"3342:124:15"},"nativeSrc":"3342:131:15","nodeType":"YulFunctionCall","src":"3342:131:15"},"variableNames":[{"name":"tail","nativeSrc":"3334:4:15","nodeType":"YulIdentifier","src":"3334:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"3061:419:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3212:9:15","nodeType":"YulTypedName","src":"3212:9:15","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"3227:4:15","nodeType":"YulTypedName","src":"3227:4:15","type":""}],"src":"3061:419:15"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_addresst_address_fromMemory(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2(memPtr) {\n\n        mstore(add(memPtr, 0), \"Cannot set owner to zero\")\n\n    }\n\n    function abi_encode_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 24)\n        store_literal_in_memory_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2(memPtr) {\n\n        mstore(add(memPtr, 0), \"Cannot transfer to self\")\n\n    }\n\n    function abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 23)\n        store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n}\n","id":15,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"608060405234801561001057600080fd5b50604051610a50380380610a50833981810160405281019061003291906102bb565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036100a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161009890610358565b60405180910390fd5b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610125576101248161012c60201b60201c565b5b50506103e4565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361019a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610191906103c4565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006102888261025d565b9050919050565b6102988161027d565b81146102a357600080fd5b50565b6000815190506102b58161028f565b92915050565b600080604083850312156102d2576102d1610258565b5b60006102e0858286016102a6565b92505060206102f1858286016102a6565b9150509250929050565b600082825260208201905092915050565b7f43616e6e6f7420736574206f776e657220746f207a65726f0000000000000000600082015250565b60006103426018836102fb565b915061034d8261030c565b602082019050919050565b6000602082019050818103600083015261037181610335565b9050919050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b60006103ae6017836102fb565b91506103b982610378565b602082019050919050565b600060208201905081810360008301526103dd816103a1565b9050919050565b61065d806103f36000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806379ba5097146100465780638da5cb5b14610050578063f2fde38b1461006e575b600080fd5b61004e61008a565b005b61005861021f565b6040516100659190610459565b60405180910390f35b610088600480360381019061008391906104a5565b610248565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461011a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101119061052f565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61025061025c565b610259816102ec565b50565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102e19061059b565b60405180910390fd5b565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361035a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035190610607565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061044382610418565b9050919050565b61045381610438565b82525050565b600060208201905061046e600083018461044a565b92915050565b600080fd5b61048281610438565b811461048d57600080fd5b50565b60008135905061049f81610479565b92915050565b6000602082840312156104bb576104ba610474565b5b60006104c984828501610490565b91505092915050565b600082825260208201905092915050565b7f4d7573742062652070726f706f736564206f776e657200000000000000000000600082015250565b60006105196016836104d2565b9150610524826104e3565b602082019050919050565b600060208201905081810360008301526105488161050c565b9050919050565b7f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000600082015250565b60006105856016836104d2565b91506105908261054f565b602082019050919050565b600060208201905081810360008301526105b481610578565b9050919050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b60006105f16017836104d2565b91506105fc826105bb565b602082019050919050565b60006020820190508181036000830152610620816105e4565b905091905056fea26469706673582212208f9417a18201b93f82f4e1e0a4fb121a0a2801b5c4bed17d5673a5cb749683a864736f6c63430008180033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0xA50 CODESIZE SUB DUP1 PUSH2 0xA50 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH2 0x32 SWAP2 SWAP1 PUSH2 0x2BB JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xA1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x98 SWAP1 PUSH2 0x358 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x125 JUMPI PUSH2 0x124 DUP2 PUSH2 0x12C PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST JUMPDEST POP POP PUSH2 0x3E4 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x19A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x191 SWAP1 PUSH2 0x3C4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xED8889F560326EB138920D842192F0EB3DD22B4F139C87A2C57538E05BAE1278 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x288 DUP3 PUSH2 0x25D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x298 DUP2 PUSH2 0x27D JUMP JUMPDEST DUP2 EQ PUSH2 0x2A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x2B5 DUP2 PUSH2 0x28F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2D2 JUMPI PUSH2 0x2D1 PUSH2 0x258 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2E0 DUP6 DUP3 DUP7 ADD PUSH2 0x2A6 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2F1 DUP6 DUP3 DUP7 ADD PUSH2 0x2A6 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x43616E6E6F7420736574206F776E657220746F207A65726F0000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x342 PUSH1 0x18 DUP4 PUSH2 0x2FB JUMP JUMPDEST SWAP2 POP PUSH2 0x34D DUP3 PUSH2 0x30C JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x371 DUP2 PUSH2 0x335 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x43616E6E6F74207472616E7366657220746F2073656C66000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3AE PUSH1 0x17 DUP4 PUSH2 0x2FB JUMP JUMPDEST SWAP2 POP PUSH2 0x3B9 DUP3 PUSH2 0x378 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3DD DUP2 PUSH2 0x3A1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x65D DUP1 PUSH2 0x3F3 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x79BA5097 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x50 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x6E JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0x8A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x58 PUSH2 0x21F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x65 SWAP2 SWAP1 PUSH2 0x459 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x88 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x83 SWAP2 SWAP1 PUSH2 0x4A5 JUMP JUMPDEST PUSH2 0x248 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x11A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x111 SWAP1 PUSH2 0x52F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP CALLER PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x250 PUSH2 0x25C JUMP JUMPDEST PUSH2 0x259 DUP2 PUSH2 0x2EC JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2EA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2E1 SWAP1 PUSH2 0x59B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x35A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x351 SWAP1 PUSH2 0x607 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xED8889F560326EB138920D842192F0EB3DD22B4F139C87A2C57538E05BAE1278 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x443 DUP3 PUSH2 0x418 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x453 DUP2 PUSH2 0x438 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x46E PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x44A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x482 DUP2 PUSH2 0x438 JUMP JUMPDEST DUP2 EQ PUSH2 0x48D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x49F DUP2 PUSH2 0x479 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4BB JUMPI PUSH2 0x4BA PUSH2 0x474 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x4C9 DUP5 DUP3 DUP6 ADD PUSH2 0x490 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4D7573742062652070726F706F736564206F776E657200000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x519 PUSH1 0x16 DUP4 PUSH2 0x4D2 JUMP JUMPDEST SWAP2 POP PUSH2 0x524 DUP3 PUSH2 0x4E3 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x548 DUP2 PUSH2 0x50C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F6E6C792063616C6C61626C65206279206F776E657200000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x585 PUSH1 0x16 DUP4 PUSH2 0x4D2 JUMP JUMPDEST SWAP2 POP PUSH2 0x590 DUP3 PUSH2 0x54F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x5B4 DUP2 PUSH2 0x578 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x43616E6E6F74207472616E7366657220746F2073656C66000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5F1 PUSH1 0x17 DUP4 PUSH2 0x4D2 JUMP JUMPDEST SWAP2 POP PUSH2 0x5FC DUP3 PUSH2 0x5BB JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x620 DUP2 PUSH2 0x5E4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP16 SWAP5 OR LOG1 DUP3 ADD 0xB9 EXTCODEHASH DUP3 DELEGATECALL 0xE1 0xE0 LOG4 0xFB SLT BYTE EXP 0x28 ADD 0xB5 0xC4 0xBE 0xD1 PUSH30 0x5673A5CB749683A864736F6C634300081800330000000000000000000000 ","sourceMap":"216:1893:3:-:0;;;481:282;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;618:1;598:22;;:8;:22;;;590:59;;;;;;;;;;;;:::i;:::-;;;;;;;;;666:8;656:7;;:18;;;;;;;;;;;;;;;;;;708:1;684:26;;:12;:26;;;680:79;;720:32;739:12;720:18;;;:32;;:::i;:::-;680:79;481:282;;216:1893;;1536:239;1655:10;1649:16;;:2;:16;;;1641:52;;;;;;;;;;;;:::i;:::-;;;;;;;;;1717:2;1700:14;;:19;;;;;;;;;;;;;;;;;;1767:2;1731:39;;1758:7;;;;;;;;;;1731:39;;;;;;;;;;;;1536:239;:::o;88:117:15:-;197:1;194;187:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:143::-;753:5;784:6;778:13;769:22;;800:33;827:5;800:33;:::i;:::-;696:143;;;;:::o;845:507::-;924:6;932;981:2;969:9;960:7;956:23;952:32;949:119;;;987:79;;:::i;:::-;949:119;1107:1;1132:64;1188:7;1179:6;1168:9;1164:22;1132:64;:::i;:::-;1122:74;;1078:128;1245:2;1271:64;1327:7;1318:6;1307:9;1303:22;1271:64;:::i;:::-;1261:74;;1216:129;845:507;;;;;:::o;1358:169::-;1442:11;1476:6;1471:3;1464:19;1516:4;1511:3;1507:14;1492:29;;1358:169;;;;:::o;1533:174::-;1673:26;1669:1;1661:6;1657:14;1650:50;1533:174;:::o;1713:366::-;1855:3;1876:67;1940:2;1935:3;1876:67;:::i;:::-;1869:74;;1952:93;2041:3;1952:93;:::i;:::-;2070:2;2065:3;2061:12;2054:19;;1713:366;;;:::o;2085:419::-;2251:4;2289:2;2278:9;2274:18;2266:26;;2338:9;2332:4;2328:20;2324:1;2313:9;2309:17;2302:47;2366:131;2492:4;2366:131;:::i;:::-;2358:139;;2085:419;;;:::o;2510:173::-;2650:25;2646:1;2638:6;2634:14;2627:49;2510:173;:::o;2689:366::-;2831:3;2852:67;2916:2;2911:3;2852:67;:::i;:::-;2845:74;;2928:93;3017:3;2928:93;:::i;:::-;3046:2;3041:3;3037:12;3030:19;;2689:366;;;:::o;3061:419::-;3227:4;3265:2;3254:9;3250:18;3242:26;;3314:9;3308:4;3304:20;3300:1;3289:9;3285:17;3278:47;3342:131;3468:4;3342:131;:::i;:::-;3334:139;;3061:419;;;:::o;216:1893:3:-;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_transferOwnership_188":{"entryPoint":748,"id":188,"parameterSlots":1,"returnSlots":0},"@_validateOwnership_201":{"entryPoint":604,"id":201,"parameterSlots":0,"returnSlots":0},"@acceptOwnership_154":{"entryPoint":138,"id":154,"parameterSlots":0,"returnSlots":0},"@owner_164":{"entryPoint":543,"id":164,"parameterSlots":0,"returnSlots":1},"@transferOwnership_118":{"entryPoint":584,"id":118,"parameterSlots":1,"returnSlots":0},"abi_decode_t_address":{"entryPoint":1168,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":1189,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":1098,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c_to_t_string_memory_ptr_fromStack":{"entryPoint":1292,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3_to_t_string_memory_ptr_fromStack":{"entryPoint":1400,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack":{"entryPoint":1508,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":1113,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":1327,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":1435,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":1543,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":1234,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":1080,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":1048,"id":null,"parameterSlots":1,"returnSlots":1},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":1140,"id":null,"parameterSlots":0,"returnSlots":0},"store_literal_in_memory_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c":{"entryPoint":1251,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3":{"entryPoint":1359,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2":{"entryPoint":1467,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":1145,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:4626:15","nodeType":"YulBlock","src":"0:4626:15","statements":[{"body":{"nativeSrc":"52:81:15","nodeType":"YulBlock","src":"52:81:15","statements":[{"nativeSrc":"62:65:15","nodeType":"YulAssignment","src":"62:65:15","value":{"arguments":[{"name":"value","nativeSrc":"77:5:15","nodeType":"YulIdentifier","src":"77:5:15"},{"kind":"number","nativeSrc":"84:42:15","nodeType":"YulLiteral","src":"84:42:15","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"73:3:15","nodeType":"YulIdentifier","src":"73:3:15"},"nativeSrc":"73:54:15","nodeType":"YulFunctionCall","src":"73:54:15"},"variableNames":[{"name":"cleaned","nativeSrc":"62:7:15","nodeType":"YulIdentifier","src":"62:7:15"}]}]},"name":"cleanup_t_uint160","nativeSrc":"7:126:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"34:5:15","nodeType":"YulTypedName","src":"34:5:15","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"44:7:15","nodeType":"YulTypedName","src":"44:7:15","type":""}],"src":"7:126:15"},{"body":{"nativeSrc":"184:51:15","nodeType":"YulBlock","src":"184:51:15","statements":[{"nativeSrc":"194:35:15","nodeType":"YulAssignment","src":"194:35:15","value":{"arguments":[{"name":"value","nativeSrc":"223:5:15","nodeType":"YulIdentifier","src":"223:5:15"}],"functionName":{"name":"cleanup_t_uint160","nativeSrc":"205:17:15","nodeType":"YulIdentifier","src":"205:17:15"},"nativeSrc":"205:24:15","nodeType":"YulFunctionCall","src":"205:24:15"},"variableNames":[{"name":"cleaned","nativeSrc":"194:7:15","nodeType":"YulIdentifier","src":"194:7:15"}]}]},"name":"cleanup_t_address","nativeSrc":"139:96:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"166:5:15","nodeType":"YulTypedName","src":"166:5:15","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"176:7:15","nodeType":"YulTypedName","src":"176:7:15","type":""}],"src":"139:96:15"},{"body":{"nativeSrc":"306:53:15","nodeType":"YulBlock","src":"306:53:15","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"323:3:15","nodeType":"YulIdentifier","src":"323:3:15"},{"arguments":[{"name":"value","nativeSrc":"346:5:15","nodeType":"YulIdentifier","src":"346:5:15"}],"functionName":{"name":"cleanup_t_address","nativeSrc":"328:17:15","nodeType":"YulIdentifier","src":"328:17:15"},"nativeSrc":"328:24:15","nodeType":"YulFunctionCall","src":"328:24:15"}],"functionName":{"name":"mstore","nativeSrc":"316:6:15","nodeType":"YulIdentifier","src":"316:6:15"},"nativeSrc":"316:37:15","nodeType":"YulFunctionCall","src":"316:37:15"},"nativeSrc":"316:37:15","nodeType":"YulExpressionStatement","src":"316:37:15"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"241:118:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"294:5:15","nodeType":"YulTypedName","src":"294:5:15","type":""},{"name":"pos","nativeSrc":"301:3:15","nodeType":"YulTypedName","src":"301:3:15","type":""}],"src":"241:118:15"},{"body":{"nativeSrc":"463:124:15","nodeType":"YulBlock","src":"463:124:15","statements":[{"nativeSrc":"473:26:15","nodeType":"YulAssignment","src":"473:26:15","value":{"arguments":[{"name":"headStart","nativeSrc":"485:9:15","nodeType":"YulIdentifier","src":"485:9:15"},{"kind":"number","nativeSrc":"496:2:15","nodeType":"YulLiteral","src":"496:2:15","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"481:3:15","nodeType":"YulIdentifier","src":"481:3:15"},"nativeSrc":"481:18:15","nodeType":"YulFunctionCall","src":"481:18:15"},"variableNames":[{"name":"tail","nativeSrc":"473:4:15","nodeType":"YulIdentifier","src":"473:4:15"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"553:6:15","nodeType":"YulIdentifier","src":"553:6:15"},{"arguments":[{"name":"headStart","nativeSrc":"566:9:15","nodeType":"YulIdentifier","src":"566:9:15"},{"kind":"number","nativeSrc":"577:1:15","nodeType":"YulLiteral","src":"577:1:15","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"562:3:15","nodeType":"YulIdentifier","src":"562:3:15"},"nativeSrc":"562:17:15","nodeType":"YulFunctionCall","src":"562:17:15"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"509:43:15","nodeType":"YulIdentifier","src":"509:43:15"},"nativeSrc":"509:71:15","nodeType":"YulFunctionCall","src":"509:71:15"},"nativeSrc":"509:71:15","nodeType":"YulExpressionStatement","src":"509:71:15"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"365:222:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"435:9:15","nodeType":"YulTypedName","src":"435:9:15","type":""},{"name":"value0","nativeSrc":"447:6:15","nodeType":"YulTypedName","src":"447:6:15","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"458:4:15","nodeType":"YulTypedName","src":"458:4:15","type":""}],"src":"365:222:15"},{"body":{"nativeSrc":"633:35:15","nodeType":"YulBlock","src":"633:35:15","statements":[{"nativeSrc":"643:19:15","nodeType":"YulAssignment","src":"643:19:15","value":{"arguments":[{"kind":"number","nativeSrc":"659:2:15","nodeType":"YulLiteral","src":"659:2:15","type":"","value":"64"}],"functionName":{"name":"mload","nativeSrc":"653:5:15","nodeType":"YulIdentifier","src":"653:5:15"},"nativeSrc":"653:9:15","nodeType":"YulFunctionCall","src":"653:9:15"},"variableNames":[{"name":"memPtr","nativeSrc":"643:6:15","nodeType":"YulIdentifier","src":"643:6:15"}]}]},"name":"allocate_unbounded","nativeSrc":"593:75:15","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nativeSrc":"626:6:15","nodeType":"YulTypedName","src":"626:6:15","type":""}],"src":"593:75:15"},{"body":{"nativeSrc":"763:28:15","nodeType":"YulBlock","src":"763:28:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"780:1:15","nodeType":"YulLiteral","src":"780:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"783:1:15","nodeType":"YulLiteral","src":"783:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"773:6:15","nodeType":"YulIdentifier","src":"773:6:15"},"nativeSrc":"773:12:15","nodeType":"YulFunctionCall","src":"773:12:15"},"nativeSrc":"773:12:15","nodeType":"YulExpressionStatement","src":"773:12:15"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"674:117:15","nodeType":"YulFunctionDefinition","src":"674:117:15"},{"body":{"nativeSrc":"886:28:15","nodeType":"YulBlock","src":"886:28:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"903:1:15","nodeType":"YulLiteral","src":"903:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"906:1:15","nodeType":"YulLiteral","src":"906:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"896:6:15","nodeType":"YulIdentifier","src":"896:6:15"},"nativeSrc":"896:12:15","nodeType":"YulFunctionCall","src":"896:12:15"},"nativeSrc":"896:12:15","nodeType":"YulExpressionStatement","src":"896:12:15"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"797:117:15","nodeType":"YulFunctionDefinition","src":"797:117:15"},{"body":{"nativeSrc":"963:79:15","nodeType":"YulBlock","src":"963:79:15","statements":[{"body":{"nativeSrc":"1020:16:15","nodeType":"YulBlock","src":"1020:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1029:1:15","nodeType":"YulLiteral","src":"1029:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"1032:1:15","nodeType":"YulLiteral","src":"1032:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1022:6:15","nodeType":"YulIdentifier","src":"1022:6:15"},"nativeSrc":"1022:12:15","nodeType":"YulFunctionCall","src":"1022:12:15"},"nativeSrc":"1022:12:15","nodeType":"YulExpressionStatement","src":"1022:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"986:5:15","nodeType":"YulIdentifier","src":"986:5:15"},{"arguments":[{"name":"value","nativeSrc":"1011:5:15","nodeType":"YulIdentifier","src":"1011:5:15"}],"functionName":{"name":"cleanup_t_address","nativeSrc":"993:17:15","nodeType":"YulIdentifier","src":"993:17:15"},"nativeSrc":"993:24:15","nodeType":"YulFunctionCall","src":"993:24:15"}],"functionName":{"name":"eq","nativeSrc":"983:2:15","nodeType":"YulIdentifier","src":"983:2:15"},"nativeSrc":"983:35:15","nodeType":"YulFunctionCall","src":"983:35:15"}],"functionName":{"name":"iszero","nativeSrc":"976:6:15","nodeType":"YulIdentifier","src":"976:6:15"},"nativeSrc":"976:43:15","nodeType":"YulFunctionCall","src":"976:43:15"},"nativeSrc":"973:63:15","nodeType":"YulIf","src":"973:63:15"}]},"name":"validator_revert_t_address","nativeSrc":"920:122:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"956:5:15","nodeType":"YulTypedName","src":"956:5:15","type":""}],"src":"920:122:15"},{"body":{"nativeSrc":"1100:87:15","nodeType":"YulBlock","src":"1100:87:15","statements":[{"nativeSrc":"1110:29:15","nodeType":"YulAssignment","src":"1110:29:15","value":{"arguments":[{"name":"offset","nativeSrc":"1132:6:15","nodeType":"YulIdentifier","src":"1132:6:15"}],"functionName":{"name":"calldataload","nativeSrc":"1119:12:15","nodeType":"YulIdentifier","src":"1119:12:15"},"nativeSrc":"1119:20:15","nodeType":"YulFunctionCall","src":"1119:20:15"},"variableNames":[{"name":"value","nativeSrc":"1110:5:15","nodeType":"YulIdentifier","src":"1110:5:15"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"1175:5:15","nodeType":"YulIdentifier","src":"1175:5:15"}],"functionName":{"name":"validator_revert_t_address","nativeSrc":"1148:26:15","nodeType":"YulIdentifier","src":"1148:26:15"},"nativeSrc":"1148:33:15","nodeType":"YulFunctionCall","src":"1148:33:15"},"nativeSrc":"1148:33:15","nodeType":"YulExpressionStatement","src":"1148:33:15"}]},"name":"abi_decode_t_address","nativeSrc":"1048:139:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"1078:6:15","nodeType":"YulTypedName","src":"1078:6:15","type":""},{"name":"end","nativeSrc":"1086:3:15","nodeType":"YulTypedName","src":"1086:3:15","type":""}],"returnVariables":[{"name":"value","nativeSrc":"1094:5:15","nodeType":"YulTypedName","src":"1094:5:15","type":""}],"src":"1048:139:15"},{"body":{"nativeSrc":"1259:263:15","nodeType":"YulBlock","src":"1259:263:15","statements":[{"body":{"nativeSrc":"1305:83:15","nodeType":"YulBlock","src":"1305:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"1307:77:15","nodeType":"YulIdentifier","src":"1307:77:15"},"nativeSrc":"1307:79:15","nodeType":"YulFunctionCall","src":"1307:79:15"},"nativeSrc":"1307:79:15","nodeType":"YulExpressionStatement","src":"1307:79:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1280:7:15","nodeType":"YulIdentifier","src":"1280:7:15"},{"name":"headStart","nativeSrc":"1289:9:15","nodeType":"YulIdentifier","src":"1289:9:15"}],"functionName":{"name":"sub","nativeSrc":"1276:3:15","nodeType":"YulIdentifier","src":"1276:3:15"},"nativeSrc":"1276:23:15","nodeType":"YulFunctionCall","src":"1276:23:15"},{"kind":"number","nativeSrc":"1301:2:15","nodeType":"YulLiteral","src":"1301:2:15","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"1272:3:15","nodeType":"YulIdentifier","src":"1272:3:15"},"nativeSrc":"1272:32:15","nodeType":"YulFunctionCall","src":"1272:32:15"},"nativeSrc":"1269:119:15","nodeType":"YulIf","src":"1269:119:15"},{"nativeSrc":"1398:117:15","nodeType":"YulBlock","src":"1398:117:15","statements":[{"nativeSrc":"1413:15:15","nodeType":"YulVariableDeclaration","src":"1413:15:15","value":{"kind":"number","nativeSrc":"1427:1:15","nodeType":"YulLiteral","src":"1427:1:15","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"1417:6:15","nodeType":"YulTypedName","src":"1417:6:15","type":""}]},{"nativeSrc":"1442:63:15","nodeType":"YulAssignment","src":"1442:63:15","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1477:9:15","nodeType":"YulIdentifier","src":"1477:9:15"},{"name":"offset","nativeSrc":"1488:6:15","nodeType":"YulIdentifier","src":"1488:6:15"}],"functionName":{"name":"add","nativeSrc":"1473:3:15","nodeType":"YulIdentifier","src":"1473:3:15"},"nativeSrc":"1473:22:15","nodeType":"YulFunctionCall","src":"1473:22:15"},{"name":"dataEnd","nativeSrc":"1497:7:15","nodeType":"YulIdentifier","src":"1497:7:15"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"1452:20:15","nodeType":"YulIdentifier","src":"1452:20:15"},"nativeSrc":"1452:53:15","nodeType":"YulFunctionCall","src":"1452:53:15"},"variableNames":[{"name":"value0","nativeSrc":"1442:6:15","nodeType":"YulIdentifier","src":"1442:6:15"}]}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"1193:329:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1229:9:15","nodeType":"YulTypedName","src":"1229:9:15","type":""},{"name":"dataEnd","nativeSrc":"1240:7:15","nodeType":"YulTypedName","src":"1240:7:15","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1252:6:15","nodeType":"YulTypedName","src":"1252:6:15","type":""}],"src":"1193:329:15"},{"body":{"nativeSrc":"1624:73:15","nodeType":"YulBlock","src":"1624:73:15","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"1641:3:15","nodeType":"YulIdentifier","src":"1641:3:15"},{"name":"length","nativeSrc":"1646:6:15","nodeType":"YulIdentifier","src":"1646:6:15"}],"functionName":{"name":"mstore","nativeSrc":"1634:6:15","nodeType":"YulIdentifier","src":"1634:6:15"},"nativeSrc":"1634:19:15","nodeType":"YulFunctionCall","src":"1634:19:15"},"nativeSrc":"1634:19:15","nodeType":"YulExpressionStatement","src":"1634:19:15"},{"nativeSrc":"1662:29:15","nodeType":"YulAssignment","src":"1662:29:15","value":{"arguments":[{"name":"pos","nativeSrc":"1681:3:15","nodeType":"YulIdentifier","src":"1681:3:15"},{"kind":"number","nativeSrc":"1686:4:15","nodeType":"YulLiteral","src":"1686:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1677:3:15","nodeType":"YulIdentifier","src":"1677:3:15"},"nativeSrc":"1677:14:15","nodeType":"YulFunctionCall","src":"1677:14:15"},"variableNames":[{"name":"updated_pos","nativeSrc":"1662:11:15","nodeType":"YulIdentifier","src":"1662:11:15"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"1528:169:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"1596:3:15","nodeType":"YulTypedName","src":"1596:3:15","type":""},{"name":"length","nativeSrc":"1601:6:15","nodeType":"YulTypedName","src":"1601:6:15","type":""}],"returnVariables":[{"name":"updated_pos","nativeSrc":"1612:11:15","nodeType":"YulTypedName","src":"1612:11:15","type":""}],"src":"1528:169:15"},{"body":{"nativeSrc":"1809:66:15","nodeType":"YulBlock","src":"1809:66:15","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"1831:6:15","nodeType":"YulIdentifier","src":"1831:6:15"},{"kind":"number","nativeSrc":"1839:1:15","nodeType":"YulLiteral","src":"1839:1:15","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"1827:3:15","nodeType":"YulIdentifier","src":"1827:3:15"},"nativeSrc":"1827:14:15","nodeType":"YulFunctionCall","src":"1827:14:15"},{"hexValue":"4d7573742062652070726f706f736564206f776e6572","kind":"string","nativeSrc":"1843:24:15","nodeType":"YulLiteral","src":"1843:24:15","type":"","value":"Must be proposed owner"}],"functionName":{"name":"mstore","nativeSrc":"1820:6:15","nodeType":"YulIdentifier","src":"1820:6:15"},"nativeSrc":"1820:48:15","nodeType":"YulFunctionCall","src":"1820:48:15"},"nativeSrc":"1820:48:15","nodeType":"YulExpressionStatement","src":"1820:48:15"}]},"name":"store_literal_in_memory_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c","nativeSrc":"1703:172:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"1801:6:15","nodeType":"YulTypedName","src":"1801:6:15","type":""}],"src":"1703:172:15"},{"body":{"nativeSrc":"2027:220:15","nodeType":"YulBlock","src":"2027:220:15","statements":[{"nativeSrc":"2037:74:15","nodeType":"YulAssignment","src":"2037:74:15","value":{"arguments":[{"name":"pos","nativeSrc":"2103:3:15","nodeType":"YulIdentifier","src":"2103:3:15"},{"kind":"number","nativeSrc":"2108:2:15","nodeType":"YulLiteral","src":"2108:2:15","type":"","value":"22"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"2044:58:15","nodeType":"YulIdentifier","src":"2044:58:15"},"nativeSrc":"2044:67:15","nodeType":"YulFunctionCall","src":"2044:67:15"},"variableNames":[{"name":"pos","nativeSrc":"2037:3:15","nodeType":"YulIdentifier","src":"2037:3:15"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"2209:3:15","nodeType":"YulIdentifier","src":"2209:3:15"}],"functionName":{"name":"store_literal_in_memory_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c","nativeSrc":"2120:88:15","nodeType":"YulIdentifier","src":"2120:88:15"},"nativeSrc":"2120:93:15","nodeType":"YulFunctionCall","src":"2120:93:15"},"nativeSrc":"2120:93:15","nodeType":"YulExpressionStatement","src":"2120:93:15"},{"nativeSrc":"2222:19:15","nodeType":"YulAssignment","src":"2222:19:15","value":{"arguments":[{"name":"pos","nativeSrc":"2233:3:15","nodeType":"YulIdentifier","src":"2233:3:15"},{"kind":"number","nativeSrc":"2238:2:15","nodeType":"YulLiteral","src":"2238:2:15","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2229:3:15","nodeType":"YulIdentifier","src":"2229:3:15"},"nativeSrc":"2229:12:15","nodeType":"YulFunctionCall","src":"2229:12:15"},"variableNames":[{"name":"end","nativeSrc":"2222:3:15","nodeType":"YulIdentifier","src":"2222:3:15"}]}]},"name":"abi_encode_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c_to_t_string_memory_ptr_fromStack","nativeSrc":"1881:366:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"2015:3:15","nodeType":"YulTypedName","src":"2015:3:15","type":""}],"returnVariables":[{"name":"end","nativeSrc":"2023:3:15","nodeType":"YulTypedName","src":"2023:3:15","type":""}],"src":"1881:366:15"},{"body":{"nativeSrc":"2424:248:15","nodeType":"YulBlock","src":"2424:248:15","statements":[{"nativeSrc":"2434:26:15","nodeType":"YulAssignment","src":"2434:26:15","value":{"arguments":[{"name":"headStart","nativeSrc":"2446:9:15","nodeType":"YulIdentifier","src":"2446:9:15"},{"kind":"number","nativeSrc":"2457:2:15","nodeType":"YulLiteral","src":"2457:2:15","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2442:3:15","nodeType":"YulIdentifier","src":"2442:3:15"},"nativeSrc":"2442:18:15","nodeType":"YulFunctionCall","src":"2442:18:15"},"variableNames":[{"name":"tail","nativeSrc":"2434:4:15","nodeType":"YulIdentifier","src":"2434:4:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2481:9:15","nodeType":"YulIdentifier","src":"2481:9:15"},{"kind":"number","nativeSrc":"2492:1:15","nodeType":"YulLiteral","src":"2492:1:15","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"2477:3:15","nodeType":"YulIdentifier","src":"2477:3:15"},"nativeSrc":"2477:17:15","nodeType":"YulFunctionCall","src":"2477:17:15"},{"arguments":[{"name":"tail","nativeSrc":"2500:4:15","nodeType":"YulIdentifier","src":"2500:4:15"},{"name":"headStart","nativeSrc":"2506:9:15","nodeType":"YulIdentifier","src":"2506:9:15"}],"functionName":{"name":"sub","nativeSrc":"2496:3:15","nodeType":"YulIdentifier","src":"2496:3:15"},"nativeSrc":"2496:20:15","nodeType":"YulFunctionCall","src":"2496:20:15"}],"functionName":{"name":"mstore","nativeSrc":"2470:6:15","nodeType":"YulIdentifier","src":"2470:6:15"},"nativeSrc":"2470:47:15","nodeType":"YulFunctionCall","src":"2470:47:15"},"nativeSrc":"2470:47:15","nodeType":"YulExpressionStatement","src":"2470:47:15"},{"nativeSrc":"2526:139:15","nodeType":"YulAssignment","src":"2526:139:15","value":{"arguments":[{"name":"tail","nativeSrc":"2660:4:15","nodeType":"YulIdentifier","src":"2660:4:15"}],"functionName":{"name":"abi_encode_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c_to_t_string_memory_ptr_fromStack","nativeSrc":"2534:124:15","nodeType":"YulIdentifier","src":"2534:124:15"},"nativeSrc":"2534:131:15","nodeType":"YulFunctionCall","src":"2534:131:15"},"variableNames":[{"name":"tail","nativeSrc":"2526:4:15","nodeType":"YulIdentifier","src":"2526:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"2253:419:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2404:9:15","nodeType":"YulTypedName","src":"2404:9:15","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2419:4:15","nodeType":"YulTypedName","src":"2419:4:15","type":""}],"src":"2253:419:15"},{"body":{"nativeSrc":"2784:66:15","nodeType":"YulBlock","src":"2784:66:15","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"2806:6:15","nodeType":"YulIdentifier","src":"2806:6:15"},{"kind":"number","nativeSrc":"2814:1:15","nodeType":"YulLiteral","src":"2814:1:15","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"2802:3:15","nodeType":"YulIdentifier","src":"2802:3:15"},"nativeSrc":"2802:14:15","nodeType":"YulFunctionCall","src":"2802:14:15"},{"hexValue":"4f6e6c792063616c6c61626c65206279206f776e6572","kind":"string","nativeSrc":"2818:24:15","nodeType":"YulLiteral","src":"2818:24:15","type":"","value":"Only callable by owner"}],"functionName":{"name":"mstore","nativeSrc":"2795:6:15","nodeType":"YulIdentifier","src":"2795:6:15"},"nativeSrc":"2795:48:15","nodeType":"YulFunctionCall","src":"2795:48:15"},"nativeSrc":"2795:48:15","nodeType":"YulExpressionStatement","src":"2795:48:15"}]},"name":"store_literal_in_memory_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3","nativeSrc":"2678:172:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"2776:6:15","nodeType":"YulTypedName","src":"2776:6:15","type":""}],"src":"2678:172:15"},{"body":{"nativeSrc":"3002:220:15","nodeType":"YulBlock","src":"3002:220:15","statements":[{"nativeSrc":"3012:74:15","nodeType":"YulAssignment","src":"3012:74:15","value":{"arguments":[{"name":"pos","nativeSrc":"3078:3:15","nodeType":"YulIdentifier","src":"3078:3:15"},{"kind":"number","nativeSrc":"3083:2:15","nodeType":"YulLiteral","src":"3083:2:15","type":"","value":"22"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"3019:58:15","nodeType":"YulIdentifier","src":"3019:58:15"},"nativeSrc":"3019:67:15","nodeType":"YulFunctionCall","src":"3019:67:15"},"variableNames":[{"name":"pos","nativeSrc":"3012:3:15","nodeType":"YulIdentifier","src":"3012:3:15"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"3184:3:15","nodeType":"YulIdentifier","src":"3184:3:15"}],"functionName":{"name":"store_literal_in_memory_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3","nativeSrc":"3095:88:15","nodeType":"YulIdentifier","src":"3095:88:15"},"nativeSrc":"3095:93:15","nodeType":"YulFunctionCall","src":"3095:93:15"},"nativeSrc":"3095:93:15","nodeType":"YulExpressionStatement","src":"3095:93:15"},{"nativeSrc":"3197:19:15","nodeType":"YulAssignment","src":"3197:19:15","value":{"arguments":[{"name":"pos","nativeSrc":"3208:3:15","nodeType":"YulIdentifier","src":"3208:3:15"},{"kind":"number","nativeSrc":"3213:2:15","nodeType":"YulLiteral","src":"3213:2:15","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3204:3:15","nodeType":"YulIdentifier","src":"3204:3:15"},"nativeSrc":"3204:12:15","nodeType":"YulFunctionCall","src":"3204:12:15"},"variableNames":[{"name":"end","nativeSrc":"3197:3:15","nodeType":"YulIdentifier","src":"3197:3:15"}]}]},"name":"abi_encode_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3_to_t_string_memory_ptr_fromStack","nativeSrc":"2856:366:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"2990:3:15","nodeType":"YulTypedName","src":"2990:3:15","type":""}],"returnVariables":[{"name":"end","nativeSrc":"2998:3:15","nodeType":"YulTypedName","src":"2998:3:15","type":""}],"src":"2856:366:15"},{"body":{"nativeSrc":"3399:248:15","nodeType":"YulBlock","src":"3399:248:15","statements":[{"nativeSrc":"3409:26:15","nodeType":"YulAssignment","src":"3409:26:15","value":{"arguments":[{"name":"headStart","nativeSrc":"3421:9:15","nodeType":"YulIdentifier","src":"3421:9:15"},{"kind":"number","nativeSrc":"3432:2:15","nodeType":"YulLiteral","src":"3432:2:15","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3417:3:15","nodeType":"YulIdentifier","src":"3417:3:15"},"nativeSrc":"3417:18:15","nodeType":"YulFunctionCall","src":"3417:18:15"},"variableNames":[{"name":"tail","nativeSrc":"3409:4:15","nodeType":"YulIdentifier","src":"3409:4:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3456:9:15","nodeType":"YulIdentifier","src":"3456:9:15"},{"kind":"number","nativeSrc":"3467:1:15","nodeType":"YulLiteral","src":"3467:1:15","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"3452:3:15","nodeType":"YulIdentifier","src":"3452:3:15"},"nativeSrc":"3452:17:15","nodeType":"YulFunctionCall","src":"3452:17:15"},{"arguments":[{"name":"tail","nativeSrc":"3475:4:15","nodeType":"YulIdentifier","src":"3475:4:15"},{"name":"headStart","nativeSrc":"3481:9:15","nodeType":"YulIdentifier","src":"3481:9:15"}],"functionName":{"name":"sub","nativeSrc":"3471:3:15","nodeType":"YulIdentifier","src":"3471:3:15"},"nativeSrc":"3471:20:15","nodeType":"YulFunctionCall","src":"3471:20:15"}],"functionName":{"name":"mstore","nativeSrc":"3445:6:15","nodeType":"YulIdentifier","src":"3445:6:15"},"nativeSrc":"3445:47:15","nodeType":"YulFunctionCall","src":"3445:47:15"},"nativeSrc":"3445:47:15","nodeType":"YulExpressionStatement","src":"3445:47:15"},{"nativeSrc":"3501:139:15","nodeType":"YulAssignment","src":"3501:139:15","value":{"arguments":[{"name":"tail","nativeSrc":"3635:4:15","nodeType":"YulIdentifier","src":"3635:4:15"}],"functionName":{"name":"abi_encode_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3_to_t_string_memory_ptr_fromStack","nativeSrc":"3509:124:15","nodeType":"YulIdentifier","src":"3509:124:15"},"nativeSrc":"3509:131:15","nodeType":"YulFunctionCall","src":"3509:131:15"},"variableNames":[{"name":"tail","nativeSrc":"3501:4:15","nodeType":"YulIdentifier","src":"3501:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"3228:419:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3379:9:15","nodeType":"YulTypedName","src":"3379:9:15","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"3394:4:15","nodeType":"YulTypedName","src":"3394:4:15","type":""}],"src":"3228:419:15"},{"body":{"nativeSrc":"3759:67:15","nodeType":"YulBlock","src":"3759:67:15","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"3781:6:15","nodeType":"YulIdentifier","src":"3781:6:15"},{"kind":"number","nativeSrc":"3789:1:15","nodeType":"YulLiteral","src":"3789:1:15","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"3777:3:15","nodeType":"YulIdentifier","src":"3777:3:15"},"nativeSrc":"3777:14:15","nodeType":"YulFunctionCall","src":"3777:14:15"},{"hexValue":"43616e6e6f74207472616e7366657220746f2073656c66","kind":"string","nativeSrc":"3793:25:15","nodeType":"YulLiteral","src":"3793:25:15","type":"","value":"Cannot transfer to self"}],"functionName":{"name":"mstore","nativeSrc":"3770:6:15","nodeType":"YulIdentifier","src":"3770:6:15"},"nativeSrc":"3770:49:15","nodeType":"YulFunctionCall","src":"3770:49:15"},"nativeSrc":"3770:49:15","nodeType":"YulExpressionStatement","src":"3770:49:15"}]},"name":"store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2","nativeSrc":"3653:173:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"3751:6:15","nodeType":"YulTypedName","src":"3751:6:15","type":""}],"src":"3653:173:15"},{"body":{"nativeSrc":"3978:220:15","nodeType":"YulBlock","src":"3978:220:15","statements":[{"nativeSrc":"3988:74:15","nodeType":"YulAssignment","src":"3988:74:15","value":{"arguments":[{"name":"pos","nativeSrc":"4054:3:15","nodeType":"YulIdentifier","src":"4054:3:15"},{"kind":"number","nativeSrc":"4059:2:15","nodeType":"YulLiteral","src":"4059:2:15","type":"","value":"23"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"3995:58:15","nodeType":"YulIdentifier","src":"3995:58:15"},"nativeSrc":"3995:67:15","nodeType":"YulFunctionCall","src":"3995:67:15"},"variableNames":[{"name":"pos","nativeSrc":"3988:3:15","nodeType":"YulIdentifier","src":"3988:3:15"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"4160:3:15","nodeType":"YulIdentifier","src":"4160:3:15"}],"functionName":{"name":"store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2","nativeSrc":"4071:88:15","nodeType":"YulIdentifier","src":"4071:88:15"},"nativeSrc":"4071:93:15","nodeType":"YulFunctionCall","src":"4071:93:15"},"nativeSrc":"4071:93:15","nodeType":"YulExpressionStatement","src":"4071:93:15"},{"nativeSrc":"4173:19:15","nodeType":"YulAssignment","src":"4173:19:15","value":{"arguments":[{"name":"pos","nativeSrc":"4184:3:15","nodeType":"YulIdentifier","src":"4184:3:15"},{"kind":"number","nativeSrc":"4189:2:15","nodeType":"YulLiteral","src":"4189:2:15","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4180:3:15","nodeType":"YulIdentifier","src":"4180:3:15"},"nativeSrc":"4180:12:15","nodeType":"YulFunctionCall","src":"4180:12:15"},"variableNames":[{"name":"end","nativeSrc":"4173:3:15","nodeType":"YulIdentifier","src":"4173:3:15"}]}]},"name":"abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack","nativeSrc":"3832:366:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"3966:3:15","nodeType":"YulTypedName","src":"3966:3:15","type":""}],"returnVariables":[{"name":"end","nativeSrc":"3974:3:15","nodeType":"YulTypedName","src":"3974:3:15","type":""}],"src":"3832:366:15"},{"body":{"nativeSrc":"4375:248:15","nodeType":"YulBlock","src":"4375:248:15","statements":[{"nativeSrc":"4385:26:15","nodeType":"YulAssignment","src":"4385:26:15","value":{"arguments":[{"name":"headStart","nativeSrc":"4397:9:15","nodeType":"YulIdentifier","src":"4397:9:15"},{"kind":"number","nativeSrc":"4408:2:15","nodeType":"YulLiteral","src":"4408:2:15","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4393:3:15","nodeType":"YulIdentifier","src":"4393:3:15"},"nativeSrc":"4393:18:15","nodeType":"YulFunctionCall","src":"4393:18:15"},"variableNames":[{"name":"tail","nativeSrc":"4385:4:15","nodeType":"YulIdentifier","src":"4385:4:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4432:9:15","nodeType":"YulIdentifier","src":"4432:9:15"},{"kind":"number","nativeSrc":"4443:1:15","nodeType":"YulLiteral","src":"4443:1:15","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"4428:3:15","nodeType":"YulIdentifier","src":"4428:3:15"},"nativeSrc":"4428:17:15","nodeType":"YulFunctionCall","src":"4428:17:15"},{"arguments":[{"name":"tail","nativeSrc":"4451:4:15","nodeType":"YulIdentifier","src":"4451:4:15"},{"name":"headStart","nativeSrc":"4457:9:15","nodeType":"YulIdentifier","src":"4457:9:15"}],"functionName":{"name":"sub","nativeSrc":"4447:3:15","nodeType":"YulIdentifier","src":"4447:3:15"},"nativeSrc":"4447:20:15","nodeType":"YulFunctionCall","src":"4447:20:15"}],"functionName":{"name":"mstore","nativeSrc":"4421:6:15","nodeType":"YulIdentifier","src":"4421:6:15"},"nativeSrc":"4421:47:15","nodeType":"YulFunctionCall","src":"4421:47:15"},"nativeSrc":"4421:47:15","nodeType":"YulExpressionStatement","src":"4421:47:15"},{"nativeSrc":"4477:139:15","nodeType":"YulAssignment","src":"4477:139:15","value":{"arguments":[{"name":"tail","nativeSrc":"4611:4:15","nodeType":"YulIdentifier","src":"4611:4:15"}],"functionName":{"name":"abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack","nativeSrc":"4485:124:15","nodeType":"YulIdentifier","src":"4485:124:15"},"nativeSrc":"4485:131:15","nodeType":"YulFunctionCall","src":"4485:131:15"},"variableNames":[{"name":"tail","nativeSrc":"4477:4:15","nodeType":"YulIdentifier","src":"4477:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"4204:419:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4355:9:15","nodeType":"YulTypedName","src":"4355:9:15","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4370:4:15","nodeType":"YulTypedName","src":"4370:4:15","type":""}],"src":"4204:419:15"}]},"contents":"{\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c(memPtr) {\n\n        mstore(add(memPtr, 0), \"Must be proposed owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 22)\n        store_literal_in_memory_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3(memPtr) {\n\n        mstore(add(memPtr, 0), \"Only callable by owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 22)\n        store_literal_in_memory_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2(memPtr) {\n\n        mstore(add(memPtr, 0), \"Cannot transfer to self\")\n\n    }\n\n    function abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 23)\n        store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n}\n","id":15,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100415760003560e01c806379ba5097146100465780638da5cb5b14610050578063f2fde38b1461006e575b600080fd5b61004e61008a565b005b61005861021f565b6040516100659190610459565b60405180910390f35b610088600480360381019061008391906104a5565b610248565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461011a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101119061052f565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61025061025c565b610259816102ec565b50565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102e19061059b565b60405180910390fd5b565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361035a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035190610607565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061044382610418565b9050919050565b61045381610438565b82525050565b600060208201905061046e600083018461044a565b92915050565b600080fd5b61048281610438565b811461048d57600080fd5b50565b60008135905061049f81610479565b92915050565b6000602082840312156104bb576104ba610474565b5b60006104c984828501610490565b91505092915050565b600082825260208201905092915050565b7f4d7573742062652070726f706f736564206f776e657200000000000000000000600082015250565b60006105196016836104d2565b9150610524826104e3565b602082019050919050565b600060208201905081810360008301526105488161050c565b9050919050565b7f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000600082015250565b60006105856016836104d2565b91506105908261054f565b602082019050919050565b600060208201905081810360008301526105b481610578565b9050919050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b60006105f16017836104d2565b91506105fc826105bb565b602082019050919050565b60006020820190508181036000830152610620816105e4565b905091905056fea26469706673582212208f9417a18201b93f82f4e1e0a4fb121a0a2801b5c4bed17d5673a5cb749683a864736f6c63430008180033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x79BA5097 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x50 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x6E JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0x8A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x58 PUSH2 0x21F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x65 SWAP2 SWAP1 PUSH2 0x459 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x88 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x83 SWAP2 SWAP1 PUSH2 0x4A5 JUMP JUMPDEST PUSH2 0x248 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x11A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x111 SWAP1 PUSH2 0x52F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP CALLER PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x250 PUSH2 0x25C JUMP JUMPDEST PUSH2 0x259 DUP2 PUSH2 0x2EC JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2EA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2E1 SWAP1 PUSH2 0x59B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x35A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x351 SWAP1 PUSH2 0x607 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xED8889F560326EB138920D842192F0EB3DD22B4F139C87A2C57538E05BAE1278 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x443 DUP3 PUSH2 0x418 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x453 DUP2 PUSH2 0x438 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x46E PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x44A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x482 DUP2 PUSH2 0x438 JUMP JUMPDEST DUP2 EQ PUSH2 0x48D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x49F DUP2 PUSH2 0x479 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4BB JUMPI PUSH2 0x4BA PUSH2 0x474 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x4C9 DUP5 DUP3 DUP6 ADD PUSH2 0x490 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4D7573742062652070726F706F736564206F776E657200000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x519 PUSH1 0x16 DUP4 PUSH2 0x4D2 JUMP JUMPDEST SWAP2 POP PUSH2 0x524 DUP3 PUSH2 0x4E3 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x548 DUP2 PUSH2 0x50C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F6E6C792063616C6C61626C65206279206F776E657200000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x585 PUSH1 0x16 DUP4 PUSH2 0x4D2 JUMP JUMPDEST SWAP2 POP PUSH2 0x590 DUP3 PUSH2 0x54F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x5B4 DUP2 PUSH2 0x578 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x43616E6E6F74207472616E7366657220746F2073656C66000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5F1 PUSH1 0x17 DUP4 PUSH2 0x4D2 JUMP JUMPDEST SWAP2 POP PUSH2 0x5FC DUP3 PUSH2 0x5BB JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x620 DUP2 PUSH2 0x5E4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP16 SWAP5 OR LOG1 DUP3 ADD 0xB9 EXTCODEHASH DUP3 DELEGATECALL 0xE1 0xE0 LOG4 0xFB SLT BYTE EXP 0x28 ADD 0xB5 0xC4 0xBE 0xD1 PUSH30 0x5673A5CB749683A864736F6C634300081800330000000000000000000000 ","sourceMap":"216:1893:3:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1026:316;;;:::i;:::-;;1382:81;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;847:98;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1026:316;1150:14;;;;;;;;;;;1136:28;;:10;:28;;;1128:63;;;;;;;;;;;;:::i;:::-;;;;;;;;;1198:16;1217:7;;;;;;;;;;;1198:26;;1240:10;1230:7;;:20;;;;;;;;;;;;;;;;;;1281:1;1256:14;;:27;;;;;;;;;;;;;;;;;;1326:10;1295:42;;1316:8;1295:42;;;;;;;;;;;;1071:271;1026:316::o;1382:81::-;1429:7;1451;;;;;;;;;;;1444:14;;1382:81;:::o;847:98::-;2075:20;:18;:20::i;:::-;918:22:::1;937:2;918:18;:22::i;:::-;847:98:::0;:::o;1809:162::-;1932:7;;;;;;;;;;1918:21;;:10;:21;;;1910:56;;;;;;;;;;;;:::i;:::-;;;;;;;;;1809:162::o;1536:239::-;1655:10;1649:16;;:2;:16;;;1641:52;;;;;;;;;;;;:::i;:::-;;;;;;;;;1717:2;1700:14;;:19;;;;;;;;;;;;;;;;;;1767:2;1731:39;;1758:7;;;;;;;;;;1731:39;;;;;;;;;;;;1536:239;:::o;7:126:15:-;44:7;84:42;77:5;73:54;62:65;;7:126;;;:::o;139:96::-;176:7;205:24;223:5;205:24;:::i;:::-;194:35;;139:96;;;:::o;241:118::-;328:24;346:5;328:24;:::i;:::-;323:3;316:37;241:118;;:::o;365:222::-;458:4;496:2;485:9;481:18;473:26;;509:71;577:1;566:9;562:17;553:6;509:71;:::i;:::-;365:222;;;;:::o;674:117::-;783:1;780;773:12;920:122;993:24;1011:5;993:24;:::i;:::-;986:5;983:35;973:63;;1032:1;1029;1022:12;973:63;920:122;:::o;1048:139::-;1094:5;1132:6;1119:20;1110:29;;1148:33;1175:5;1148:33;:::i;:::-;1048:139;;;;:::o;1193:329::-;1252:6;1301:2;1289:9;1280:7;1276:23;1272:32;1269:119;;;1307:79;;:::i;:::-;1269:119;1427:1;1452:53;1497:7;1488:6;1477:9;1473:22;1452:53;:::i;:::-;1442:63;;1398:117;1193:329;;;;:::o;1528:169::-;1612:11;1646:6;1641:3;1634:19;1686:4;1681:3;1677:14;1662:29;;1528:169;;;;:::o;1703:172::-;1843:24;1839:1;1831:6;1827:14;1820:48;1703:172;:::o;1881:366::-;2023:3;2044:67;2108:2;2103:3;2044:67;:::i;:::-;2037:74;;2120:93;2209:3;2120:93;:::i;:::-;2238:2;2233:3;2229:12;2222:19;;1881:366;;;:::o;2253:419::-;2419:4;2457:2;2446:9;2442:18;2434:26;;2506:9;2500:4;2496:20;2492:1;2481:9;2477:17;2470:47;2534:131;2660:4;2534:131;:::i;:::-;2526:139;;2253:419;;;:::o;2678:172::-;2818:24;2814:1;2806:6;2802:14;2795:48;2678:172;:::o;2856:366::-;2998:3;3019:67;3083:2;3078:3;3019:67;:::i;:::-;3012:74;;3095:93;3184:3;3095:93;:::i;:::-;3213:2;3208:3;3204:12;3197:19;;2856:366;;;:::o;3228:419::-;3394:4;3432:2;3421:9;3417:18;3409:26;;3481:9;3475:4;3471:20;3467:1;3456:9;3452:17;3445:47;3509:131;3635:4;3509:131;:::i;:::-;3501:139;;3228:419;;;:::o;3653:173::-;3793:25;3789:1;3781:6;3777:14;3770:49;3653:173;:::o;3832:366::-;3974:3;3995:67;4059:2;4054:3;3995:67;:::i;:::-;3988:74;;4071:93;4160:3;4071:93;:::i;:::-;4189:2;4184:3;4180:12;4173:19;;3832:366;;;:::o;4204:419::-;4370:4;4408:2;4397:9;4393:18;4385:26;;4457:9;4451:4;4447:20;4443:1;4432:9;4428:17;4421:47;4485:131;4611:4;4485:131;:::i;:::-;4477:139;;4204:419;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"325800","executionCost":"infinite","totalCost":"infinite"},"external":{"acceptOwnership()":"54518","owner()":"2522","transferOwnership(address)":"30676"},"internal":{"_transferOwnership(address)":"infinite","_validateOwnership()":"infinite"}},"methodIdentifiers":{"acceptOwnership()":"79ba5097","owner()":"8da5cb5b","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"The ConfirmedOwner contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Allows an ownership transfer to be completed by the recipient.\"},\"owner()\":{\"notice\":\"Get the current owner\"},\"transferOwnership(address)\":{\"notice\":\"Allows an owner to begin transferring ownership to a new address.\"}},\"notice\":\"A contract with helpers for basic contract ownership.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol\":\"ConfirmedOwnerWithProposal\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IOwnable} from \\\"../interfaces/IOwnable.sol\\\";\\n\\n/// @title The ConfirmedOwner contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract ConfirmedOwnerWithProposal is IOwnable {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /// @notice Allows an owner to begin transferring ownership to a new address.\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /// @notice Allows an ownership transfer to be completed by the recipient.\\n  function acceptOwnership() external override {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /// @notice Get the current owner\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /// @notice validate, transfer ownership, and emit relevant events\\n  function _transferOwnership(address to) private {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /// @notice validate access\\n  function _validateOwnership() internal view {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /// @notice Reverts if called by anyone other than the contract owner.\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x2422a055657a87e98be61f8f31abb1824ec50fd0f73949f4e3c6ac877efb6da8\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOwnable {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0x885de72b7b4e4f1bf8ba817a3f2bcc37fd9022d342c4ce76782151c30122d767\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":56,"contract":"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol:ConfirmedOwnerWithProposal","label":"s_owner","offset":0,"slot":"0","type":"t_address"},{"astId":58,"contract":"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol:ConfirmedOwnerWithProposal","label":"s_pendingOwner","offset":0,"slot":"1","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{"acceptOwnership()":{"notice":"Allows an ownership transfer to be completed by the recipient."},"owner()":{"notice":"Get the current owner"},"transferOwnership(address)":{"notice":"Allows an owner to begin transferring ownership to a new address."}},"notice":"A contract with helpers for basic contract ownership.","version":1}}},"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol":{"AggregatorV3Interface":{"abi":[{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"description","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint80","name":"_roundId","type":"uint80"}],"name":"getRoundData","outputs":[{"internalType":"uint80","name":"roundId","type":"uint80"},{"internalType":"int256","name":"answer","type":"int256"},{"internalType":"uint256","name":"startedAt","type":"uint256"},{"internalType":"uint256","name":"updatedAt","type":"uint256"},{"internalType":"uint80","name":"answeredInRound","type":"uint80"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"latestRoundData","outputs":[{"internalType":"uint80","name":"roundId","type":"uint80"},{"internalType":"int256","name":"answer","type":"int256"},{"internalType":"uint256","name":"startedAt","type":"uint256"},{"internalType":"uint256","name":"updatedAt","type":"uint256"},{"internalType":"uint80","name":"answeredInRound","type":"uint80"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"decimals()":"313ce567","description()":"7284e416","getRoundData(uint80)":"9a6fc8f5","latestRoundData()":"feaf968c","version()":"54fd4d50"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"}],\"name\":\"getRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\":\"AggregatorV3Interface\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0xfe4e8bb4861bb3860ba890ab91a3b818ec66e5a8f544fb608cfcb73f433472cd\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@chainlink/contracts/src/v0.8/shared/interfaces/IERC677Receiver.sol":{"IERC677Receiver":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onTokenTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onTokenTransfer(address,uint256,bytes)":"a4c0ed36"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onTokenTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/shared/interfaces/IERC677Receiver.sol\":\"IERC677Receiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/shared/interfaces/IERC677Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\ninterface IERC677Receiver {\\n  function onTokenTransfer(address sender, uint256 amount, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x5f9ee31598e2250815033c2f4e1e7e747f917815378938505063df1d4ae603ec\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol":{"IOwnable":{"abi":[{"inputs":[],"name":"acceptOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"acceptOwnership()":"79ba5097","owner()":"8da5cb5b","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol\":\"IOwnable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOwnable {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0x885de72b7b4e4f1bf8ba817a3f2bcc37fd9022d342c4ce76782151c30122d767\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol":{"LinkTokenInterface":{"abi":[{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"remaining","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"decimalPlaces","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"decreaseApproval","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"increaseApproval","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"tokenName","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"tokenSymbol","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"totalTokensIssued","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"transferAndCall","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","decreaseApproval(address,uint256)":"66188463","increaseApproval(address,uint256)":"d73dd623","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferAndCall(address,uint256,bytes)":"4000aea0","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"decimalPlaces\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalTokensIssued\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol\":\"LinkTokenInterface\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\\n\\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xac02fbc0c7d194e525a71f524d1f7c472df73e19c2b527d7b529badaeaf0ec51\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@chainlink/contracts/src/v0.8/vendor/@arbitrum/nitro-contracts/src/precompiles/ArbGasInfo.sol":{"ArbGasInfo":{"abi":[{"inputs":[],"name":"getAmortizedCostCapBips","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getCurrentTxL1GasFees","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getGasAccountingParams","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getGasBacklog","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getGasBacklogTolerance","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getL1BaseFeeEstimate","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getL1BaseFeeEstimateInertia","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getL1FeesAvailable","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getL1GasPriceEstimate","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getL1PricingEquilibrationUnits","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getL1PricingFundsDueForRewards","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getL1PricingSurplus","outputs":[{"internalType":"int256","name":"","type":"int256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getL1PricingUnitsSinceUpdate","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getL1RewardRate","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getL1RewardRecipient","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getLastL1PricingSurplus","outputs":[{"internalType":"int256","name":"","type":"int256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getLastL1PricingUpdateTime","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getMinimumGasPrice","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPerBatchGasCharge","outputs":[{"internalType":"int64","name":"","type":"int64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPricesInArbGas","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"aggregator","type":"address"}],"name":"getPricesInArbGasWithAggregator","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPricesInWei","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"aggregator","type":"address"}],"name":"getPricesInWeiWithAggregator","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPricingInertia","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"getGasAccountingParams()":{"returns":{"_0":"(speedLimitPerSecond, gasPoolMax, maxTxGasLimit)"}},"getPricesInArbGas()":{"returns":{"_0":"(per L2 tx, per L1 calldata byte, per storage allocation)"}},"getPricesInArbGasWithAggregator(address)":{"returns":{"_0":"(per L2 tx, per L1 calldata byte, per storage allocation)"}},"getPricesInWei()":{"returns":{"_0":"return gas prices in wei        (            per L2 tx,            per L1 calldata byte            per storage allocation,            per ArbGas base,            per ArbGas congestion,            per ArbGas total        )"}},"getPricesInWeiWithAggregator(address)":{"returns":{"_0":"return gas prices in wei        (            per L2 tx,            per L1 calldata byte            per storage allocation,            per ArbGas base,            per ArbGas congestion,            per ArbGas total        )"}}},"title":"Provides insight into the cost of using the chain.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getAmortizedCostCapBips()":"7a7d6beb","getCurrentTxL1GasFees()":"c6f7de0e","getGasAccountingParams()":"612af178","getGasBacklog()":"1d5b5c20","getGasBacklogTolerance()":"25754f91","getL1BaseFeeEstimate()":"f5d6ded7","getL1BaseFeeEstimateInertia()":"29eb31ee","getL1FeesAvailable()":"5b39d23c","getL1GasPriceEstimate()":"055f362f","getL1PricingEquilibrationUnits()":"ad26ce90","getL1PricingFundsDueForRewards()":"963d6002","getL1PricingSurplus()":"520acdd7","getL1PricingUnitsSinceUpdate()":"eff01306","getL1RewardRate()":"8a5b1d28","getL1RewardRecipient()":"9e6d7e31","getLastL1PricingSurplus()":"2987d027","getLastL1PricingUpdateTime()":"138b47b4","getMinimumGasPrice()":"f918379a","getPerBatchGasCharge()":"6ecca45a","getPricesInArbGas()":"02199f34","getPricesInArbGasWithAggregator(address)":"7a1ea732","getPricesInWei()":"41b247a8","getPricesInWeiWithAggregator(address)":"ba9c916e","getPricingInertia()":"3dfb45b9"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"getAmortizedCostCapBips\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTxL1GasFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGasAccountingParams\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGasBacklog\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGasBacklogTolerance\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getL1BaseFeeEstimate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getL1BaseFeeEstimateInertia\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getL1FeesAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getL1GasPriceEstimate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getL1PricingEquilibrationUnits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getL1PricingFundsDueForRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getL1PricingSurplus\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getL1PricingUnitsSinceUpdate\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getL1RewardRate\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getL1RewardRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastL1PricingSurplus\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastL1PricingUpdateTime\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumGasPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPerBatchGasCharge\",\"outputs\":[{\"internalType\":\"int64\",\"name\":\"\",\"type\":\"int64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPricesInArbGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"aggregator\",\"type\":\"address\"}],\"name\":\"getPricesInArbGasWithAggregator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPricesInWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"aggregator\",\"type\":\"address\"}],\"name\":\"getPricesInWeiWithAggregator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPricingInertia\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getGasAccountingParams()\":{\"returns\":{\"_0\":\"(speedLimitPerSecond, gasPoolMax, maxTxGasLimit)\"}},\"getPricesInArbGas()\":{\"returns\":{\"_0\":\"(per L2 tx, per L1 calldata byte, per storage allocation)\"}},\"getPricesInArbGasWithAggregator(address)\":{\"returns\":{\"_0\":\"(per L2 tx, per L1 calldata byte, per storage allocation)\"}},\"getPricesInWei()\":{\"returns\":{\"_0\":\"return gas prices in wei        (            per L2 tx,            per L1 calldata byte            per storage allocation,            per ArbGas base,            per ArbGas congestion,            per ArbGas total        )\"}},\"getPricesInWeiWithAggregator(address)\":{\"returns\":{\"_0\":\"return gas prices in wei        (            per L2 tx,            per L1 calldata byte            per storage allocation,            per ArbGas base,            per ArbGas congestion,            per ArbGas total        )\"}}},\"title\":\"Provides insight into the cost of using the chain.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getAmortizedCostCapBips()\":{\"notice\":\"Returns the cost amortization cap in basis points\"},\"getCurrentTxL1GasFees()\":{\"notice\":\"Get L1 gas fees paid by the current transaction\"},\"getGasAccountingParams()\":{\"notice\":\"Get the gas accounting parameters. `gasPoolMax` is always zero, as the exponential pricing model has no such notion.\"},\"getGasBacklog()\":{\"notice\":\"Get the backlogged amount of gas burnt in excess of the speed limit\"},\"getGasBacklogTolerance()\":{\"notice\":\"Get the forgivable amount of backlogged gas ArbOS will ignore when raising the basefee\"},\"getL1BaseFeeEstimate()\":{\"notice\":\"Get ArbOS's estimate of the L1 basefee in wei\"},\"getL1BaseFeeEstimateInertia()\":{\"notice\":\"Get how slowly ArbOS updates its estimate of the L1 basefee\"},\"getL1FeesAvailable()\":{\"notice\":\"Returns the available funds from L1 fees\"},\"getL1GasPriceEstimate()\":{\"notice\":\"Deprecated -- Same as getL1BaseFeeEstimate()\"},\"getL1PricingEquilibrationUnits()\":{\"notice\":\"Returns the equilibration units parameter for L1 price adjustment algorithm Available in ArbOS version 20\"},\"getL1PricingFundsDueForRewards()\":{\"notice\":\"Returns the amount of L1 calldata payments due for rewards (per the L1 reward rate) Available in ArbOS version 20\"},\"getL1PricingSurplus()\":{\"notice\":\"Returns the surplus of funds for L1 batch posting payments (may be negative).\"},\"getL1PricingUnitsSinceUpdate()\":{\"notice\":\"Returns the amount of L1 calldata posted since the last update. Available in ArbOS version 20\"},\"getL1RewardRate()\":{\"notice\":\"Get the L1 pricer reward rate, in wei per unit Available in ArbOS version 11\"},\"getL1RewardRecipient()\":{\"notice\":\"Get the L1 pricer reward recipient Available in ArbOS version 11\"},\"getLastL1PricingSurplus()\":{\"notice\":\"Returns the L1 pricing surplus as of the last update (may be negative). Available in ArbOS version 20\"},\"getLastL1PricingUpdateTime()\":{\"notice\":\"Returns the last time the L1 calldata pricer was updated. Available in ArbOS version 20\"},\"getMinimumGasPrice()\":{\"notice\":\"Get the minimum gas price needed for a tx to succeed\"},\"getPerBatchGasCharge()\":{\"notice\":\"Returns the base charge (in L1 gas) attributed to each data batch in the calldata pricer\"},\"getPricesInArbGas()\":{\"notice\":\"Get prices in ArbGas. Assumes the callers preferred validator, or the default if caller doesn't have a preferred one.\"},\"getPricesInArbGasWithAggregator(address)\":{\"notice\":\"Get prices in ArbGas for the supplied aggregator\"},\"getPricesInWei()\":{\"notice\":\"Get gas prices. Uses the caller's preferred aggregator, or the default if the caller doesn't have a preferred one.\"},\"getPricesInWeiWithAggregator(address)\":{\"notice\":\"Get gas prices for a provided aggregator\"},\"getPricingInertia()\":{\"notice\":\"Get how slowly ArbOS updates the L2 basefee in response to backlogged gas\"}},\"notice\":\"These methods have been adjusted to account for Nitro's heavy use of calldata compression. Of note to end-users, we no longer make a distinction between non-zero and zero-valued calldata bytes. Precompiled contract that exists in every Arbitrum chain at 0x000000000000000000000000000000000000006c.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/vendor/@arbitrum/nitro-contracts/src/precompiles/ArbGasInfo.sol\":\"ArbGasInfo\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/vendor/@arbitrum/nitro-contracts/src/precompiles/ArbGasInfo.sol\":{\"content\":\"// Copyright 2021-2022, Offchain Labs, Inc.\\n// For license information, see https://github.com/OffchainLabs/nitro-contracts/blob/main/LICENSE\\n// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.4.21 <0.9.0;\\n\\n/// @title Provides insight into the cost of using the chain.\\n/// @notice These methods have been adjusted to account for Nitro's heavy use of calldata compression.\\n/// Of note to end-users, we no longer make a distinction between non-zero and zero-valued calldata bytes.\\n/// Precompiled contract that exists in every Arbitrum chain at 0x000000000000000000000000000000000000006c.\\ninterface ArbGasInfo {\\n    /// @notice Get gas prices for a provided aggregator\\n    /// @return return gas prices in wei\\n    ///        (\\n    ///            per L2 tx,\\n    ///            per L1 calldata byte\\n    ///            per storage allocation,\\n    ///            per ArbGas base,\\n    ///            per ArbGas congestion,\\n    ///            per ArbGas total\\n    ///        )\\n    function getPricesInWeiWithAggregator(address aggregator)\\n    external\\n    view\\n    returns (\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256\\n    );\\n\\n    /// @notice Get gas prices. Uses the caller's preferred aggregator, or the default if the caller doesn't have a preferred one.\\n    /// @return return gas prices in wei\\n    ///        (\\n    ///            per L2 tx,\\n    ///            per L1 calldata byte\\n    ///            per storage allocation,\\n    ///            per ArbGas base,\\n    ///            per ArbGas congestion,\\n    ///            per ArbGas total\\n    ///        )\\n    function getPricesInWei()\\n    external\\n    view\\n    returns (\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256\\n    );\\n\\n    /// @notice Get prices in ArbGas for the supplied aggregator\\n    /// @return (per L2 tx, per L1 calldata byte, per storage allocation)\\n    function getPricesInArbGasWithAggregator(address aggregator)\\n    external\\n    view\\n    returns (\\n        uint256,\\n        uint256,\\n        uint256\\n    );\\n\\n    /// @notice Get prices in ArbGas. Assumes the callers preferred validator, or the default if caller doesn't have a preferred one.\\n    /// @return (per L2 tx, per L1 calldata byte, per storage allocation)\\n    function getPricesInArbGas()\\n    external\\n    view\\n    returns (\\n        uint256,\\n        uint256,\\n        uint256\\n    );\\n\\n    /// @notice Get the gas accounting parameters. `gasPoolMax` is always zero, as the exponential pricing model has no such notion.\\n    /// @return (speedLimitPerSecond, gasPoolMax, maxTxGasLimit)\\n    function getGasAccountingParams()\\n    external\\n    view\\n    returns (\\n        uint256,\\n        uint256,\\n        uint256\\n    );\\n\\n    /// @notice Get the minimum gas price needed for a tx to succeed\\n    function getMinimumGasPrice() external view returns (uint256);\\n\\n    /// @notice Get ArbOS's estimate of the L1 basefee in wei\\n    function getL1BaseFeeEstimate() external view returns (uint256);\\n\\n    /// @notice Get how slowly ArbOS updates its estimate of the L1 basefee\\n    function getL1BaseFeeEstimateInertia() external view returns (uint64);\\n\\n    /// @notice Get the L1 pricer reward rate, in wei per unit\\n    /// Available in ArbOS version 11\\n    function getL1RewardRate() external view returns (uint64);\\n\\n    /// @notice Get the L1 pricer reward recipient\\n    /// Available in ArbOS version 11\\n    function getL1RewardRecipient() external view returns (address);\\n\\n    /// @notice Deprecated -- Same as getL1BaseFeeEstimate()\\n    function getL1GasPriceEstimate() external view returns (uint256);\\n\\n    /// @notice Get L1 gas fees paid by the current transaction\\n    function getCurrentTxL1GasFees() external view returns (uint256);\\n\\n    /// @notice Get the backlogged amount of gas burnt in excess of the speed limit\\n    function getGasBacklog() external view returns (uint64);\\n\\n    /// @notice Get how slowly ArbOS updates the L2 basefee in response to backlogged gas\\n    function getPricingInertia() external view returns (uint64);\\n\\n    /// @notice Get the forgivable amount of backlogged gas ArbOS will ignore when raising the basefee\\n    function getGasBacklogTolerance() external view returns (uint64);\\n\\n    /// @notice Returns the surplus of funds for L1 batch posting payments (may be negative).\\n    function getL1PricingSurplus() external view returns (int256);\\n\\n    /// @notice Returns the base charge (in L1 gas) attributed to each data batch in the calldata pricer\\n    function getPerBatchGasCharge() external view returns (int64);\\n\\n    /// @notice Returns the cost amortization cap in basis points\\n    function getAmortizedCostCapBips() external view returns (uint64);\\n\\n    /// @notice Returns the available funds from L1 fees\\n    function getL1FeesAvailable() external view returns (uint256);\\n\\n    /// @notice Returns the equilibration units parameter for L1 price adjustment algorithm\\n    /// Available in ArbOS version 20\\n    function getL1PricingEquilibrationUnits() external view returns (uint256);\\n\\n    /// @notice Returns the last time the L1 calldata pricer was updated.\\n    /// Available in ArbOS version 20\\n    function getLastL1PricingUpdateTime() external view returns (uint64);\\n\\n    /// @notice Returns the amount of L1 calldata payments due for rewards (per the L1 reward rate)\\n    /// Available in ArbOS version 20\\n    function getL1PricingFundsDueForRewards() external view returns (uint256);\\n\\n    /// @notice Returns the amount of L1 calldata posted since the last update.\\n    /// Available in ArbOS version 20\\n    function getL1PricingUnitsSinceUpdate() external view returns (uint64);\\n\\n    /// @notice Returns the L1 pricing surplus as of the last update (may be negative).\\n    /// Available in ArbOS version 20\\n    function getLastL1PricingSurplus() external view returns (int256);\\n}\",\"keccak256\":\"0x7c51d93494afd02b5336e88d8738341758340f2befe698b4458a916905691bd6\",\"license\":\"BUSL-1.1\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"getAmortizedCostCapBips()":{"notice":"Returns the cost amortization cap in basis points"},"getCurrentTxL1GasFees()":{"notice":"Get L1 gas fees paid by the current transaction"},"getGasAccountingParams()":{"notice":"Get the gas accounting parameters. `gasPoolMax` is always zero, as the exponential pricing model has no such notion."},"getGasBacklog()":{"notice":"Get the backlogged amount of gas burnt in excess of the speed limit"},"getGasBacklogTolerance()":{"notice":"Get the forgivable amount of backlogged gas ArbOS will ignore when raising the basefee"},"getL1BaseFeeEstimate()":{"notice":"Get ArbOS's estimate of the L1 basefee in wei"},"getL1BaseFeeEstimateInertia()":{"notice":"Get how slowly ArbOS updates its estimate of the L1 basefee"},"getL1FeesAvailable()":{"notice":"Returns the available funds from L1 fees"},"getL1GasPriceEstimate()":{"notice":"Deprecated -- Same as getL1BaseFeeEstimate()"},"getL1PricingEquilibrationUnits()":{"notice":"Returns the equilibration units parameter for L1 price adjustment algorithm Available in ArbOS version 20"},"getL1PricingFundsDueForRewards()":{"notice":"Returns the amount of L1 calldata payments due for rewards (per the L1 reward rate) Available in ArbOS version 20"},"getL1PricingSurplus()":{"notice":"Returns the surplus of funds for L1 batch posting payments (may be negative)."},"getL1PricingUnitsSinceUpdate()":{"notice":"Returns the amount of L1 calldata posted since the last update. Available in ArbOS version 20"},"getL1RewardRate()":{"notice":"Get the L1 pricer reward rate, in wei per unit Available in ArbOS version 11"},"getL1RewardRecipient()":{"notice":"Get the L1 pricer reward recipient Available in ArbOS version 11"},"getLastL1PricingSurplus()":{"notice":"Returns the L1 pricing surplus as of the last update (may be negative). Available in ArbOS version 20"},"getLastL1PricingUpdateTime()":{"notice":"Returns the last time the L1 calldata pricer was updated. Available in ArbOS version 20"},"getMinimumGasPrice()":{"notice":"Get the minimum gas price needed for a tx to succeed"},"getPerBatchGasCharge()":{"notice":"Returns the base charge (in L1 gas) attributed to each data batch in the calldata pricer"},"getPricesInArbGas()":{"notice":"Get prices in ArbGas. Assumes the callers preferred validator, or the default if caller doesn't have a preferred one."},"getPricesInArbGasWithAggregator(address)":{"notice":"Get prices in ArbGas for the supplied aggregator"},"getPricesInWei()":{"notice":"Get gas prices. Uses the caller's preferred aggregator, or the default if the caller doesn't have a preferred one."},"getPricesInWeiWithAggregator(address)":{"notice":"Get gas prices for a provided aggregator"},"getPricingInertia()":{"notice":"Get how slowly ArbOS updates the L2 basefee in response to backlogged gas"}},"notice":"These methods have been adjusted to account for Nitro's heavy use of calldata compression. Of note to end-users, we no longer make a distinction between non-zero and zero-valued calldata bytes. Precompiled contract that exists in every Arbitrum chain at 0x000000000000000000000000000000000000006c.","version":1}}},"@chainlink/contracts/src/v0.8/vendor/@arbitrum/nitro-contracts/src/precompiles/ArbSys.sol":{"ArbSys":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"caller","type":"address"},{"indexed":true,"internalType":"address","name":"destination","type":"address"},{"indexed":true,"internalType":"uint256","name":"uniqueId","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"batchNumber","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"indexInBatch","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"arbBlockNum","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"ethBlockNum","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"callvalue","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"data","type":"bytes"}],"name":"L2ToL1Transaction","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"caller","type":"address"},{"indexed":true,"internalType":"address","name":"destination","type":"address"},{"indexed":true,"internalType":"uint256","name":"hash","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"position","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"arbBlockNum","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"ethBlockNum","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"callvalue","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"data","type":"bytes"}],"name":"L2ToL1Tx","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"reserved","type":"uint256"},{"indexed":true,"internalType":"bytes32","name":"hash","type":"bytes32"},{"indexed":true,"internalType":"uint256","name":"position","type":"uint256"}],"name":"SendMerkleUpdate","type":"event"},{"inputs":[{"internalType":"uint256","name":"arbBlockNum","type":"uint256"}],"name":"arbBlockHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"arbBlockNumber","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"arbChainID","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"arbOSVersion","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getStorageGasAvailable","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isTopLevelCall","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"unused","type":"address"}],"name":"mapL1SenderContractAddressToL2Alias","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"myCallersAddressWithoutAliasing","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"sendMerkleTreeState","outputs":[{"internalType":"uint256","name":"size","type":"uint256"},{"internalType":"bytes32","name":"root","type":"bytes32"},{"internalType":"bytes32[]","name":"partials","type":"bytes32[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"destination","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"sendTxToL1","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"wasMyCallersAddressAliased","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"destination","type":"address"}],"name":"withdrawEth","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"payable","type":"function"}],"devdoc":{"events":{"L2ToL1Transaction(address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bytes)":{"details":"DEPRECATED in favour of the new L2ToL1Tx event above after the nitro upgrade"},"L2ToL1Tx(address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes)":{"params":{"position":"= (level << 192) + leaf = (0 << 192) + leaf = leaf"}},"SendMerkleUpdate(uint256,bytes32,uint256)":{"params":{"hash":"the merkle hash","position":"= (level << 192) + leaf","reserved":"an index meant only to align the 4th index with L2ToL1Transaction's 4th event"}}},"kind":"dev","methods":{"arbBlockHash(uint256)":{"returns":{"_0":"block hash"}},"arbBlockNumber()":{"returns":{"_0":"block number as int"}},"arbChainID()":{"returns":{"_0":"Chain identifier as int"}},"arbOSVersion()":{"returns":{"_0":"version number as int"}},"getStorageGasAvailable()":{"returns":{"_0":"uint 0"}},"isTopLevelCall()":{"details":"this call has been deprecated and may be removed in a future release","returns":{"_0":"true if current execution frame is not a call by another L2 contract"}},"mapL1SenderContractAddressToL2Alias(address,address)":{"params":{"sender":"sender address","unused":"argument no longer used"},"returns":{"_0":"aliased sender address"}},"myCallersAddressWithoutAliasing()":{"returns":{"_0":"address of the caller's caller, without applying L1 contract address aliasing"}},"sendMerkleTreeState()":{"returns":{"partials":"hashes of partial subtrees in the send history tree","root":"root hash of the send history","size":"number of sends in the history"}},"sendTxToL1(address,bytes)":{"details":"it is not possible to execute on the L1 any L2-to-L1 transaction which contains data to a contract address without any code (as enforced by the Bridge contract).","params":{"data":"(optional) calldata for L1 contract call","destination":"recipient address on L1"},"returns":{"_0":"a unique identifier for this L2-to-L1 transaction."}},"wasMyCallersAddressAliased()":{"returns":{"_0":"true iff the caller's address is an alias for an L1 contract address"}},"withdrawEth(address)":{"params":{"destination":"recipient address on L1"},"returns":{"_0":"unique identifier for this L2-to-L1 transaction."}}},"title":"System level functionality","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"arbBlockHash(uint256)":"2b407a82","arbBlockNumber()":"a3b1b31d","arbChainID()":"d127f54a","arbOSVersion()":"051038f2","getStorageGasAvailable()":"a94597ff","isTopLevelCall()":"08bd624c","mapL1SenderContractAddressToL2Alias(address,address)":"4dbbd506","myCallersAddressWithoutAliasing()":"d74523b3","sendMerkleTreeState()":"7aeecd2a","sendTxToL1(address,bytes)":"928c169a","wasMyCallersAddressAliased()":"175a260b","withdrawEth(address)":"25e16063"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"uniqueId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"batchNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"indexInBatch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"arbBlockNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethBlockNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"callvalue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"L2ToL1Transaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"hash\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"arbBlockNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethBlockNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"callvalue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"L2ToL1Tx\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"reserved\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"SendMerkleUpdate\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"arbBlockNum\",\"type\":\"uint256\"}],\"name\":\"arbBlockHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arbBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arbChainID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arbOSVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStorageGasAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTopLevelCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"unused\",\"type\":\"address\"}],\"name\":\"mapL1SenderContractAddressToL2Alias\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"myCallersAddressWithoutAliasing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendMerkleTreeState\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"partials\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"sendTxToL1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wasMyCallersAddressAliased\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"withdrawEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"L2ToL1Transaction(address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bytes)\":{\"details\":\"DEPRECATED in favour of the new L2ToL1Tx event above after the nitro upgrade\"},\"L2ToL1Tx(address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes)\":{\"params\":{\"position\":\"= (level << 192) + leaf = (0 << 192) + leaf = leaf\"}},\"SendMerkleUpdate(uint256,bytes32,uint256)\":{\"params\":{\"hash\":\"the merkle hash\",\"position\":\"= (level << 192) + leaf\",\"reserved\":\"an index meant only to align the 4th index with L2ToL1Transaction's 4th event\"}}},\"kind\":\"dev\",\"methods\":{\"arbBlockHash(uint256)\":{\"returns\":{\"_0\":\"block hash\"}},\"arbBlockNumber()\":{\"returns\":{\"_0\":\"block number as int\"}},\"arbChainID()\":{\"returns\":{\"_0\":\"Chain identifier as int\"}},\"arbOSVersion()\":{\"returns\":{\"_0\":\"version number as int\"}},\"getStorageGasAvailable()\":{\"returns\":{\"_0\":\"uint 0\"}},\"isTopLevelCall()\":{\"details\":\"this call has been deprecated and may be removed in a future release\",\"returns\":{\"_0\":\"true if current execution frame is not a call by another L2 contract\"}},\"mapL1SenderContractAddressToL2Alias(address,address)\":{\"params\":{\"sender\":\"sender address\",\"unused\":\"argument no longer used\"},\"returns\":{\"_0\":\"aliased sender address\"}},\"myCallersAddressWithoutAliasing()\":{\"returns\":{\"_0\":\"address of the caller's caller, without applying L1 contract address aliasing\"}},\"sendMerkleTreeState()\":{\"returns\":{\"partials\":\"hashes of partial subtrees in the send history tree\",\"root\":\"root hash of the send history\",\"size\":\"number of sends in the history\"}},\"sendTxToL1(address,bytes)\":{\"details\":\"it is not possible to execute on the L1 any L2-to-L1 transaction which contains data to a contract address without any code (as enforced by the Bridge contract).\",\"params\":{\"data\":\"(optional) calldata for L1 contract call\",\"destination\":\"recipient address on L1\"},\"returns\":{\"_0\":\"a unique identifier for this L2-to-L1 transaction.\"}},\"wasMyCallersAddressAliased()\":{\"returns\":{\"_0\":\"true iff the caller's address is an alias for an L1 contract address\"}},\"withdrawEth(address)\":{\"params\":{\"destination\":\"recipient address on L1\"},\"returns\":{\"_0\":\"unique identifier for this L2-to-L1 transaction.\"}}},\"title\":\"System level functionality\",\"version\":1},\"userdoc\":{\"events\":{\"L2ToL1Tx(address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes)\":{\"notice\":\"creates a send txn from L2 to L1\"},\"SendMerkleUpdate(uint256,bytes32,uint256)\":{\"notice\":\"logs a merkle branch for proof synthesis\"}},\"kind\":\"user\",\"methods\":{\"arbBlockHash(uint256)\":{\"notice\":\"Get Arbitrum block hash (reverts unless currentBlockNum-256 <= arbBlockNum < currentBlockNum)\"},\"arbBlockNumber()\":{\"notice\":\"Get Arbitrum block number (distinct from L1 block number; Arbitrum genesis block has block number 0)\"},\"arbChainID()\":{\"notice\":\"Gets the rollup's unique chain identifier\"},\"arbOSVersion()\":{\"notice\":\"Get internal version number identifying an ArbOS build\"},\"getStorageGasAvailable()\":{\"notice\":\"Returns 0 since Nitro has no concept of storage gas\"},\"isTopLevelCall()\":{\"notice\":\"(deprecated) check if current call is top level (meaning it was triggered by an EoA or a L1 contract)\"},\"mapL1SenderContractAddressToL2Alias(address,address)\":{\"notice\":\"map L1 sender contract address to its L2 alias\"},\"myCallersAddressWithoutAliasing()\":{\"notice\":\"return the address of the caller (of this caller of this), without applying L1 contract address aliasing\"},\"sendMerkleTreeState()\":{\"notice\":\"Get send Merkle tree state\"},\"sendTxToL1(address,bytes)\":{\"notice\":\"Send a transaction to L1\"},\"wasMyCallersAddressAliased()\":{\"notice\":\"check if the caller (of this caller of this) is an aliased L1 contract address\"},\"withdrawEth(address)\":{\"notice\":\"Send given amount of Eth to dest from sender. This is a convenience function, which is equivalent to calling sendTxToL1 with empty data.\"}},\"notice\":\"For use by contracts to interact with core L2-specific functionality. Precompiled contract that exists in every Arbitrum chain at address(100), 0x0000000000000000000000000000000000000064.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/vendor/@arbitrum/nitro-contracts/src/precompiles/ArbSys.sol\":\"ArbSys\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/vendor/@arbitrum/nitro-contracts/src/precompiles/ArbSys.sol\":{\"content\":\"// Copyright 2021-2022, Offchain Labs, Inc.\\n// For license information, see https://github.com/nitro/blob/master/LICENSE\\n// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.4.21 <0.9.0;\\n\\n/**\\n * @title System level functionality\\n * @notice For use by contracts to interact with core L2-specific functionality.\\n * Precompiled contract that exists in every Arbitrum chain at address(100), 0x0000000000000000000000000000000000000064.\\n */\\ninterface ArbSys {\\n    /**\\n     * @notice Get Arbitrum block number (distinct from L1 block number; Arbitrum genesis block has block number 0)\\n     * @return block number as int\\n     */\\n    function arbBlockNumber() external view returns (uint256);\\n\\n    /**\\n     * @notice Get Arbitrum block hash (reverts unless currentBlockNum-256 <= arbBlockNum < currentBlockNum)\\n     * @return block hash\\n     */\\n    function arbBlockHash(uint256 arbBlockNum) external view returns (bytes32);\\n\\n    /**\\n     * @notice Gets the rollup's unique chain identifier\\n     * @return Chain identifier as int\\n     */\\n    function arbChainID() external view returns (uint256);\\n\\n    /**\\n     * @notice Get internal version number identifying an ArbOS build\\n     * @return version number as int\\n     */\\n    function arbOSVersion() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns 0 since Nitro has no concept of storage gas\\n     * @return uint 0\\n     */\\n    function getStorageGasAvailable() external view returns (uint256);\\n\\n    /**\\n     * @notice (deprecated) check if current call is top level (meaning it was triggered by an EoA or a L1 contract)\\n     * @dev this call has been deprecated and may be removed in a future release\\n     * @return true if current execution frame is not a call by another L2 contract\\n     */\\n    function isTopLevelCall() external view returns (bool);\\n\\n    /**\\n     * @notice map L1 sender contract address to its L2 alias\\n     * @param sender sender address\\n     * @param unused argument no longer used\\n     * @return aliased sender address\\n     */\\n    function mapL1SenderContractAddressToL2Alias(address sender, address unused)\\n        external\\n        pure\\n        returns (address);\\n\\n    /**\\n     * @notice check if the caller (of this caller of this) is an aliased L1 contract address\\n     * @return true iff the caller's address is an alias for an L1 contract address\\n     */\\n    function wasMyCallersAddressAliased() external view returns (bool);\\n\\n    /**\\n     * @notice return the address of the caller (of this caller of this), without applying L1 contract address aliasing\\n     * @return address of the caller's caller, without applying L1 contract address aliasing\\n     */\\n    function myCallersAddressWithoutAliasing() external view returns (address);\\n\\n    /**\\n     * @notice Send given amount of Eth to dest from sender.\\n     * This is a convenience function, which is equivalent to calling sendTxToL1 with empty data.\\n     * @param destination recipient address on L1\\n     * @return unique identifier for this L2-to-L1 transaction.\\n     */\\n    function withdrawEth(address destination)\\n        external\\n        payable\\n        returns (uint256);\\n\\n    /**\\n     * @notice Send a transaction to L1\\n     * @dev it is not possible to execute on the L1 any L2-to-L1 transaction which contains data\\n     * to a contract address without any code (as enforced by the Bridge contract).\\n     * @param destination recipient address on L1\\n     * @param data (optional) calldata for L1 contract call\\n     * @return a unique identifier for this L2-to-L1 transaction.\\n     */\\n    function sendTxToL1(address destination, bytes calldata data)\\n        external\\n        payable\\n        returns (uint256);\\n\\n    /**\\n     * @notice Get send Merkle tree state\\n     * @return size number of sends in the history\\n     * @return root root hash of the send history\\n     * @return partials hashes of partial subtrees in the send history tree\\n     */\\n    function sendMerkleTreeState()\\n        external\\n        view\\n        returns (\\n            uint256 size,\\n            bytes32 root,\\n            bytes32[] memory partials\\n        );\\n\\n    /**\\n     * @notice creates a send txn from L2 to L1\\n     * @param position = (level << 192) + leaf = (0 << 192) + leaf = leaf\\n     */\\n    event L2ToL1Tx(\\n        address caller,\\n        address indexed destination,\\n        uint256 indexed hash,\\n        uint256 indexed position,\\n        uint256 arbBlockNum,\\n        uint256 ethBlockNum,\\n        uint256 timestamp,\\n        uint256 callvalue,\\n        bytes data\\n    );\\n\\n    /// @dev DEPRECATED in favour of the new L2ToL1Tx event above after the nitro upgrade\\n    event L2ToL1Transaction(\\n        address caller,\\n        address indexed destination,\\n        uint256 indexed uniqueId,\\n        uint256 indexed batchNumber,\\n        uint256 indexInBatch,\\n        uint256 arbBlockNum,\\n        uint256 ethBlockNum,\\n        uint256 timestamp,\\n        uint256 callvalue,\\n        bytes data\\n    );\\n\\n    /**\\n     * @notice logs a merkle branch for proof synthesis\\n     * @param reserved an index meant only to align the 4th index with L2ToL1Transaction's 4th event\\n     * @param hash the merkle hash\\n     * @param position = (level << 192) + leaf\\n     */\\n    event SendMerkleUpdate(\\n        uint256 indexed reserved,\\n        bytes32 indexed hash,\\n        uint256 indexed position\\n    );\\n}\\n\",\"keccak256\":\"0xa8461b373712cb0f4950ef9cad1d12fb38442da76cd57ff916baa7920f7b5077\",\"license\":\"BUSL-1.1\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"L2ToL1Tx(address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes)":{"notice":"creates a send txn from L2 to L1"},"SendMerkleUpdate(uint256,bytes32,uint256)":{"notice":"logs a merkle branch for proof synthesis"}},"kind":"user","methods":{"arbBlockHash(uint256)":{"notice":"Get Arbitrum block hash (reverts unless currentBlockNum-256 <= arbBlockNum < currentBlockNum)"},"arbBlockNumber()":{"notice":"Get Arbitrum block number (distinct from L1 block number; Arbitrum genesis block has block number 0)"},"arbChainID()":{"notice":"Gets the rollup's unique chain identifier"},"arbOSVersion()":{"notice":"Get internal version number identifying an ArbOS build"},"getStorageGasAvailable()":{"notice":"Returns 0 since Nitro has no concept of storage gas"},"isTopLevelCall()":{"notice":"(deprecated) check if current call is top level (meaning it was triggered by an EoA or a L1 contract)"},"mapL1SenderContractAddressToL2Alias(address,address)":{"notice":"map L1 sender contract address to its L2 alias"},"myCallersAddressWithoutAliasing()":{"notice":"return the address of the caller (of this caller of this), without applying L1 contract address aliasing"},"sendMerkleTreeState()":{"notice":"Get send Merkle tree state"},"sendTxToL1(address,bytes)":{"notice":"Send a transaction to L1"},"wasMyCallersAddressAliased()":{"notice":"check if the caller (of this caller of this) is an aliased L1 contract address"},"withdrawEth(address)":{"notice":"Send given amount of Eth to dest from sender. This is a convenience function, which is equivalent to calling sendTxToL1 with empty data."}},"notice":"For use by contracts to interact with core L2-specific functionality. Precompiled contract that exists in every Arbitrum chain at address(100), 0x0000000000000000000000000000000000000064.","version":1}}},"@chainlink/contracts/src/v0.8/vrf/VRF.sol":{"VRF":{"abi":[],"devdoc":{"details":"Bibliographic references:Goldberg, et al., \"Verifiable Random Functions (VRFs)\", Internet Draftdraft-irtf-cfrg-vrf-05, IETF, Aug 11 2019,https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05Papadopoulos, et al., \"Making NSEC5 Practical for DNSSEC\", CryptologyePrint Archive, Report 2017/099, https://eprint.iacr.org/2017/099.pdf ****************************************************************************USAGEThe main entry point is _randomValueFromVRFProof. See its docstring. ****************************************************************************PURPOSEReggie the Random Oracle (not his real job) wants to provide randomnessto Vera the verifier in such a way that Vera can be sure he's notmaking his output up to suit himself. Reggie provides Vera a public keyto which he knows the secret key. Each time Vera provides a seed toReggie, he gives back a value which is computed completelydeterministically from the seed and the secret key.Reggie provides a proof by which Vera can verify that the output wascorrectly computed once Reggie tells it to her, but without that proof,the output is computationally indistinguishable to her from a uniformrandom sample from the output space.The purpose of this contract is to perform that verification. ****************************************************************************DESIGN NOTESThe VRF algorithm verified here satisfies the full uniqueness, fullcollision resistance, and full pseudo-randomness security properties.See \"SECURITY PROPERTIES\" below, andhttps://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-3An elliptic curve point is generally represented in the solidity codeas a uint256[2], corresponding to its affine coordinates inGF(FIELD_SIZE).For the sake of efficiency, this implementation deviates from the specin some minor ways:- Keccak hash rather than the SHA256 hash recommended inhttps://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.5Keccak costs much less gas on the EVM, and provides similar security.- Secp256k1 curve instead of the P-256 or ED25519 curves recommended inhttps://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.5For curve-point multiplication, it's much cheaper to abuse ECRECOVER- _hashToCurve recursively hashes until it finds a curve x-ordinate. Onthe EVM, this is slightly more efficient than the recommendation inhttps://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.4.1.1step 5, to concatenate with a nonce then hash, and rehash with thenonce updated until a valid x-ordinate is found.- _hashToCurve does not include a cipher version string or the byte 0x1in the hash message, as recommended in step 5.B of the draftstandard. They are unnecessary here because no variation in thecipher suite is allowed.- Similarly, the hash input in _scalarFromCurvePoints does not include acommitment to the cipher suite, either, which differs from step 2 ofhttps://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.4.3. Also, the hash input is the concatenation of the uncompressedpoints, not the compressed points as recommended in step 3.- In the calculation of the challenge value \"c\", the \"u\" value (i.e.the value computed by Reggie as the nonce times the secp256k1generator point, see steps 5 and 7 ofhttps://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.3) is replaced by its ethereum address, i.e. the lower 160 bits of thekeccak hash of the original u. This is because we only verify thecalculation of u up to its address, by abusing ECRECOVER. ****************************************************************************SECURITY PROPERTIESHere are the security properties for this VRF:Full uniqueness: For any seed and valid VRF public key, there isexactly one VRF output which can be proved to come from that seed, inthe sense that the proof will pass _verifyVRFProof.Full collision resistance: It's cryptographically infeasible to findtwo seeds with same VRF output from a fixed, valid VRF keyFull pseudorandomness: Absent the proofs that the VRF outputs arederived from a given seed, the outputs are computationallyindistinguishable from randomness.https://eprint.iacr.org/2017/099.pdf, Appendix B contains the proofsfor these properties.For secp256k1, the key validation described in sectionhttps://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.6is unnecessary, because secp256k1 has cofactor 1, and therepresentation of the public key used here (affine x- and y-ordinatesof the secp256k1 point on the standard y^2=x^3+7 curve) cannot refer tothe point at infinity. ****************************************************************************OTHER SECURITY CONSIDERATIONSThe seed input to the VRF could in principle force an arbitrary amountof work in _hashToCurve, by requiring extra rounds of hashing andchecking whether that's yielded the x ordinate of a secp256k1 point.However, under the Random Oracle Model the probability of choosing apoint which forces n extra rounds in _hashToCurve is 2⁻ⁿ. The base costfor calling _hashToCurve is about 25,000 gas, and each round of checkingfor a valid x ordinate costs about 15,555 gas, so to find a seed forwhich _hashToCurve would cost more than 2,017,000 gas, one would have totry, in expectation, about 2¹²⁸ seeds, which is infeasible for anyforeseeable computational resources. (25,000 + 128 * 15,555 < 2,017,000.)Since the gas block limit for the Ethereum main net is 10,000,000 gas,this means it is infeasible for an adversary to prevent correctoperation of this contract by choosing an adverse seed.(See TestMeasureHashToCurveGasCost for verification of the gas cost for_hashToCurve.)It may be possible to make a secure constant-time _hashToCurve function.See notes in _hashToCurve docstring.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea26469706673582212205c0e29f75b7d5b0373e0a315390d4d138a71d87c06e8c50afd26598f2c67304664736f6c63430008180033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3F DUP1 PUSH1 0x1D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 TLOAD 0xE 0x29 0xF7 JUMPDEST PUSH30 0x5B0373E0A315390D4D138A71D87C06E8C50AFD26598F2C67304664736F6C PUSH4 0x43000818 STOP CALLER ","sourceMap":"7182:20071:10:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"6080604052600080fdfea26469706673582212205c0e29f75b7d5b0373e0a315390d4d138a71d87c06e8c50afd26598f2c67304664736f6c63430008180033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 TLOAD 0xE 0x29 0xF7 JUMPDEST PUSH30 0x5B0373E0A315390D4D138A71D87C06E8C50AFD26598F2C67304664736F6C PUSH4 0x43000818 STOP CALLER ","sourceMap":"7182:20071:10:-:0;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"12600","executionCost":"66","totalCost":"12666"},"internal":{"_affineECAdd(uint256[2] memory,uint256[2] memory,uint256)":"infinite","_bigModExp(uint256,uint256)":"infinite","_ecmulVerify(uint256[2] memory,uint256,uint256[2] memory)":"infinite","_fieldHash(bytes memory)":"infinite","_hashToCurve(uint256[2] memory,uint256)":"infinite","_isOnCurve(uint256[2] memory)":"infinite","_linearCombination(uint256,uint256[2] memory,uint256[2] memory,uint256,uint256[2] memory,uint256[2] memory,uint256)":"infinite","_newCandidateSecp256k1Point(bytes memory)":"infinite","_projectiveECAdd(uint256,uint256,uint256,uint256)":"infinite","_projectiveMul(uint256,uint256,uint256,uint256)":"infinite","_projectiveSub(uint256,uint256,uint256,uint256)":"infinite","_randomValueFromVRFProof(struct VRF.Proof memory,uint256)":"infinite","_scalarFromCurvePoints(uint256[2] memory,uint256[2] memory,uint256[2] memory,address,uint256[2] memory)":"infinite","_squareRoot(uint256)":"infinite","_verifyLinearCombinationWithGenerator(uint256,uint256[2] memory,uint256,address)":"infinite","_verifyVRFProof(uint256[2] memory,uint256[2] memory,uint256,uint256,uint256,address,uint256[2] memory,uint256[2] memory,uint256)":"infinite","_ySquared(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Bibliographic references:Goldberg, et al., \\\"Verifiable Random Functions (VRFs)\\\", Internet Draftdraft-irtf-cfrg-vrf-05, IETF, Aug 11 2019,https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05Papadopoulos, et al., \\\"Making NSEC5 Practical for DNSSEC\\\", CryptologyePrint Archive, Report 2017/099, https://eprint.iacr.org/2017/099.pdf ****************************************************************************USAGEThe main entry point is _randomValueFromVRFProof. See its docstring. ****************************************************************************PURPOSEReggie the Random Oracle (not his real job) wants to provide randomnessto Vera the verifier in such a way that Vera can be sure he's notmaking his output up to suit himself. Reggie provides Vera a public keyto which he knows the secret key. Each time Vera provides a seed toReggie, he gives back a value which is computed completelydeterministically from the seed and the secret key.Reggie provides a proof by which Vera can verify that the output wascorrectly computed once Reggie tells it to her, but without that proof,the output is computationally indistinguishable to her from a uniformrandom sample from the output space.The purpose of this contract is to perform that verification. ****************************************************************************DESIGN NOTESThe VRF algorithm verified here satisfies the full uniqueness, fullcollision resistance, and full pseudo-randomness security properties.See \\\"SECURITY PROPERTIES\\\" below, andhttps://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-3An elliptic curve point is generally represented in the solidity codeas a uint256[2], corresponding to its affine coordinates inGF(FIELD_SIZE).For the sake of efficiency, this implementation deviates from the specin some minor ways:- Keccak hash rather than the SHA256 hash recommended inhttps://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.5Keccak costs much less gas on the EVM, and provides similar security.- Secp256k1 curve instead of the P-256 or ED25519 curves recommended inhttps://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.5For curve-point multiplication, it's much cheaper to abuse ECRECOVER- _hashToCurve recursively hashes until it finds a curve x-ordinate. Onthe EVM, this is slightly more efficient than the recommendation inhttps://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.4.1.1step 5, to concatenate with a nonce then hash, and rehash with thenonce updated until a valid x-ordinate is found.- _hashToCurve does not include a cipher version string or the byte 0x1in the hash message, as recommended in step 5.B of the draftstandard. They are unnecessary here because no variation in thecipher suite is allowed.- Similarly, the hash input in _scalarFromCurvePoints does not include acommitment to the cipher suite, either, which differs from step 2 ofhttps://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.4.3. Also, the hash input is the concatenation of the uncompressedpoints, not the compressed points as recommended in step 3.- In the calculation of the challenge value \\\"c\\\", the \\\"u\\\" value (i.e.the value computed by Reggie as the nonce times the secp256k1generator point, see steps 5 and 7 ofhttps://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.3) is replaced by its ethereum address, i.e. the lower 160 bits of thekeccak hash of the original u. This is because we only verify thecalculation of u up to its address, by abusing ECRECOVER. ****************************************************************************SECURITY PROPERTIESHere are the security properties for this VRF:Full uniqueness: For any seed and valid VRF public key, there isexactly one VRF output which can be proved to come from that seed, inthe sense that the proof will pass _verifyVRFProof.Full collision resistance: It's cryptographically infeasible to findtwo seeds with same VRF output from a fixed, valid VRF keyFull pseudorandomness: Absent the proofs that the VRF outputs arederived from a given seed, the outputs are computationallyindistinguishable from randomness.https://eprint.iacr.org/2017/099.pdf, Appendix B contains the proofsfor these properties.For secp256k1, the key validation described in sectionhttps://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.6is unnecessary, because secp256k1 has cofactor 1, and therepresentation of the public key used here (affine x- and y-ordinatesof the secp256k1 point on the standard y^2=x^3+7 curve) cannot refer tothe point at infinity. ****************************************************************************OTHER SECURITY CONSIDERATIONSThe seed input to the VRF could in principle force an arbitrary amountof work in _hashToCurve, by requiring extra rounds of hashing andchecking whether that's yielded the x ordinate of a secp256k1 point.However, under the Random Oracle Model the probability of choosing apoint which forces n extra rounds in _hashToCurve is 2\\u207b\\u207f. The base costfor calling _hashToCurve is about 25,000 gas, and each round of checkingfor a valid x ordinate costs about 15,555 gas, so to find a seed forwhich _hashToCurve would cost more than 2,017,000 gas, one would have totry, in expectation, about 2\\u00b9\\u00b2\\u2078 seeds, which is infeasible for anyforeseeable computational resources. (25,000 + 128 * 15,555 < 2,017,000.)Since the gas block limit for the Ethereum main net is 10,000,000 gas,this means it is infeasible for an adversary to prevent correctoperation of this contract by choosing an adverse seed.(See TestMeasureHashToCurveGasCost for verification of the gas cost for_hashToCurve.)It may be possible to make a secure constant-time _hashToCurve function.See notes in _hashToCurve docstring.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"****************************************************************************Verification of verifiable-random-function (VRF) proofs, followinghttps://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.3See https://eprint.iacr.org/2017/099.pdf for security proofs.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/vrf/VRF.sol\":\"VRF\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/vrf/VRF.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/** ****************************************************************************\\n  * @notice Verification of verifiable-random-function (VRF) proofs, following\\n  * @notice https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.3\\n  * @notice See https://eprint.iacr.org/2017/099.pdf for security proofs.\\n\\n  * @dev Bibliographic references:\\n\\n  * @dev Goldberg, et al., \\\"Verifiable Random Functions (VRFs)\\\", Internet Draft\\n  * @dev draft-irtf-cfrg-vrf-05, IETF, Aug 11 2019,\\n  * @dev https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05\\n\\n  * @dev Papadopoulos, et al., \\\"Making NSEC5 Practical for DNSSEC\\\", Cryptology\\n  * @dev ePrint Archive, Report 2017/099, https://eprint.iacr.org/2017/099.pdf\\n  * ****************************************************************************\\n  * @dev USAGE\\n\\n  * @dev The main entry point is _randomValueFromVRFProof. See its docstring.\\n  * ****************************************************************************\\n  * @dev PURPOSE\\n\\n  * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n  * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n  * @dev making his output up to suit himself. Reggie provides Vera a public key\\n  * @dev to which he knows the secret key. Each time Vera provides a seed to\\n  * @dev Reggie, he gives back a value which is computed completely\\n  * @dev deterministically from the seed and the secret key.\\n\\n  * @dev Reggie provides a proof by which Vera can verify that the output was\\n  * @dev correctly computed once Reggie tells it to her, but without that proof,\\n  * @dev the output is computationally indistinguishable to her from a uniform\\n  * @dev random sample from the output space.\\n\\n  * @dev The purpose of this contract is to perform that verification.\\n  * ****************************************************************************\\n  * @dev DESIGN NOTES\\n\\n  * @dev The VRF algorithm verified here satisfies the full uniqueness, full\\n  * @dev collision resistance, and full pseudo-randomness security properties.\\n  * @dev See \\\"SECURITY PROPERTIES\\\" below, and\\n  * @dev https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-3\\n\\n  * @dev An elliptic curve point is generally represented in the solidity code\\n  * @dev as a uint256[2], corresponding to its affine coordinates in\\n  * @dev GF(FIELD_SIZE).\\n\\n  * @dev For the sake of efficiency, this implementation deviates from the spec\\n  * @dev in some minor ways:\\n\\n  * @dev - Keccak hash rather than the SHA256 hash recommended in\\n  * @dev   https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.5\\n  * @dev   Keccak costs much less gas on the EVM, and provides similar security.\\n\\n  * @dev - Secp256k1 curve instead of the P-256 or ED25519 curves recommended in\\n  * @dev   https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.5\\n  * @dev   For curve-point multiplication, it's much cheaper to abuse ECRECOVER\\n\\n  * @dev - _hashToCurve recursively hashes until it finds a curve x-ordinate. On\\n  * @dev   the EVM, this is slightly more efficient than the recommendation in\\n  * @dev   https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.4.1.1\\n  * @dev   step 5, to concatenate with a nonce then hash, and rehash with the\\n  * @dev   nonce updated until a valid x-ordinate is found.\\n\\n  * @dev - _hashToCurve does not include a cipher version string or the byte 0x1\\n  * @dev   in the hash message, as recommended in step 5.B of the draft\\n  * @dev   standard. They are unnecessary here because no variation in the\\n  * @dev   cipher suite is allowed.\\n\\n  * @dev - Similarly, the hash input in _scalarFromCurvePoints does not include a\\n  * @dev   commitment to the cipher suite, either, which differs from step 2 of\\n  * @dev   https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.4.3\\n  * @dev   . Also, the hash input is the concatenation of the uncompressed\\n  * @dev   points, not the compressed points as recommended in step 3.\\n\\n  * @dev - In the calculation of the challenge value \\\"c\\\", the \\\"u\\\" value (i.e.\\n  * @dev   the value computed by Reggie as the nonce times the secp256k1\\n  * @dev   generator point, see steps 5 and 7 of\\n  * @dev   https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.3\\n  * @dev   ) is replaced by its ethereum address, i.e. the lower 160 bits of the\\n  * @dev   keccak hash of the original u. This is because we only verify the\\n  * @dev   calculation of u up to its address, by abusing ECRECOVER.\\n  * ****************************************************************************\\n  * @dev   SECURITY PROPERTIES\\n\\n  * @dev Here are the security properties for this VRF:\\n\\n  * @dev Full uniqueness: For any seed and valid VRF public key, there is\\n  * @dev   exactly one VRF output which can be proved to come from that seed, in\\n  * @dev   the sense that the proof will pass _verifyVRFProof.\\n\\n  * @dev Full collision resistance: It's cryptographically infeasible to find\\n  * @dev   two seeds with same VRF output from a fixed, valid VRF key\\n\\n  * @dev Full pseudorandomness: Absent the proofs that the VRF outputs are\\n  * @dev   derived from a given seed, the outputs are computationally\\n  * @dev   indistinguishable from randomness.\\n\\n  * @dev https://eprint.iacr.org/2017/099.pdf, Appendix B contains the proofs\\n  * @dev for these properties.\\n\\n  * @dev For secp256k1, the key validation described in section\\n  * @dev https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.6\\n  * @dev is unnecessary, because secp256k1 has cofactor 1, and the\\n  * @dev representation of the public key used here (affine x- and y-ordinates\\n  * @dev of the secp256k1 point on the standard y^2=x^3+7 curve) cannot refer to\\n  * @dev the point at infinity.\\n  * ****************************************************************************\\n  * @dev OTHER SECURITY CONSIDERATIONS\\n  *\\n  * @dev The seed input to the VRF could in principle force an arbitrary amount\\n  * @dev of work in _hashToCurve, by requiring extra rounds of hashing and\\n  * @dev checking whether that's yielded the x ordinate of a secp256k1 point.\\n  * @dev However, under the Random Oracle Model the probability of choosing a\\n  * @dev point which forces n extra rounds in _hashToCurve is 2\\u207b\\u207f. The base cost\\n  * @dev for calling _hashToCurve is about 25,000 gas, and each round of checking\\n  * @dev for a valid x ordinate costs about 15,555 gas, so to find a seed for\\n  * @dev which _hashToCurve would cost more than 2,017,000 gas, one would have to\\n  * @dev try, in expectation, about 2\\u00b9\\u00b2\\u2078 seeds, which is infeasible for any\\n  * @dev foreseeable computational resources. (25,000 + 128 * 15,555 < 2,017,000.)\\n\\n  * @dev Since the gas block limit for the Ethereum main net is 10,000,000 gas,\\n  * @dev this means it is infeasible for an adversary to prevent correct\\n  * @dev operation of this contract by choosing an adverse seed.\\n\\n  * @dev (See TestMeasureHashToCurveGasCost for verification of the gas cost for\\n  * @dev _hashToCurve.)\\n\\n  * @dev It may be possible to make a secure constant-time _hashToCurve function.\\n  * @dev See notes in _hashToCurve docstring.\\n*/\\ncontract VRF {\\n  // See https://www.secg.org/sec2-v2.pdf, section 2.4.1, for these constants.\\n  // Number of points in Secp256k1\\n  uint256 private constant GROUP_ORDER = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141;\\n  // Prime characteristic of the galois field over which Secp256k1 is defined\\n  uint256 private constant FIELD_SIZE =\\n    // solium-disable-next-line indentation\\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F;\\n  uint256 private constant WORD_LENGTH_BYTES = 0x20;\\n\\n  // (base^exponent) % FIELD_SIZE\\n  // Cribbed from https://medium.com/@rbkhmrcr/precompiles-solidity-e5d29bd428c4\\n  function _bigModExp(uint256 base, uint256 exponent) internal view returns (uint256 exponentiation) {\\n    uint256 callResult;\\n    uint256[6] memory bigModExpContractInputs;\\n    bigModExpContractInputs[0] = WORD_LENGTH_BYTES; // Length of base\\n    bigModExpContractInputs[1] = WORD_LENGTH_BYTES; // Length of exponent\\n    bigModExpContractInputs[2] = WORD_LENGTH_BYTES; // Length of modulus\\n    bigModExpContractInputs[3] = base;\\n    bigModExpContractInputs[4] = exponent;\\n    bigModExpContractInputs[5] = FIELD_SIZE;\\n    uint256[1] memory output;\\n    assembly {\\n      callResult := staticcall(\\n        not(0), // Gas cost: no limit\\n        0x05, // Bigmodexp contract address\\n        bigModExpContractInputs,\\n        0xc0, // Length of input segment: 6*0x20-bytes\\n        output,\\n        0x20 // Length of output segment\\n      )\\n    }\\n    if (callResult == 0) {\\n      // solhint-disable-next-line gas-custom-errors\\n      revert(\\\"bigModExp failure!\\\");\\n    }\\n    return output[0];\\n  }\\n\\n  // Let q=FIELD_SIZE. q % 4 = 3, \\u2234 x\\u2261r^2 mod q \\u21d2 x^SQRT_POWER\\u2261\\u00b1r mod q.  See\\n  // https://en.wikipedia.org/wiki/Modular_square_root#Prime_or_prime_power_modulus\\n  uint256 private constant SQRT_POWER = (FIELD_SIZE + 1) >> 2;\\n\\n  // Computes a s.t. a^2 = x in the field. Assumes a exists\\n  function _squareRoot(uint256 x) internal view returns (uint256) {\\n    return _bigModExp(x, SQRT_POWER);\\n  }\\n\\n  // The value of y^2 given that (x,y) is on secp256k1.\\n  function _ySquared(uint256 x) internal pure returns (uint256) {\\n    // Curve is y^2=x^3+7. See section 2.4.1 of https://www.secg.org/sec2-v2.pdf\\n    uint256 xCubed = mulmod(x, mulmod(x, x, FIELD_SIZE), FIELD_SIZE);\\n    return addmod(xCubed, 7, FIELD_SIZE);\\n  }\\n\\n  // True iff p is on secp256k1\\n  function _isOnCurve(uint256[2] memory p) internal pure returns (bool) {\\n    // Section 2.3.6. in https://www.secg.org/sec1-v2.pdf\\n    // requires each ordinate to be in [0, ..., FIELD_SIZE-1]\\n    // solhint-disable-next-line gas-custom-errors\\n    require(p[0] < FIELD_SIZE, \\\"invalid x-ordinate\\\");\\n    // solhint-disable-next-line gas-custom-errors\\n    require(p[1] < FIELD_SIZE, \\\"invalid y-ordinate\\\");\\n    return _ySquared(p[0]) == mulmod(p[1], p[1], FIELD_SIZE);\\n  }\\n\\n  // Hash x uniformly into {0, ..., FIELD_SIZE-1}.\\n  function _fieldHash(bytes memory b) internal pure returns (uint256 x_) {\\n    x_ = uint256(keccak256(b));\\n    // Rejecting if x >= FIELD_SIZE corresponds to step 2.1 in section 2.3.4 of\\n    // http://www.secg.org/sec1-v2.pdf , which is part of the definition of\\n    // string_to_point in the IETF draft\\n    while (x_ >= FIELD_SIZE) {\\n      x_ = uint256(keccak256(abi.encodePacked(x_)));\\n    }\\n    return x_;\\n  }\\n\\n  // Hash b to a random point which hopefully lies on secp256k1. The y ordinate\\n  // is always even, due to\\n  // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.4.1.1\\n  // step 5.C, which references arbitrary_string_to_point, defined in\\n  // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.5 as\\n  // returning the point with given x ordinate, and even y ordinate.\\n  function _newCandidateSecp256k1Point(bytes memory b) internal view returns (uint256[2] memory p) {\\n    unchecked {\\n      p[0] = _fieldHash(b);\\n      p[1] = _squareRoot(_ySquared(p[0]));\\n      if (p[1] % 2 == 1) {\\n        // Note that 0 <= p[1] < FIELD_SIZE\\n        // so this cannot wrap, we use unchecked to save gas.\\n        p[1] = FIELD_SIZE - p[1];\\n      }\\n    }\\n    return p;\\n  }\\n\\n  // Domain-separation tag for initial hash in _hashToCurve. Corresponds to\\n  // vrf.go/hashToCurveHashPrefix\\n  uint256 internal constant HASH_TO_CURVE_HASH_PREFIX = 1;\\n\\n  // Cryptographic hash function onto the curve.\\n  //\\n  // Corresponds to algorithm in section 5.4.1.1 of the draft standard. (But see\\n  // DESIGN NOTES above for slight differences.)\\n  //\\n  // TODO(alx): Implement a bounded-computation hash-to-curve, as described in\\n  // \\\"Construction of Rational Points on Elliptic Curves over Finite Fields\\\"\\n  // http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.831.5299&rep=rep1&type=pdf\\n  // and suggested by\\n  // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-01#section-5.2.2\\n  // (Though we can't used exactly that because secp256k1's j-invariant is 0.)\\n  //\\n  // This would greatly simplify the analysis in \\\"OTHER SECURITY CONSIDERATIONS\\\"\\n  // https://www.pivotaltracker.com/story/show/171120900\\n  function _hashToCurve(uint256[2] memory pk, uint256 input) internal view returns (uint256[2] memory rv) {\\n    rv = _newCandidateSecp256k1Point(abi.encodePacked(HASH_TO_CURVE_HASH_PREFIX, pk, input));\\n    while (!_isOnCurve(rv)) {\\n      rv = _newCandidateSecp256k1Point(abi.encodePacked(rv[0]));\\n    }\\n    return rv;\\n  }\\n\\n  /** *********************************************************************\\n   * @notice Check that product==scalar*multiplicand\\n   *\\n   * @dev Based on Vitalik Buterin's idea in ethresear.ch post cited below.\\n   *\\n   * @param multiplicand: secp256k1 point\\n   * @param scalar: non-zero GF(GROUP_ORDER) scalar\\n   * @param product: secp256k1 expected to be multiplier * multiplicand\\n   * @return verifies true iff product==scalar*multiplicand, with cryptographically high probability\\n   */\\n  function _ecmulVerify(\\n    uint256[2] memory multiplicand,\\n    uint256 scalar,\\n    uint256[2] memory product\\n  ) internal pure returns (bool verifies) {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(scalar != 0, \\\"zero scalar\\\"); // Rules out an ecrecover failure case\\n    uint256 x = multiplicand[0]; // x ordinate of multiplicand\\n    uint8 v = multiplicand[1] % 2 == 0 ? 27 : 28; // parity of y ordinate\\n    // https://ethresear.ch/t/you-can-kinda-abuse-ecrecover-to-do-ecmul-in-secp256k1-today/2384/9\\n    // Point corresponding to address ecrecover(0, v, x, s=scalar*x) is\\n    // (x\\u207b\\u00b9 mod GROUP_ORDER) * (scalar * x * multiplicand - 0 * g), i.e.\\n    // scalar*multiplicand. See https://crypto.stackexchange.com/a/18106\\n    bytes32 scalarTimesX = bytes32(mulmod(scalar, x, GROUP_ORDER));\\n    address actual = ecrecover(bytes32(0), v, bytes32(x), scalarTimesX);\\n    // Explicit conversion to address takes bottom 160 bits\\n    address expected = address(uint160(uint256(keccak256(abi.encodePacked(product)))));\\n    return (actual == expected);\\n  }\\n\\n  // Returns x1/z1-x2/z2=(x1z2-x2z1)/(z1z2) in projective coordinates on P\\u00b9(\\ud835\\udd3d\\u2099)\\n  function _projectiveSub(\\n    uint256 x1,\\n    uint256 z1,\\n    uint256 x2,\\n    uint256 z2\\n  ) internal pure returns (uint256 x3, uint256 z3) {\\n    unchecked {\\n      uint256 num1 = mulmod(z2, x1, FIELD_SIZE);\\n      // Note this cannot wrap since x2 is a point in [0, FIELD_SIZE-1]\\n      // we use unchecked to save gas.\\n      uint256 num2 = mulmod(FIELD_SIZE - x2, z1, FIELD_SIZE);\\n      (x3, z3) = (addmod(num1, num2, FIELD_SIZE), mulmod(z1, z2, FIELD_SIZE));\\n    }\\n    return (x3, z3);\\n  }\\n\\n  // Returns x1/z1*x2/z2=(x1x2)/(z1z2), in projective coordinates on P\\u00b9(\\ud835\\udd3d\\u2099)\\n  function _projectiveMul(\\n    uint256 x1,\\n    uint256 z1,\\n    uint256 x2,\\n    uint256 z2\\n  ) internal pure returns (uint256 x3, uint256 z3) {\\n    (x3, z3) = (mulmod(x1, x2, FIELD_SIZE), mulmod(z1, z2, FIELD_SIZE));\\n    return (x3, z3);\\n  }\\n\\n  /** **************************************************************************\\n        @notice Computes elliptic-curve sum, in projective co-ordinates\\n\\n        @dev Using projective coordinates avoids costly divisions\\n\\n        @dev To use this with p and q in affine coordinates, call\\n        @dev _projectiveECAdd(px, py, qx, qy). This will return\\n        @dev the addition of (px, py, 1) and (qx, qy, 1), in the\\n        @dev secp256k1 group.\\n\\n        @dev This can be used to calculate the z which is the inverse to zInv\\n        @dev in isValidVRFOutput. But consider using a faster\\n        @dev re-implementation such as ProjectiveECAdd in the golang vrf package.\\n\\n        @dev This function assumes [px,py,1],[qx,qy,1] are valid projective\\n             coordinates of secp256k1 points. That is safe in this contract,\\n             because this method is only used by _linearCombination, which checks\\n             points are on the curve via ecrecover.\\n        **************************************************************************\\n        @param px The first affine coordinate of the first summand\\n        @param py The second affine coordinate of the first summand\\n        @param qx The first affine coordinate of the second summand\\n        @param qy The second affine coordinate of the second summand\\n\\n        (px,py) and (qx,qy) must be distinct, valid secp256k1 points.\\n        **************************************************************************\\n        Return values are projective coordinates of [px,py,1]+[qx,qy,1] as points\\n        on secp256k1, in P\\u00b2(\\ud835\\udd3d\\u2099)\\n        @return sx\\n        @return sy\\n        @return sz\\n    */\\n  function _projectiveECAdd(\\n    uint256 px,\\n    uint256 py,\\n    uint256 qx,\\n    uint256 qy\\n  ) internal pure returns (uint256 sx, uint256 sy, uint256 sz) {\\n    unchecked {\\n      // See \\\"Group law for E/K : y^2 = x^3 + ax + b\\\", in section 3.1.2, p. 80,\\n      // \\\"Guide to Elliptic Curve Cryptography\\\" by Hankerson, Menezes and Vanstone\\n      // We take the equations there for (sx,sy), and homogenize them to\\n      // projective coordinates. That way, no inverses are required, here, and we\\n      // only need the one inverse in _affineECAdd.\\n\\n      // We only need the \\\"point addition\\\" equations from Hankerson et al. Can\\n      // skip the \\\"point doubling\\\" equations because p1 == p2 is cryptographically\\n      // impossible, and required not to be the case in _linearCombination.\\n\\n      // Add extra \\\"projective coordinate\\\" to the two points\\n      (uint256 z1, uint256 z2) = (1, 1);\\n\\n      // (lx, lz) = (qy-py)/(qx-px), i.e., gradient of secant line.\\n      // Cannot wrap since px and py are in [0, FIELD_SIZE-1]\\n      uint256 lx = addmod(qy, FIELD_SIZE - py, FIELD_SIZE);\\n      uint256 lz = addmod(qx, FIELD_SIZE - px, FIELD_SIZE);\\n\\n      uint256 dx; // Accumulates denominator from sx calculation\\n      // sx=((qy-py)/(qx-px))^2-px-qx\\n      (sx, dx) = _projectiveMul(lx, lz, lx, lz); // ((qy-py)/(qx-px))^2\\n      (sx, dx) = _projectiveSub(sx, dx, px, z1); // ((qy-py)/(qx-px))^2-px\\n      (sx, dx) = _projectiveSub(sx, dx, qx, z2); // ((qy-py)/(qx-px))^2-px-qx\\n\\n      uint256 dy; // Accumulates denominator from sy calculation\\n      // sy=((qy-py)/(qx-px))(px-sx)-py\\n      (sy, dy) = _projectiveSub(px, z1, sx, dx); // px-sx\\n      (sy, dy) = _projectiveMul(sy, dy, lx, lz); // ((qy-py)/(qx-px))(px-sx)\\n      (sy, dy) = _projectiveSub(sy, dy, py, z1); // ((qy-py)/(qx-px))(px-sx)-py\\n\\n      if (dx != dy) {\\n        // Cross-multiply to put everything over a common denominator\\n        sx = mulmod(sx, dy, FIELD_SIZE);\\n        sy = mulmod(sy, dx, FIELD_SIZE);\\n        sz = mulmod(dx, dy, FIELD_SIZE);\\n      } else {\\n        // Already over a common denominator, use that for z ordinate\\n        sz = dx;\\n      }\\n    }\\n    return (sx, sy, sz);\\n  }\\n\\n  // p1+p2, as affine points on secp256k1.\\n  //\\n  // invZ must be the inverse of the z returned by _projectiveECAdd(p1, p2).\\n  // It is computed off-chain to save gas.\\n  //\\n  // p1 and p2 must be distinct, because _projectiveECAdd doesn't handle\\n  // point doubling.\\n  function _affineECAdd(\\n    uint256[2] memory p1,\\n    uint256[2] memory p2,\\n    uint256 invZ\\n  ) internal pure returns (uint256[2] memory) {\\n    uint256 x;\\n    uint256 y;\\n    uint256 z;\\n    (x, y, z) = _projectiveECAdd(p1[0], p1[1], p2[0], p2[1]);\\n    // solhint-disable-next-line gas-custom-errors\\n    require(mulmod(z, invZ, FIELD_SIZE) == 1, \\\"invZ must be inverse of z\\\");\\n    // Clear the z ordinate of the projective representation by dividing through\\n    // by it, to obtain the affine representation\\n    return [mulmod(x, invZ, FIELD_SIZE), mulmod(y, invZ, FIELD_SIZE)];\\n  }\\n\\n  // True iff address(c*p+s*g) == lcWitness, where g is generator. (With\\n  // cryptographically high probability.)\\n  function _verifyLinearCombinationWithGenerator(\\n    uint256 c,\\n    uint256[2] memory p,\\n    uint256 s,\\n    address lcWitness\\n  ) internal pure returns (bool) {\\n    // Rule out ecrecover failure modes which return address 0.\\n    unchecked {\\n      // solhint-disable-next-line gas-custom-errors\\n      require(lcWitness != address(0), \\\"bad witness\\\");\\n      uint8 v = (p[1] % 2 == 0) ? 27 : 28; // parity of y-ordinate of p\\n      // Note this cannot wrap (X - Y % X), but we use unchecked to save\\n      // gas.\\n      bytes32 pseudoHash = bytes32(GROUP_ORDER - mulmod(p[0], s, GROUP_ORDER)); // -s*p[0]\\n      bytes32 pseudoSignature = bytes32(mulmod(c, p[0], GROUP_ORDER)); // c*p[0]\\n      // https://ethresear.ch/t/you-can-kinda-abuse-ecrecover-to-do-ecmul-in-secp256k1-today/2384/9\\n      // The point corresponding to the address returned by\\n      // ecrecover(-s*p[0],v,p[0],c*p[0]) is\\n      // (p[0]\\u207b\\u00b9 mod GROUP_ORDER)*(c*p[0]-(-s)*p[0]*g)=c*p+s*g.\\n      // See https://crypto.stackexchange.com/a/18106\\n      // https://bitcoin.stackexchange.com/questions/38351/ecdsa-v-r-s-what-is-v\\n      address computed = ecrecover(pseudoHash, v, bytes32(p[0]), pseudoSignature);\\n      return computed == lcWitness;\\n    }\\n  }\\n\\n  // c*p1 + s*p2. Requires cp1Witness=c*p1 and sp2Witness=s*p2. Also\\n  // requires cp1Witness != sp2Witness (which is fine for this application,\\n  // since it is cryptographically impossible for them to be equal. In the\\n  // (cryptographically impossible) case that a prover accidentally derives\\n  // a proof with equal c*p1 and s*p2, they should retry with a different\\n  // proof nonce.) Assumes that all points are on secp256k1\\n  // (which is checked in _verifyVRFProof below.)\\n  function _linearCombination(\\n    uint256 c,\\n    uint256[2] memory p1,\\n    uint256[2] memory cp1Witness,\\n    uint256 s,\\n    uint256[2] memory p2,\\n    uint256[2] memory sp2Witness,\\n    uint256 zInv\\n  ) internal pure returns (uint256[2] memory) {\\n    unchecked {\\n      // Note we are relying on the wrap around here\\n      // solhint-disable-next-line gas-custom-errors\\n      require((cp1Witness[0] % FIELD_SIZE) != (sp2Witness[0] % FIELD_SIZE), \\\"points in sum must be distinct\\\");\\n      // solhint-disable-next-line gas-custom-errors\\n      require(_ecmulVerify(p1, c, cp1Witness), \\\"First mul check failed\\\");\\n      // solhint-disable-next-line gas-custom-errors\\n      require(_ecmulVerify(p2, s, sp2Witness), \\\"Second mul check failed\\\");\\n      return _affineECAdd(cp1Witness, sp2Witness, zInv);\\n    }\\n  }\\n\\n  // Domain-separation tag for the hash taken in _scalarFromCurvePoints.\\n  // Corresponds to scalarFromCurveHashPrefix in vrf.go\\n  uint256 internal constant SCALAR_FROM_CURVE_POINTS_HASH_PREFIX = 2;\\n\\n  // Pseudo-random number from inputs. Matches vrf.go/_scalarFromCurvePoints, and\\n  // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.4.3\\n  // The draft calls (in step 7, via the definition of string_to_int, in\\n  // https://datatracker.ietf.org/doc/html/rfc8017#section-4.2 ) for taking the\\n  // first hash without checking that it corresponds to a number less than the\\n  // group order, which will lead to a slight bias in the sample.\\n  //\\n  // TODO(alx): We could save a bit of gas by following the standard here and\\n  // using the compressed representation of the points, if we collated the y\\n  // parities into a single bytes32.\\n  // https://www.pivotaltracker.com/story/show/171120588\\n  function _scalarFromCurvePoints(\\n    uint256[2] memory hash,\\n    uint256[2] memory pk,\\n    uint256[2] memory gamma,\\n    address uWitness,\\n    uint256[2] memory v\\n  ) internal pure returns (uint256 s) {\\n    return uint256(keccak256(abi.encodePacked(SCALAR_FROM_CURVE_POINTS_HASH_PREFIX, hash, pk, gamma, v, uWitness)));\\n  }\\n\\n  // True if (gamma, c, s) is a correctly constructed randomness proof from pk\\n  // and seed. zInv must be the inverse of the third ordinate from\\n  // _projectiveECAdd applied to cGammaWitness and sHashWitness. Corresponds to\\n  // section 5.3 of the IETF draft.\\n  //\\n  // TODO(alx): Since I'm only using pk in the ecrecover call, I could only pass\\n  // the x ordinate, and the parity of the y ordinate in the top bit of uWitness\\n  // (which I could make a uint256 without using any extra space.) Would save\\n  // about 2000 gas. https://www.pivotaltracker.com/story/show/170828567\\n  function _verifyVRFProof(\\n    uint256[2] memory pk,\\n    uint256[2] memory gamma,\\n    uint256 c,\\n    uint256 s,\\n    uint256 seed,\\n    address uWitness,\\n    uint256[2] memory cGammaWitness,\\n    uint256[2] memory sHashWitness,\\n    uint256 zInv\\n  ) internal view {\\n    unchecked {\\n      // solhint-disable-next-line gas-custom-errors\\n      require(_isOnCurve(pk), \\\"public key is not on curve\\\");\\n      // solhint-disable-next-line gas-custom-errors\\n      require(_isOnCurve(gamma), \\\"gamma is not on curve\\\");\\n      // solhint-disable-next-line gas-custom-errors\\n      require(_isOnCurve(cGammaWitness), \\\"cGammaWitness is not on curve\\\");\\n      // solhint-disable-next-line gas-custom-errors\\n      require(_isOnCurve(sHashWitness), \\\"sHashWitness is not on curve\\\");\\n      // Step 5. of IETF draft section 5.3 (pk corresponds to 5.3's Y, and here\\n      // we use the address of u instead of u itself. Also, here we add the\\n      // terms instead of taking the difference, and in the proof construction in\\n      // vrf.GenerateProof, we correspondingly take the difference instead of\\n      // taking the sum as they do in step 7 of section 5.1.)\\n      // solhint-disable-next-line gas-custom-errors\\n      require(_verifyLinearCombinationWithGenerator(c, pk, s, uWitness), \\\"addr(c*pk+s*g)!=_uWitness\\\");\\n      // Step 4. of IETF draft section 5.3 (pk corresponds to Y, seed to alpha_string)\\n      uint256[2] memory hash = _hashToCurve(pk, seed);\\n      // Step 6. of IETF draft section 5.3, but see note for step 5 about +/- terms\\n      uint256[2] memory v = _linearCombination(c, gamma, cGammaWitness, s, hash, sHashWitness, zInv);\\n      // Steps 7. and 8. of IETF draft section 5.3\\n      uint256 derivedC = _scalarFromCurvePoints(hash, pk, gamma, uWitness, v);\\n      // solhint-disable-next-line gas-custom-errors\\n      require(c == derivedC, \\\"invalid proof\\\");\\n    }\\n  }\\n\\n  // Domain-separation tag for the hash used as the final VRF output.\\n  // Corresponds to vrfRandomOutputHashPrefix in vrf.go\\n  uint256 internal constant VRF_RANDOM_OUTPUT_HASH_PREFIX = 3;\\n\\n  struct Proof {\\n    uint256[2] pk;\\n    uint256[2] gamma;\\n    uint256 c;\\n    uint256 s;\\n    uint256 seed;\\n    address uWitness;\\n    uint256[2] cGammaWitness;\\n    uint256[2] sHashWitness;\\n    uint256 zInv;\\n  }\\n\\n  /* ***************************************************************************\\n     * @notice Returns proof's output, if proof is valid. Otherwise reverts\\n\\n     * @param proof vrf proof components\\n     * @param seed  seed used to generate the vrf output\\n     *\\n     * Throws if proof is invalid, otherwise:\\n     * @return output i.e., the random output implied by the proof\\n     * ***************************************************************************\\n     */\\n  function _randomValueFromVRFProof(Proof memory proof, uint256 seed) internal view returns (uint256 output) {\\n    _verifyVRFProof(\\n      proof.pk,\\n      proof.gamma,\\n      proof.c,\\n      proof.s,\\n      seed,\\n      proof.uWitness,\\n      proof.cGammaWitness,\\n      proof.sHashWitness,\\n      proof.zInv\\n    );\\n    output = uint256(keccak256(abi.encode(VRF_RANDOM_OUTPUT_HASH_PREFIX, proof.gamma)));\\n    return output;\\n  }\\n}\\n\",\"keccak256\":\"0xeb4727512cbfd6c9b1e7db904c72dd6b36d066e93ad07c5f747bd4f7320ab26c\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"****************************************************************************Verification of verifiable-random-function (VRF) proofs, followinghttps://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.3See https://eprint.iacr.org/2017/099.pdf for security proofs.","version":1}}},"@chainlink/contracts/src/v0.8/vrf/interfaces/BlockhashStoreInterface.sol":{"BlockhashStoreInterface":{"abi":[{"inputs":[{"internalType":"uint256","name":"number","type":"uint256"}],"name":"getBlockhash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getBlockhash(uint256)":"e9413d38"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"getBlockhash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/vrf/interfaces/BlockhashStoreInterface.sol\":\"BlockhashStoreInterface\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/vrf/interfaces/BlockhashStoreInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface BlockhashStoreInterface {\\n  function getBlockhash(uint256 number) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x0d39e3be84000b35faa198e8c4fcc1cfd65a876275c776f45b4e0d48c852b4cc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol":{"VRFCoordinatorV2Interface":{"abi":[{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"}],"name":"acceptSubscriptionOwnerTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"address","name":"consumer","type":"address"}],"name":"addConsumer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"address","name":"to","type":"address"}],"name":"cancelSubscription","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"createSubscription","outputs":[{"internalType":"uint64","name":"subId","type":"uint64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getRequestConfig","outputs":[{"internalType":"uint16","name":"","type":"uint16"},{"internalType":"uint32","name":"","type":"uint32"},{"internalType":"bytes32[]","name":"","type":"bytes32[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"}],"name":"getSubscription","outputs":[{"internalType":"uint96","name":"balance","type":"uint96"},{"internalType":"uint64","name":"reqCount","type":"uint64"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"address[]","name":"consumers","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"}],"name":"pendingRequestExists","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"address","name":"consumer","type":"address"}],"name":"removeConsumer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"keyHash","type":"bytes32"},{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"uint16","name":"minimumRequestConfirmations","type":"uint16"},{"internalType":"uint32","name":"callbackGasLimit","type":"uint32"},{"internalType":"uint32","name":"numWords","type":"uint32"}],"name":"requestRandomWords","outputs":[{"internalType":"uint256","name":"requestId","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"address","name":"newOwner","type":"address"}],"name":"requestSubscriptionOwnerTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"acceptSubscriptionOwnerTransfer(uint64)":{"details":"will revert if original owner of subId has not requested that msg.sender become the new owner.","params":{"subId":"- ID of the subscription"}},"addConsumer(uint64,address)":{"params":{"consumer":"- New consumer which can use the subscription","subId":"- ID of the subscription"}},"cancelSubscription(uint64,address)":{"params":{"subId":"- ID of the subscription","to":"- Where to send the remaining LINK to"}},"createSubscription()":{"details":"You can manage the consumer set dynamically with addConsumer/removeConsumer.Note to fund the subscription, use transferAndCall. For exampleLINKTOKEN.transferAndCall(address(COORDINATOR),amount,abi.encode(subId));","returns":{"subId":"- A unique subscription id."}},"getRequestConfig()":{"returns":{"_0":"minimumRequestConfirmations global min for request confirmations","_1":"maxGasLimit global max for request gas limit","_2":"s_provingKeyHashes list of registered key hashes"}},"getSubscription(uint64)":{"params":{"subId":"- ID of the subscription"},"returns":{"balance":"- LINK balance of the subscription in juels.","consumers":"- list of consumer address which are able to use this subscription.","owner":"- owner of the subscription.","reqCount":"- number of requests for this subscription, determines fee tier."}},"removeConsumer(uint64,address)":{"params":{"consumer":"- Consumer to remove from the subscription","subId":"- ID of the subscription"}},"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)":{"params":{"callbackGasLimit":"- How much gas you'd like to receive in your fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords may be slightly less than this amount because of gas used calling the function (argument decoding etc.), so you may need to request slightly more than you expect to have inside fulfillRandomWords. The acceptable range is [0, maxGasLimit]","keyHash":"- Corresponds to a particular oracle job which uses that key for generating the VRF proof. Different keyHash's have different gas price ceilings, so you can select a specific one to bound your maximum per request cost.","minimumRequestConfirmations":"- How many blocks you'd like the oracle to wait before responding to the request. See SECURITY CONSIDERATIONS for why you may want to request more. The acceptable range is [minimumRequestBlockConfirmations, 200].","numWords":"- The number of uint256 random values you'd like to receive in your fulfillRandomWords callback. Note these numbers are expanded in a secure way by the VRFCoordinator from a single random value supplied by the oracle.","subId":"- The ID of the VRF subscription. Must be funded with the minimum subscription balance required for the selected keyHash."},"returns":{"requestId":"- A unique identifier of the request. Can be used to match a request to a response in fulfillRandomWords."}},"requestSubscriptionOwnerTransfer(uint64,address)":{"params":{"newOwner":"- proposed new owner of the subscription","subId":"- ID of the subscription"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"acceptSubscriptionOwnerTransfer(uint64)":"82359740","addConsumer(uint64,address)":"7341c10c","cancelSubscription(uint64,address)":"d7ae1d30","createSubscription()":"a21a23e4","getRequestConfig()":"00012291","getSubscription(uint64)":"a47c7696","pendingRequestExists(uint64)":"e82ad7d4","removeConsumer(uint64,address)":"9f87fad7","requestRandomWords(bytes32,uint64,uint16,uint32,uint32)":"5d3b1d30","requestSubscriptionOwnerTransfer(uint64,address)":"04c357cb"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"acceptSubscriptionOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"addConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"cancelSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createSubscription\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfig\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"getSubscription\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"balance\",\"type\":\"uint96\"},{\"internalType\":\"uint64\",\"name\":\"reqCount\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"consumers\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"pendingRequestExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"removeConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"minimumRequestConfirmations\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"}],\"name\":\"requestRandomWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"requestSubscriptionOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptSubscriptionOwnerTransfer(uint64)\":{\"details\":\"will revert if original owner of subId has not requested that msg.sender become the new owner.\",\"params\":{\"subId\":\"- ID of the subscription\"}},\"addConsumer(uint64,address)\":{\"params\":{\"consumer\":\"- New consumer which can use the subscription\",\"subId\":\"- ID of the subscription\"}},\"cancelSubscription(uint64,address)\":{\"params\":{\"subId\":\"- ID of the subscription\",\"to\":\"- Where to send the remaining LINK to\"}},\"createSubscription()\":{\"details\":\"You can manage the consumer set dynamically with addConsumer/removeConsumer.Note to fund the subscription, use transferAndCall. For exampleLINKTOKEN.transferAndCall(address(COORDINATOR),amount,abi.encode(subId));\",\"returns\":{\"subId\":\"- A unique subscription id.\"}},\"getRequestConfig()\":{\"returns\":{\"_0\":\"minimumRequestConfirmations global min for request confirmations\",\"_1\":\"maxGasLimit global max for request gas limit\",\"_2\":\"s_provingKeyHashes list of registered key hashes\"}},\"getSubscription(uint64)\":{\"params\":{\"subId\":\"- ID of the subscription\"},\"returns\":{\"balance\":\"- LINK balance of the subscription in juels.\",\"consumers\":\"- list of consumer address which are able to use this subscription.\",\"owner\":\"- owner of the subscription.\",\"reqCount\":\"- number of requests for this subscription, determines fee tier.\"}},\"removeConsumer(uint64,address)\":{\"params\":{\"consumer\":\"- Consumer to remove from the subscription\",\"subId\":\"- ID of the subscription\"}},\"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)\":{\"params\":{\"callbackGasLimit\":\"- How much gas you'd like to receive in your fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords may be slightly less than this amount because of gas used calling the function (argument decoding etc.), so you may need to request slightly more than you expect to have inside fulfillRandomWords. The acceptable range is [0, maxGasLimit]\",\"keyHash\":\"- Corresponds to a particular oracle job which uses that key for generating the VRF proof. Different keyHash's have different gas price ceilings, so you can select a specific one to bound your maximum per request cost.\",\"minimumRequestConfirmations\":\"- How many blocks you'd like the oracle to wait before responding to the request. See SECURITY CONSIDERATIONS for why you may want to request more. The acceptable range is [minimumRequestBlockConfirmations, 200].\",\"numWords\":\"- The number of uint256 random values you'd like to receive in your fulfillRandomWords callback. Note these numbers are expanded in a secure way by the VRFCoordinator from a single random value supplied by the oracle.\",\"subId\":\"- The ID of the VRF subscription. Must be funded with the minimum subscription balance required for the selected keyHash.\"},\"returns\":{\"requestId\":\"- A unique identifier of the request. Can be used to match a request to a response in fulfillRandomWords.\"}},\"requestSubscriptionOwnerTransfer(uint64,address)\":{\"params\":{\"newOwner\":\"- proposed new owner of the subscription\",\"subId\":\"- ID of the subscription\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptSubscriptionOwnerTransfer(uint64)\":{\"notice\":\"Request subscription owner transfer.\"},\"addConsumer(uint64,address)\":{\"notice\":\"Add a consumer to a VRF subscription.\"},\"cancelSubscription(uint64,address)\":{\"notice\":\"Cancel a subscription\"},\"createSubscription()\":{\"notice\":\"Create a VRF subscription.\"},\"getRequestConfig()\":{\"notice\":\"Get configuration relevant for making requests\"},\"getSubscription(uint64)\":{\"notice\":\"Get a VRF subscription.\"},\"removeConsumer(uint64,address)\":{\"notice\":\"Remove a consumer from a VRF subscription.\"},\"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)\":{\"notice\":\"Request a set of random words.\"},\"requestSubscriptionOwnerTransfer(uint64,address)\":{\"notice\":\"Request subscription owner transfer.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol\":\"VRFCoordinatorV2Interface\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(\\n    uint64 subId\\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa9f8b7e09811f4ac9f421116b5d6bcf50b5748025c0cb012aaf5ff7c39a6b46a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"acceptSubscriptionOwnerTransfer(uint64)":{"notice":"Request subscription owner transfer."},"addConsumer(uint64,address)":{"notice":"Add a consumer to a VRF subscription."},"cancelSubscription(uint64,address)":{"notice":"Cancel a subscription"},"createSubscription()":{"notice":"Create a VRF subscription."},"getRequestConfig()":{"notice":"Get configuration relevant for making requests"},"getSubscription(uint64)":{"notice":"Get a VRF subscription."},"removeConsumer(uint64,address)":{"notice":"Remove a consumer from a VRF subscription."},"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)":{"notice":"Request a set of random words."},"requestSubscriptionOwnerTransfer(uint64,address)":{"notice":"Request subscription owner transfer."}},"version":1}}},"@openzeppelin/contracts/access/Ownable.sol":{"Ownable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","kind":"dev","methods":{"constructor":{"details":"Initializes the contract setting the deployer as the initial owner."},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1942,"contract":"@openzeppelin/contracts/access/Ownable.sol:Ownable","label":"_owner","offset":0,"slot":"0","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}